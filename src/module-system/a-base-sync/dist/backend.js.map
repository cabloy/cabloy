{"version":3,"file":"backend.js","mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,0CAA0C,mCAAmC;AAC7E;AACA;AACA,sCAAsC,mCAAmC;AACzE;AACA;AACA,2BAA2B,MAAM;AACjC;;AAEA,oBAAoB,MAAM;AAC1B;AACA;AACA;AACA;AACA;;AAEA,yBAAyB,mCAAmC;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,yBAAyB,mCAAmC;AAC5D;AACA;AACA;AACA,2DAA2D,8BAA8B;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA,wCAAwC,gBAAgB,GAAG,mBAAmB;AAC9E;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACjFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,KAAK;AACpE;AACA;AACA;;AAEA;AACA;;;;;;;;ACdA,iBAAiB,mBAAO,CAAC,IAAmB;AAC5C,cAAc,mBAAO,CAAC,IAAgB;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;;;;;;;;AClBA;AACA;AACA,mBAAmB,gCAAgC;AACnD;AACA,uCAAuC,gCAAgC;AACvE;AACA;AACA;AACA,OAAO;AACP;AACA,eAAe;AACf;;AAEA,iBAAiB,+BAA+B;AAChD;AACA,sCAAsC,+BAA+B;AACrE;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,iCAAiC;AACpD;AACA,2BAA2B,iCAAiC;AAC5D;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB,6CAA6C;AAC/D;AACA,0BAA0B,6CAA6C;AACvE;AACA;AACA;AACA;;AAEA,mBAAmB,+BAA+B;AAClD;AACA,2BAA2B,+BAA+B;AAC1D;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;AC/EA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,gCAAgC;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,sCAAsC;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,uCAAuC,gCAAgC;AACvE;AACA;AACA;AACA;AACA;AACA,kEAAkE,YAAY;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,yCAAyC,iCAAiC;AAC1E;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;;AAEA,iBAAiB,+BAA+B;AAChD;AACA,sCAAsC,+BAA+B;AACrE;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,iCAAiC;AACpD;AACA,2BAA2B,iCAAiC;AAC5D;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB,6CAA6C;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,6CAA6C;AACvE;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,+BAA+B;AAClD;AACA;AACA;AACA;AACA,6CAA6C,YAAY;AACzD;AACA;;AAEA;AACA;AACA;AACA;AACA,wDAAwD,QAAQ;AAChE;AACA;;AAEA;AACA,gDAAgD,QAAQ;AACxD,gDAAgD,mBAAmB;;AAEnE;AACA,iDAAiD,QAAQ;;AAEzD;AACA,kDAAkD,QAAQ;AAC1D,qDAAqD,QAAQ;;AAE7D;AACA,2BAA2B,+BAA+B;AAC1D;AACA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;AACA;;AAEA,iBAAiB,6DAA6D;AAC9E,yBAAyB,6DAA6D;AACtF;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,6BAA6B,iDAAiD;AAC9E;AACA,iDAAiD,iDAAiD;AAClG;AACA;AACA;AACA;AACA;AACA,mDAAmD,iBAAiB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,MAAM;AAC3C;AACA;AACA;AACA;AACA;;AAEA,8BAA8B,MAAM;AACpC;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;;AAEA;AACA;;;;;;;;AClPA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,gCAAgC;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,gCAAgC;AACvE;AACA;AACA;AACA;AACA;AACA,kEAAkE,YAAY;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe;AACf;;AAEA,iBAAiB,+BAA+B;AAChD;AACA,sCAAsC,+BAA+B;AACrE;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,iCAAiC;AACpD;AACA,2BAA2B,iCAAiC;AAC5D;AACA;AACA;AACA;AACA;;AAEA,kBAAkB,6CAA6C;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,6CAA6C;AACvE;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,+BAA+B;AAClD;AACA;AACA,2BAA2B,+BAA+B;;AAE1D,oDAAoD,QAAQ;AAC5D,kDAAkD,QAAQ;;AAE1D;AACA,yCAAyC,YAAY;AACrD;;AAEA,mBAAmB,sBAAsB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,sBAAsB;AACjD;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA,oBAAoB,sBAAsB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,sBAAsB;AAClD;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA,6BAA6B,iDAAiD;AAC9E;AACA,iDAAiD,iDAAiD;AAClG;AACA;AACA;AACA;AACA;AACA,mDAAmD,iBAAiB;AACpE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;AC3IA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,kBAAkB,gCAAgC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,QAAQ;AACrD;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB,6CAA6C;AACrE;AACA,yCAAyC,wBAAwB;AACjE;AACA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA;AACA,eAAe;AACf;;AAEA,uBAAuB,0BAA0B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACzEA,eAAe,mBAAO,CAAC,IAA4B;AACnD,eAAe,mBAAO,CAAC,IAA4B;AACnD,mBAAmB,mBAAO,CAAC,IAAgC;AAC3D,uBAAuB,mBAAO,CAAC,IAAoC;AACnE,uBAAuB,mBAAO,CAAC,IAAoC;AACnE,mBAAmB,mBAAO,CAAC,IAAgC;AAC3D,oBAAoB,mBAAO,CAAC,IAAiC;AAC7D,oBAAoB,mBAAO,CAAC,GAAiC;AAC7D,oBAAoB,mBAAO,CAAC,IAAiC;AAC7D,8BAA8B,mBAAO,CAAC,IAA2C;;AAEjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC5BA,iBAAiB,mBAAO,CAAC,IAAU;AACnC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,mBAAmB,uEAAuE;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,yBAAyB,QAAQ,gBAAgB;AAC/E;AACA;AACA;AACA,mBAAmB,gCAAgC;AACnD;AACA,OAAO;AACP,cAAc,iBAAiB;AAC/B;AACA;AACA,gBAAgB,oBAAoB;AACpC;AACA,OAAO;AACP;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,+BAA+B,WAAW;AAC1C,eAAe;AACf;;AAEA;AACA,iBAAiB,oBAAoB;AACrC;AACA,+DAA+D,oBAAoB;AACnF;AACA;AACA;AACA;AACA,8BAA8B,yBAAyB,QAAQ,gBAAgB;AAC/E;AACA;AACA;AACA,mBAAmB,+BAA+B;AAClD;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA,4BAA4B,mDAAmD;AAC/E;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,uCAAuC,oBAAoB;AAC3D;AACA;;AAEA;AACA,kBAAkB,0BAA0B;AAC5C,iCAAiC,oCAAoC;AACrE;;AAEA;AACA,mBAAmB,uDAAuD;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,yBAAyB,QAAQ,gBAAgB;AACjF;AACA;AACA;AACA,qBAAqB,0BAA0B;AAC/C;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,kCAAkC,yBAAyB,QAAQ,gBAAgB;AACnF;AACA;AACA;AACA,uBAAuB,iCAAiC;AACxD;AACA,WAAW;AACX,UAAU;AACV,2CAA2C,iCAAiC;AAC5E;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB,kCAAkC;AACpD;AACA,+DAA+D,oBAAoB;AACnF;AACA;AACA;AACA;AACA;AACA,8BAA8B,yBAAyB,QAAQ,gBAAgB;AAC/E;AACA,oDAAoD,gBAAgB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,oBAAoB;AAC1C;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,mBAAmB,wDAAwD;AAC3E;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA,kDAAkD,WAAW;AAC7D;AACA;AACA;AACA;AACA,eAAe;AACf;;AAEA;AACA,mBAAmB,oBAAoB;AACvC,+DAA+D,oBAAoB;AACnF;AACA;AACA;AACA;AACA;AACA,8BAA8B,yBAAyB,QAAQ,gBAAgB;AAC/E;AACA,+CAA+C,gBAAgB;AAC/D;AACA;AACA,gCAAgC,KAAK;AACrC,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB,sCAAsC,iBAAiB;AAChG;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB,gDAAgD,iBAAiB;AAC1G;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,kBAAkB,wCAAwC,iBAAiB;AAChG;AACA,SAAS;AACT,QAAQ;AACR;AACA;AACA;AACA;AACA,qBAAqB,kBAAkB,wCAAwC,iBAAiB;AAChG;AACA,SAAS;AACT;AACA;;AAEA,mBAAmB,WAAW;AAC9B;AACA,+DAA+D,oBAAoB;AACnF;AACA;AACA;AACA;AACA;AACA,8BAA8B,yBAAyB,QAAQ,gBAAgB;AAC/E;AACA;AACA;AACA,mBAAmB,sBAAsB;AACzC;AACA,OAAO;AACP;;AAEA,oBAAoB,WAAW;AAC/B;AACA,+DAA+D,oBAAoB;AACnF;AACA;AACA;AACA;AACA;AACA,8BAA8B,yBAAyB,QAAQ,gBAAgB;AAC/E;AACA;AACA;AACA,mBAAmB,sBAAsB;AACzC;AACA,OAAO;AACP;;AAEA,kBAAkB,WAAW;AAC7B;AACA,+DAA+D,oBAAoB;AACnF;AACA;AACA;AACA;AACA,kBAAkB,oBAAoB;AACtC;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,qBAAqB;AAC1D;AACA,oBAAoB;AACpB,yCAAyC;AACzC,eAAe;AACf;;AAEA,uBAAuB,kCAAkC;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,4CAA4C;AACpF;AACA;AACA,8BAA8B,yBAAyB,QAAQ,gBAAgB;AAC/E;AACA;AACA;AACA,mBAAmB,yCAAyC;AAC5D;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA,uBAAuB,gCAAgC;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,6BAA6B;AACpF;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,4CAA4C;AAC9F,WAAW;AACX,UAAU;AACV,qDAAqD,4CAA4C;AACjG;AACA;AACA;AACA,QAAQ;AACR;AACA,qCAAqC,6BAA6B;AAClE;AACA;;AAEA,8BAA8B,4CAA4C;AAC1E;AACA,8BAA8B,yBAAyB,QAAQ,gBAAgB;AAC/E;AACA;AACA;AACA,mBAAmB,gCAAgC;AACnD;AACA,OAAO;AACP;;AAEA;;AAEA,gBAAgB,QAAQ;AACxB,wCAAwC,YAAY;AACpD;;AAEA,iBAAiB,aAAa,cAAc;AAC5C,+DAA+D,oBAAoB;AACnF;AACA;AACA;AACA,OAAO;AACP;AACA,8CAA8C,gBAAgB;AAC9D,qBAAqB;AACrB;AACA;AACA;;AAEA,sBAAsB,aAAa,aAAa;AAChD;AACA;AACA;AACA,OAAO;AACP;;AAEA,sBAAsB,aAAa,eAAe,QAAQ;AAC1D;AACA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB,aAAa,aAAa,QAAQ;AACtD;AACA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,aAAa,gBAAgB,QAAQ;AAC5D;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB,eAAe;AACjC;AACA;AACA,gDAAgD,QAAQ,YAAY,yBAAyB;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;;AAEA,mBAAmB,mBAAmB;AACtC,+CAA+C,WAAW;AAC1D;AACA,6CAA6C,kEAAkE;AAC/G;;AAEA,sBAAsB,WAAW;AACjC;AACA;AACA,8CAA8C,WAAW;AACzD;;AAEA,yBAAyB,mEAAmE;AAC5F;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,sCAAsC,wEAAwE;AAC9G,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,WAAW;AACtC,iGAAiG,WAAW;AAC5G;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,2BAA2B,8CAA8C;AACzE;AACA,uDAAuD,0CAA0C;AACjG;AACA;AACA;;AAEA;AACA;;;;;;;;ACnkBA,iBAAiB,mBAAO,CAAC,IAAU;AACnC;AACA;;AAEA;AACA;AACA;AACA,6BAA6B,WAAW;AACxC;AACA;AACA,gBAAgB,gBAAgB;AAChC;AACA;AACA,OAAO;AACP;AACA;AACA,0BAA0B,WAAW;AACrC;AACA;AACA;;AAEA,4BAA4B,uBAAuB;AACnD;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,sBAAsB,iBAAiB,GAAG,0BAA0B;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA,kBAAkB,iDAAiD;AACnE;AACA,+DAA+D,uBAAuB;AACtF;AACA;AACA;AACA;AACA;AACA,8BAA8B,yBAAyB,QAAQ,gBAAgB;AAC/E;AACA;AACA,6CAA6C,OAAO,uBAAuB,cAAc;AACzF;AACA;AACA,oDAAoD,uBAAuB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,2BAA2B;AACtD;AACA,SAAS;AACT;AACA;AACA,iDAAiD,oBAAoB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,gEAAgE;AACnF;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,mBAAmB,sEAAsE;AACzF;AACA,OAAO;AACP;AACA,oCAAoC,sDAAsD;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA,6BAA6B,uBAAuB;AACpD;AACA,oCAAoC,6BAA6B;AACjE;AACA;AACA,iBAAiB,4BAA4B;AAC7C,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA,oBAAoB,mBAAmB;AACvC;AACA;;AAEA,oBAAoB,uBAAuB;AAC3C;AACA,2DAA2D,iBAAiB;AAC5E;AACA;AACA,iCAAiC,iBAAiB;AAClD;AACA,kCAAkC,iBAAiB;AACnD;AACA,oCAAoC,iBAAiB;AACrD;AACA,6CAA6C,sBAAsB,iBAAiB,QAAQ;AAC5F;AACA;AACA;;AAEA,0BAA0B,QAAQ;AAClC;AACA,iBAAiB,iBAAiB;AAClC,OAAO;AACP;AACA,4BAA4B,iBAAiB;AAC7C;AACA;AACA,0CAA0C,QAAQ;AAClD;AACA;;AAEA,2BAA2B,QAAQ;AACnC;AACA,iBAAiB,QAAQ;AACzB,OAAO;AACP;AACA,6BAA6B,iBAAiB;AAC9C;AACA;AACA,2CAA2C,QAAQ;AACnD,8CAA8C,QAAQ;AACtD;AACA;;AAEA,iBAAiB,qCAAqC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kEAAkE,0BAA0B;AAC5F;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;;AAEA,mCAAmC,4BAA4B;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,6CAA6C,0DAA0D;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oBAAoB,iBAAiB,GAAG,wBAAwB;AAChE;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA,oBAAoB,iBAAiB,GAAG,wBAAwB;AAChE;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;;;;;;;;AC5dA,iBAAiB,mBAAO,CAAC,IAAU;AACnC;;AAEA;AACA;AACA,8BAA8B,kCAAkC;AAChE;AACA;AACA;AACA,kEAAkE,0BAA0B;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,4BAA4B;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA,oCAAoC,uCAAuC;AAC3E;AACA,+DAA+D,4BAA4B;AAC3F;AACA;AACA;AACA;AACA,kEAAkE,0BAA0B;AAC5F;AACA,6DAA6D,iBAAiB,GAAG,wBAAwB;AACzG,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,8BAA8B,yBAAyB,QAAQ,gBAAgB;AAC/E;AACA;AACA;AACA,mBAAmB,sDAAsD;AACzE;AACA,OAAO;AACP;AACA,qDAAqD,yCAAyC;AAC9F,2DAA2D,+CAA+C;AAC1G;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACnEA,iBAAiB,mBAAO,CAAC,IAAU;AACnC;;AAEA;AACA;AACA;AACA,6BAA6B,QAAQ,IAAI,wDAAwD;AACjG,+CAA+C,IAAI;AACnD;AACA;AACA,uDAAuD,uBAAuB;AAC9E;AACA;AACA,wDAAwD,kDAAkD;AAC1G;AACA;AACA;AACA,gFAAgF,mBAAmB;AACnG;AACA;AACA;AACA;AACA;;AAEA,qCAAqC,kDAAkD;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,8BAA8B,yBAAyB,QAAQ,gBAAgB;AAC/E;AACA;AACA;AACA,mBAAmB,wDAAwD;AAC3E;AACA,OAAO;AACP;;AAEA,8BAA8B,sCAAsC;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,qBAAqB;AACpF;AACA;AACA;AACA;AACA;AACA,uDAAuD,uBAAuB;AAC9E;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,+DAA+D,iBAAiB,GAAG,wBAAwB,GAAG,OAAO;AACrH;AACA;AACA,6CAA6C,yCAAyC;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,4CAA4C;AAChG;AACA;AACA,sDAAsD,uDAAuD;AAC7G;;AAEA,yCAAyC,qBAAqB;AAC9D;AACA,+DAA+D,8CAA8C;AAC7G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA;;AAEA,oCAAoC,4CAA4C;AAChF;AACA;AACA;AACA,iDAAiD,wBAAwB;AACzE;AACA;AACA;AACA;AACA;AACA,+CAA+C,+CAA+C;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,oEAAoE;AACtH;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,uCAAuC;AAClG;AACA;AACA;AACA;AACA;AACA;;AAEA,kCAAkC,mBAAmB;AACrD;AACA;AACA;AACA;;AAEA,wCAAwC,uDAAuD;AAC/F;AACA;AACA;AACA,gDAAgD,uBAAuB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,kEAAkE;AAChH;AACA;AACA;AACA,+CAA+C,+CAA+C;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,sCAAsC;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;;;;;;;AC1MA,iBAAiB,mBAAO,CAAC,IAAU;AACnC;;AAEA;AACA;AACA;AACA,uBAAuB,KAAK;AAC5B,+DAA+D,oBAAoB;AACnF;AACA;AACA;AACA;AACA;AACA,8BAA8B,yBAAyB,QAAQ,gBAAgB;AAC/E;AACA;AACA,mDAAmD,iBAAiB;AACpE,qBAAqB;AACrB;AACA;AACA;AACA;AACA,oBAAoB,gCAAgC;AACpD;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,UAAU;AACV;AACA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;;AAEA,sBAAsB,WAAW;AACjC;AACA,+DAA+D,oBAAoB;AACnF;AACA;AACA;AACA,4CAA4C,gBAAgB;AAC5D;AACA;AACA,6CAA6C,mCAAmC;AAChF;AACA;AACA;AACA;AACA,+CAA+C,mCAAmC;AAClF,QAAQ;AACR;AACA,mDAAmD,mCAAmC;AACtF;AACA;AACA;AACA;AACA;AACA,wCAAwC,qBAAqB;AAC7D;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA,gCAAgC,YAAY;AAC5C;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,oBAAoB,iBAAiB;AACrC;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,UAAU,gBAAgB;AACzC;;AAEA,oCAAoC,wCAAwC;AAC5E;AACA;AACA,0DAA0D,YAAY;AACtE;AACA;AACA;AACA,2DAA2D,YAAY;AACvE;AACA;AACA;AACA,4DAA4D,YAAY;AACxE;AACA;AACA;;AAEA,4CAA4C,YAAY;AACxD;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,+CAA+C,qBAAqB;AACpE;AACA;AACA;AACA,QAAQ;AACR;AACA,uDAAuD,uCAAuC;AAC9F;AACA;AACA;AACA;AACA;AACA,iDAAiD,qBAAqB;AACtE;AACA;AACA;AACA;AACA;AACA,oBAAoB,iBAAiB;AACrC;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,SAAS,eAAe;AACvC;;AAEA,2CAA2C,YAAY;AACvD;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iDAAiD,qBAAqB;AACtE;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,sBAAsB,iBAAiB;AACvC;AACA;AACA;AACA,WAAW;AACX;AACA,QAAQ;AACR;AACA,uDAAuD,6BAA6B;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,SAAS,eAAe;AACvC;;AAEA,0CAA0C,YAAY;AACtD;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,sBAAsB,2BAA2B;AACjD;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,QAAQ;AACR;AACA;AACA;AACA,eAAe,SAAS,eAAe;AACvC;;AAEA,8BAA8B,4BAA4B;AAC1D,+DAA+D,QAAQ;AACvE;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA,mCAAmC,oBAAoB;AACvD;AACA;AACA;AACA,kBAAkB,sBAAsB;AACxC;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACzRA;AACA;AACA;AACA,wBAAwB,KAAK;AAC7B;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;;;;;;;ACZA;AACA;AACA;AACA,+BAA+B,QAAQ,IAAI,UAAU;AACrD;AACA;AACA;AACA,+DAA+D,QAAQ;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA,2BAA2B,QAAQ,IAAI,yCAAyC;AAChF,+CAA+C,IAAI;AACnD;AACA;AACA,uDAAuD,uBAAuB;AAC9E;AACA;AACA,sDAAsD,mCAAmC;AACzF;AACA;AACA;AACA,gFAAgF,2BAA2B;AAC3G;AACA;AACA;AACA;AACA;;AAEA,mCAAmC,mCAAmC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,+CAA+C;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA,oBAAoB;AACpB,iCAAiC,gCAAgC;AACjE;AACA;AACA,4DAA4D,gCAAgC;AAC5F;AACA;AACA,8EAA8E,mBAAmB;AACjG;AACA;AACA;AACA;;AAEA,yCAAyC,gCAAgC;AACzE;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,iDAAiD,wBAAwB;AACzE;;AAEA,6BAA6B,iBAAiB;AAC9C,+CAA+C,4BAA4B;AAC3E;;AAEA,oBAAoB;AACpB,iCAAiC,8BAA8B;AAC/D;AACA;AACA,4DAA4D,8BAA8B;AAC1F;AACA;AACA,8EAA8E,6BAA6B;AAC3G;AACA;AACA;AACA;;AAEA,yCAAyC,8BAA8B;AACvE;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA,oBAAoB,kBAAkB;AACtC;AACA,+DAA+D,oBAAoB;AACnF;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,QAAQ,gBAAgB,6BAA6B;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB,wBAAwB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,yDAAyD,wBAAwB;AACjF;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA,wDAAwD,iBAAiB;AACzE;AACA;AACA,8EAA8E,6BAA6B;AAC3G;AACA;AACA;AACA;;AAEA;AACA,mCAAmC,iBAAiB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0BAA0B,iBAAiB;AAC3C,gDAAgD,iBAAiB;AACjE;AACA;;AAEA,4BAA4B,iBAAiB;AAC7C,8CAA8C,iBAAiB;AAC/D;AACA;AACA;;AAEA;AACA;;;;;;;;AChOA,iBAAiB,mBAAO,CAAC,IAAU;AACnC;;AAEA;AACA;AACA;AACA,4BAA4B,mCAAmC;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,OAAO,qBAAqB,QAAQ;AACzF,kCAAkC;AAClC;AACA;AACA,sBAAsB,qBAAqB;AAC3C;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,mFAAmF,iBAAiB;AACpG,2BAA2B;AAC3B;AACA,gCAAgC,yBAAyB,QAAQ,gBAAgB;AACjF;AACA;AACA;AACA,qBAAqB,gCAAgC;AACrD;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,kBAAkB;AAC5D;AACA;AACA;AACA;;AAEA,gCAAgC,wCAAwC;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,2DAA2D,oBAAoB;AAC/E;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA,+BAA+B,mCAAmC;AAClE;AACA;AACA;AACA;AACA,4CAA4C,mCAAmC;AAC/E;AACA;AACA,8CAA8C,mCAAmC;AACjF;AACA;AACA;AACA;;;;;;;;AC9GA;AACA;AACA;AACA,iBAAiB,aAAa,UAAU,QAAQ;AAChD;AACA,oCAAoC,oBAAoB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA,4BAA4B,sBAAsB;AAClD;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe;AACf;;AAEA,mBAAmB,aAAa,eAAe,QAAQ;AACvD;AACA,oCAAoC,oBAAoB;AACxD;AACA;AACA,qCAAqC,kCAAkC;AACvE;AACA,wCAAwC,kCAAkC;AAC1E;AACA;AACA;;AAEA,8BAA8B,sBAAsB;AACpD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA,4BAA4B,sBAAsB;AAClD;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,iCAAiC,sBAAsB;AACvD;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA,sBAAsB,MAAM;AAC5B;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX;AACA,+BAA+B,cAAc;AAC7C;AACA;AACA;;AAEA,sBAAsB,cAAc;AACpC;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,SAAS;AACT,QAAQ;AACR;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;;;;;;;ACzKA,iBAAiB,mBAAO,CAAC,IAAU;AACnC;;AAEA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC,+DAA+D,oBAAoB;AACnF;AACA;AACA;AACA,+CAA+C,gBAAgB;AAC/D;AACA;AACA,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA;AACA,8BAA8B,yBAAyB,QAAQ,gBAAgB;AAC/E;AACA;AACA;AACA,mBAAmB,+BAA+B;AAClD;AACA,OAAO;AACP;;AAEA,wBAAwB,oCAAoC;AAC5D;AACA;AACA,+CAA+C,iBAAiB;AAChE;AACA;AACA;AACA,0DAA0D,0CAA0C;AACpG;AACA;AACA;AACA,qCAAqC,aAAa,cAAc;AAChE;AACA;AACA,oBAAoB,gBAAgB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,aAAa;AACb;AACA;AACA;AACA,wCAAwC,iCAAiC;AACzE;;AAEA,0BAA0B,0BAA0B;AACpD,WAAW;AACX,qDAAqD,0BAA0B;AAC/E;AACA;AACA,eAAe;AACf;AACA,wDAAwD,wCAAwC;AAChG;AACA;AACA;AACA,mCAAmC,aAAa,cAAc;AAC9D;AACA,kBAAkB,gBAAgB;AAClC;AACA;AACA;AACA;AACA;AACA;;AAEA,iCAAiC,0BAA0B;AAC3D;AACA,+DAA+D,oBAAoB;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,2BAA2B;AACjD;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,kBAAkB,qBAAqB;AACvC;AACA,uCAAuC,4BAA4B;AACnE;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,sBAAsB;AAC1E;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB;AACA;AACA;AACA;;;;;;;;AC/HA,wBAAwB,mBAAO,CAAC,IAA2C;AAC3E,wBAAwB,mBAAO,CAAC,IAA2C;;AAE3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,gCAAgC,mBAAmB;AACnD;;AAEA;AACA;AACA;;AAEA,gBAAgB,uBAAuB;AACvC,0BAA0B,KAAK,IAAI;AACnC;AACA;AACA;AACA;AACA,qBAAqB,wBAAwB;AAC7C;AACA;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;;AAEA,sBAAsB,mBAAmB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,iFAAiF,OAAO;AACxF;AACA;AACA,8DAA8D,iBAAiB,GAAG,wBAAwB,GAAG,OAAO;AACpH;AACA;;AAEA,0BAA0B,mBAAmB;AAC7C,8CAA8C,mBAAmB;AACjE;;AAEA,gCAAgC,mBAAmB;AACnD;AACA,yCAAyC,mBAAmB;AAC5D;AACA,uDAAuD,iBAAiB;AACxE,4CAA4C,wEAAwE;AACpH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;AClFA;AACA;AACA;AACA,8BAA8B,oBAAoB;AAClD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;;AAEA,0BAA0B,kDAAkD;AAC5E,0BAA0B,KAAK,IAAI;AACnC;AACA;AACA;AACA;AACA,qBAAqB,wBAAwB;AAC7C;AACA;AACA;AACA;AACA,uBAAuB,8CAA8C;AACrE;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;;AAEA,oCAAoC,8CAA8C;AAClF,wDAAwD,8CAA8C;AACtG;;AAEA,0CAA0C,8CAA8C;AACxF;AACA,yCAAyC,iCAAiC;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;AC1EA,mBAAmB,mBAAO,CAAC,IAAoC;AAC/D,mBAAmB,mBAAO,CAAC,IAAoC;AAC/D,sBAAsB,mBAAO,CAAC,IAAuC;AACrE,uBAAuB,mBAAO,CAAC,IAAwC;;AAEvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChBA,iBAAiB,mBAAO,CAAC,IAAU;AACnC;;AAEA;AACA;AACA;AACA,mBAAmB,gCAAgC;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,sBAAsB,IAAI,QAAQ;AAC/D,UAAU;AACV,6BAA6B,uBAAuB,GAAG,QAAQ;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,iBAAiB;AAC/E;AACA,UAAU;AACV;AACA,gEAAgE,UAAU;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,iDAAiD,oBAAoB;AACrE;AACA;AACA;AACA;AACA,qDAAqD,6BAA6B;AAClF,eAAe;AACf;;AAEA,4BAA4B,0BAA0B;AACtD;AACA;;AAEA,mBAAmB,iCAAiC;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,qBAAqB;AAC3D;AACA;AACA;AACA;AACA;AACA,0CAA0C,MAAM;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,iBAAiB;AAC7D;AACA;AACA;AACA;AACA;AACA,2CAA2C,MAAM;AACjD;AACA;AACA;AACA;AACA,uCAAuC,sBAAsB;AAC7D;AACA;;AAEA,mBAAmB,+BAA+B;AAClD;AACA;AACA;AACA,kEAAkE,gBAAgB;AAClF;AACA;AACA;AACA,kDAAkD,oBAAoB;AACtE;AACA,sDAAsD,2CAA2C;AACjG;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,gBAAgB;AAChC;AACA,OAAO;AACP;;AAEA,mBAAmB,+BAA+B;AAClD,oDAAoD,+BAA+B;AACnF;;AAEA,mBAAmB,iCAAiC;AACpD;AACA;AACA;AACA,OAAO;AACP;;AAEA,oBAAoB,iCAAiC;AACrD;AACA;AACA;AACA,OAAO;AACP;;AAEA,oBAAoB,6DAA6D;AACjF;AACA;;AAEA,uBAAuB,oDAAoD;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,yBAAyB;AAC9C;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe;AACf;;AAEA,2BAA2B,iCAAiC;AAC5D;AACA;;AAEA,6BAA6B,iDAAiD;AAC9E,0DAA0D,iDAAiD;AAC3G;;AAEA,oCAAoC,2DAA2D;AAC/F;AACA;AACA;AACA,sBAAsB,WAAW;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,sCAAsC;AAC3D,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe;AACf,kBAAkB;AAClB;;AAEA,8BAA8B,uCAAuC;AACrE,+DAA+D,uCAAuC;AACtG;AACA;AACA;AACA;;;;;;;;ACxOA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,+BAA+B,MAAM;AACrC;AACA;AACA;AACA,6BAA6B,kBAAkB;AAC/C;;AAEA,gCAAgC,MAAM;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,mFAAmF,UAAU;AAC7F;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA,2BAA2B,qBAAqB;AAChD;AACA;AACA;AACA;AACA,uDAAuD,wBAAwB;AAC/E;AACA;AACA;AACA;AACA;;AAEA,gCAAgC,wBAAwB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA,gBAAgB,UAAU;AAC1B,gBAAgB,UAAU;AAC1B;AACA,kBAAkB,UAAU;AAC5B;AACA;AACA;AACA;AACA;;AAEA,mCAAmC,iBAAiB;AACpD;AACA;AACA;AACA;AACA,wDAAwD,sBAAsB;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA,8BAA8B,4BAA4B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,UAAU;AAC7B,mBAAmB,UAAU;AAC7B;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;AChJA;;AAEA;AACA;AACA;AACA,iBAAiB,+BAA+B;AAChD;AACA,iDAAiD,6CAA6C;AAC9F;AACA;AACA,wCAAwC,gCAAgC;AACxE;AACA;AACA;AACA,kCAAkC,qBAAqB;AACvD;AACA,sCAAsC,MAAM;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,iBAAiB;AAC3D;AACA;AACA;AACA,yCAAyC,MAAM;AAC/C;AACA;AACA,qCAAqC,qBAAqB;AAC1D;AACA;AACA;;AAEA,0BAA0B,gCAAgC;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,uDAAuD;AACxG;AACA,6BAA6B;AAC7B;AACA;AACA;;AAEA;AACA;;;;;;;;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB,6CAA6C;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,gBAAgB;AAC5E;AACA;AACA,kCAAkC,6CAA6C;AAC/E;AACA;AACA,8BAA8B,wCAAwC;AACtE;AACA;AACA,gDAAgD,6CAA6C;AAC7F;AACA,oDAAoD,oDAAoD;AACxG;AACA;AACA;AACA,wCAAwC,qCAAqC;AAC7E;;AAEA,2BAA2B,6CAA6C;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE,QAAQ;AACjF;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,mDAAmD,+CAA+C;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0CAA0C,QAAQ;AAClD;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;;AAEA,uBAAuB,wCAAwC;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,YAAY;AACrD;;AAEA,iCAAiC,qCAAqC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,wEAAwE,6BAA6B;AACrG;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACrJA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uCAAuC,kEAAkE;AACzG;;AAEA;AACA;AACA;AACA,qCAAqC,iCAAiC;AACtE;AACA;AACA;;AAEA,gBAAgB,kDAAkD;AAClE;AACA,0BAA0B,KAAK,IAAI;AACnC;AACA;AACA;AACA;AACA;AACA,qBAAqB,wBAAwB;AAC7C;AACA;AACA;AACA;AACA,uBAAuB,0CAA0C;AACjE;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;;AAEA,0BAA0B,0CAA0C;AACpE;AACA,oDAAoD,0CAA0C;AAC9F;AACA;AACA,wDAAwD,4BAA4B;AACpF;AACA;AACA;AACA;;AAEA,gCAAgC,0CAA0C;AAC1E;AACA,yCAAyC,0CAA0C;AACnF;AACA;AACA,kDAAkD,uBAAuB;AACzE,mDAAmD,OAAO,GAAG,eAAe;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB,QAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,2BAA2B,QAAQ;AACnC,iDAAiD,QAAQ;AACzD;AACA;;AAEA,sBAAsB,WAAW;AACjC;AACA;AACA;AACA,2BAA2B,sCAAsC;AACjE;;AAEA,4BAA4B,WAAW;AACvC;AACA;AACA,2BAA2B,sCAAsC;AACjE;;AAEA,4BAA4B,MAAM;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,YAAY,GAAG,mBAAmB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,YAAY,GAAG,eAAe;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB,iBAAiB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,8BAA8B;AACnF;AACA;AACA;;AAEA,sCAAsC,2BAA2B;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACtLA,iBAAiB,mBAAO,CAAC,IAAU;AACnC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA,uCAAuC,8BAA8B;AACrE;AACA;AACA;;AAEA,4BAA4B,8BAA8B;AAC1D;AACA,oCAAoC,6BAA6B;AACjE;AACA;;AAEA,8BAA8B,eAAe;AAC7C,0CAA0C,eAAe;AACzD;AACA;AACA;AACA;;AAEA,2BAA2B,6BAA6B;AACxD;AACA;AACA;AACA,mEAAmE,WAAW,GAAG,cAAc;AAC/F;AACA,+BAA+B,WAAW,GAAG,mBAAmB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,uCAAuC,OAAO,uBAAuB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,0CAA0C,6DAA6D;AACvG;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,yCAAyC,gDAAgD;AACzF;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,4DAA4D;AAClG,6CAA6C,iBAAiB;AAC9D,qCAAqC,mDAAmD;AACxF;AACA;;AAEA,iBAAiB,sDAAsD;AACvE;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA,8BAA8B,eAAe;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iCAAiC,iBAAiB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB,sDAAsD;AAC9E;AACA;AACA,8BAA8B,yBAAyB,QAAQ,mBAAmB;AAClF;AACA;AACA;AACA,mBAAmB,uCAAuC;AAC1D;AACA,OAAO;AACP;AACA;AACA,6BAA6B,uCAAuC;AACpE;AACA;AACA;AACA;AACA,0BAA0B,WAAW,GAAG,mBAAmB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,iBAAiB;AAC3D;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,UAAU;AACnE;AACA;AACA;AACA;AACA,kEAAkE,4CAA4C;AAC9G;AACA;AACA;AACA;;AAEA,sBAAsB,eAAe;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEA,4BAA4B,2DAA2D;AACvF;AACA,qBAAqB,wBAAwB,uBAAuB,mBAAmB;AACvF;AACA;AACA;AACA;AACA,uBAAuB,2DAA2D;AAClF;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;;AAEA,gCAAgC,gDAAgD;AAChF;AACA;AACA;AACA;AACA,uDAAuD,oBAAoB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,OAAO;AACzB,SAAS;AACT;AACA;AACA;AACA,qBAAqB,kBAAkB;AACvC,kBAAkB,OAAO;AACzB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,kBAAkB,OAAO;AACzB,SAAS;AACT;AACA;AACA;AACA,qBAAqB,kBAAkB;AACvC,kBAAkB,OAAO;AACzB,SAAS;AACT;AACA;;AAEA,sBAAsB,iBAAiB;AACvC;AACA,qBAAqB,wBAAwB,uBAAuB,mBAAmB;AACvF;AACA;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;;AAEA,0BAA0B,iBAAiB;AAC3C;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,OAAO;AACP;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,OAAO;AACP;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC,gBAAgB,OAAO;AACvB,OAAO;AACP;AACA;AACA;;AAEA;AACA;;;;;;;;ACnVA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,IAAI,GAAG,QAAQ,GAAG;AAC7B;AACA;AACA;AACA;AACA;AACA,yCAAyC,gBAAgB;AACzD,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,4CAA4C,MAAM;AAClD,mCAAmC,MAAM;AACzC;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,MAAM;AACxB,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;AACA,2CAA2C,wBAAwB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,MAAM;AAC7B;AACA;AACA,0BAA0B,gBAAgB,GAAG,aAAa,GAAG,0BAA0B,GAAG,iBAAiB;AAC3G;;AAEA,8BAA8B,iBAAiB;AAC/C,gBAAgB,UAAU,YAAY,gBAAgB,GAAG,QAAQ;AACjE;;AAEA,iBAAiB,MAAM;AACvB;AACA,cAAc,gEAAgE;AAC9E;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;;AAEA,0BAA0B,MAAM;AAChC;AACA,sCAAsC,MAAM;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,MAAM;AAChD;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,qBAAqB;AAChE;AACA;AACA;;AAEA,4BAA4B,MAAM;AAClC;AACA;AACA;AACA;AACA,0CAA0C,MAAM;AAChD;AACA;AACA;AACA;AACA;AACA;;AAEA,qCAAqC,MAAM;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA,4BAA4B,MAAM;AAClC;AACA;AACA,0CAA0C,MAAM;AAChD;AACA;AACA;AACA;;AAEA,+BAA+B,MAAM;AACrC;AACA,wDAAwD,iBAAiB;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;AC1NA,aAAa,mBAAO,CAAC,IAAM;AAC3B,iBAAiB,mBAAO,CAAC,IAAU;AACnC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,SAAS,GAAG,KAAK;AACxC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,oCAAoC,cAAc,KAAK,UAAU;AACjE,gBAAgB,OAAO,EAAE,WAAW;AACpC;;AAEA;AACA;AACA;AACA;AACA,gBAAgB,OAAO,EAAE,gBAAgB,GAAG,KAAK;AACjD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,mCAAqB;AACvC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,+CAA+C,KAAK;AACpD;;AAEA;AACA,kBAAkB,MAAM;AACxB,oEAAoE,yCAAyC;AAC7G;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAgB,uBAAuB;AACvC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,aAAa,mCAAmC;AAChD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,WAAW,GAAG,IAAI;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,4BAA4B;AAC5B,oEAAoE,yBAAyB;AAC7F;AACA,oDAAoD;AACpD;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,aAAa,GAAG,aAAa;AACnE;AACA,0EAA0E,iBAAiB;AAC3F;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;;AAEA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,wBAAwB;AACxB;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;;AAEA;AACA;;;;;;;;;AC9YA,aAAa,mBAAO,CAAC,IAAM;AAC3B,iBAAiB,mBAAO,CAAC,IAAU;AACnC;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mEAAmE,eAAe;AAClF;AACA,2DAA2D,OAAO;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACtDA;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAgB,uBAAuB;AACvC,sDAAsD,gBAAgB;AACtE;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA,kBAAkB,qEAAqE;AACvF,mCAAmC,+EAA+E;AAClH;;AAEA,kBAAkB,8FAA8F;AAChH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,iEAAiE,sBAAsB;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAgB,iBAAiB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA,mBAAmB,YAAY;AAC/B;AACA,0DAA0D,4BAA4B;AACtF;AACA;AACA;AACA;AACA,6CAA6C,YAAY;AACzD;AACA;AACA;;AAEA;AACA,sDAAsD,gBAAgB;AACtE;AACA;;AAEA;AACA,wCAAwC,gBAAgB;AACxD;AACA;AACA;;AAEA,iBAAiB,8BAA8B;AAC/C;AACA,sDAAsD,gBAAgB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,6CAA6C,YAAY;AACzD;AACA;AACA;AACA,OAAO;AACP;;AAEA,iBAAiB,gFAAgF;AACjG;AACA,iEAAiE,sBAAsB;AACvF;AACA;AACA,wCAAwC,0EAA0E;AAClH;;AAEA,0BAA0B,0EAA0E;AACpG,yCAAyC,0EAA0E;AACnH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;;AAEA,wBAAwB,uBAAuB;AAC/C,uCAAuC,uBAAuB;AAC9D;;AAEA,yBAAyB,uBAAuB;AAChD;AACA,wCAAwC,uBAAuB;AAC/D;AACA;AACA,uCAAuC,kDAAkD;AACzF;;AAEA;AACA,8BAA8B,wEAAwE;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,oCAAoC,YAAY;AAChD;AACA;AACA;AACA;AACA;;AAEA,sBAAsB,qDAAqD;AAC3E;AACA;AACA,qBAAqB,wBAAwB,qBAAqB,aAAa;AAC/E;AACA;AACA;AACA;AACA,uBAAuB,qDAAqD;AAC5E;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;;AAEA,0BAA0B,qDAAqD;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;;AAEA,yCAAyC,sBAAsB;AAC/D;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;;;;;;;AClRA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACTA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,kBAAkB,eAAe;AACjC,iCAAiC,yBAAyB;AAC1D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA,4BAA4B,8BAA8B;AAC1D;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,kDAAkD,8BAA8B;AAChF;AACA;AACA,+BAA+B,OAAO,QAAQ,iBAAiB;AAC/D;;AAEA;AACA,iBAAiB,oBAAoB;AACrC,gCAAgC,aAAa;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,oBAAoB;AAC5D;;AAEA,uBAAuB,kBAAkB;AACzC;AACA,8CAA8C,QAAQ;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA,kCAAkC,QAAQ;AAC1C;AACA;;AAEA,yBAAyB,QAAQ;AACjC,2DAA2D,QAAQ;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,kCAAkC,QAAQ;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA,kBAAkB,sBAAsB;AACxC;AACA;AACA,oDAAoD,qBAAqB;AACzE;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,UAAU;AACV;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;;AAEA,+BAA+B,qCAAqC;AACpE;AACA,0DAA0D,qCAAqC;AAC/F;AACA;AACA,4EAA4E,4BAA4B;AACxG;AACA;AACA;AACA;;AAEA,uCAAuC,qCAAqC;AAC5E;AACA,yDAAyD,8CAA8C;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA,0BAA0B,kBAAkB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,4BAA4B,iDAAiD;AAC7E;AACA;AACA,8DAA8D,6BAA6B;AAC3F;AACA,sEAAsE,0BAA0B;AAChG;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA,+BAA+B,iDAAiD;AAChF;AACA;AACA,8DAA8D,6BAA6B;AAC3F;AACA,sEAAsE,0BAA0B;AAChG;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA,WAAW,uDAAuD;AAClE,WAAW,uCAAuC;AAClD;AACA,iCAAiC,uBAAuB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,8CAA8C;AACvG;AACA,+DAA+D,OAAO,GAAG,kBAAkB;AAC3F,qCAAqC,gCAAgC;AACrE;AACA;;AAEA;AACA,6BAA6B,mCAAmC;AAChE;AACA,qCAAqC,uDAAuD;AAC5F;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,uBAAuB;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,2BAA2B,0BAA0B;AACrD;AACA;AACA;AACA,kDAAkD,oBAAoB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,mCAAmC,OAAO;AAC1C;AACA;AACA;;AAEA,4BAA4B,0BAA0B;AACtD;AACA;AACA;AACA,kDAAkD,oBAAoB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,mCAAmC,OAAO;AAC1C;AACA;AACA;;AAEA,iCAAiC,0BAA0B;AAC3D,kDAAkD,oBAAoB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,mCAAmC,OAAO;AAC1C;AACA;AACA;;AAEA,4BAA4B,OAAO;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iCAAiC,uBAAuB;AACxD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,iDAAiD,cAAc;AAC/D;AACA;AACA;AACA;AACA;;AAEA,8CAA8C,6BAA6B;AAC3E,iDAAiD,uBAAuB;AACxE;AACA;AACA,kDAAkD,8BAA8B;AAChF;AACA;AACA;;AAEA;;AAEA;AACA,8BAA8B,oBAAoB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA,+BAA+B,oBAAoB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA,oCAAoC,oBAAoB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;;AAEA;AACA;;;;;;;;AC9gBA,kBAAkB,mBAAO,CAAC,IAA+B;AACzD,wBAAwB,mBAAO,CAAC,IAAqC;AACrE,mBAAmB,mBAAO,CAAC,IAAgC;AAC3D,sBAAsB,mBAAO,CAAC,IAAmC;AACjE,oBAAoB,mBAAO,CAAC,IAAiC;AAC7D,4BAA4B,mBAAO,CAAC,IAAyC;AAC7E,mBAAmB,mBAAO,CAAC,IAAgC;AAC3D,kBAAkB,mBAAO,CAAC,IAA+B;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACvBA;AACA;AACA;AACA;AACA,yBAAyB,0EAA0E;AACnG;AACA,0EAA0E,2BAA2B;AACrG;AACA;AACA,+DAA+D,gDAAgD;AAC/G;AACA;AACA;AACA,6DAA6D,0BAA0B;AACvF;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,mDAAmD,6CAA6C;AAChG;AACA;;AAEA;AACA,sCAAsC,2BAA2B;;AAEjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;;AAEA;AACA,4BAA4B,uCAAuC;AACnE;AACA,6DAA6D,0BAA0B;AACvF;AACA;AACA,mDAAmD,iBAAiB;AACpE;AACA;AACA;AACA;AACA,mDAAmD,6CAA6C;AAChG;AACA;AACA;AACA,yCAAyC,yBAAyB;AAClE,4CAA4C,qBAAqB;AACjE;;AAEA,oCAAoC,qBAAqB;AACzD,yCAAyC,qBAAqB;AAC9D,4CAA4C,qBAAqB;AACjE;;AAEA;AACA,WAAW,0CAA0C;AACrD,WAAW,wDAAwD;AACnE,WAAW,yDAAyD;AACpE,WAAW,qEAAqE;AAChF,WAAW,+FAA+F;AAC1G;AACA,8BAA8B,0DAA0D;AACxF;AACA;AACA;AACA;AACA,uDAAuD,0CAA0C;AACjG;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,4DAA4D;AACrG,UAAU;AACV,4CAA4C,2CAA2C;AACvF;AACA;AACA,oDAAoD,kCAAkC;AACtF;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,6BAA6B,YAAY;AACzC;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ,yDAAyD,mCAAmC;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,0BAA0B;AACjD,yCAAyC,oBAAoB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,+CAA+C,OAAO;AACtD;AACA,4CAA4C,OAAO;AACnD;AACA,4CAA4C,oCAAoC;AAChF;AACA;AACA;;AAEA;AACA,wBAAwB,0BAA0B;AAClD,yCAAyC,oBAAoB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,+CAA+C,OAAO;AACtD;AACA,4CAA4C,OAAO;AACnD;AACA,2CAA2C,OAAO;AAClD;AACA,4CAA4C,oCAAoC;AAChF;AACA;AACA;;AAEA;AACA,6BAA6B,0BAA0B;AACvD,kDAAkD,oBAAoB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,+CAA+C,OAAO;AACtD;AACA,4CAA4C,OAAO;AACnD;AACA,2CAA2C,OAAO;AAClD;AACA,4CAA4C,oCAAoC;AAChF;AACA;AACA;;AAEA,wCAAwC,OAAO;AAC/C;AACA;AACA,mDAAmD,OAAO;AAC1D;AACA;;AAEA,oCAAoC,OAAO;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB,OAAO;AAC/B;AACA;AACA;AACA;AACA,2CAA2C,gBAAgB;AAC3D;AACA;AACA;AACA,8CAA8C,OAAO;AACrD;;AAEA,gCAAgC,OAAO;AACvC;AACA;AACA;AACA;AACA;;AAEA,qCAAqC,OAAO;AAC5C;AACA;AACA;AACA,uBAAuB,wDAAwD;AAC/E;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA,qCAAqC,sBAAsB;AAC3D;AACA;AACA,kBAAkB,cAAc;AAChC;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACxSA,mBAAmB,mBAAO,CAAC,IAA0B;;AAErD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,0BAA0B,UAAU;AACpC;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA,UAAU;AACV;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,YAAY,QAAQ,cAAc;AACxE;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA,OAAO;AACP;AACA;AACA;;AAEA,qBAAqB,0BAA0B;AAC/C,yCAAyC,oBAAoB;AAC7D,mCAAmC,sBAAsB;AACzD,8CAA8C,WAAW;AACzD,eAAe;AACf;;AAEA,iBAAiB,kCAAkC;AACnD;AACA,2CAA2C,oBAAoB;AAC/D;AACA;AACA;AACA;AACA,gCAAgC,2BAA2B;;AAE3D;AACA;AACA;;AAEA;AACA;AACA;;AAEA,mBAAmB,mCAAmC;AACtD,iDAAiD,oBAAoB;AACrE;AACA,mCAAmC,OAAO,oBAAoB,aAAa,SAAS;AACpF;;AAEA,kBAAkB,0BAA0B;AAC5C,iDAAiD,oBAAoB;AACrE;AACA,yCAAyC,OAAO,oBAAoB,QAAQ;AAC5E;;AAEA;AACA;AACA;AACA,6CAA6C,qBAAqB;AAClE;AACA;AACA;AACA,OAAO;AACP;;AAEA,2BAA2B,0BAA0B;AACrD;AACA;AACA;AACA,gDAAgD,iBAAiB;AACjE,wBAAwB;AACxB;AACA;AACA;;AAEA;AACA,0BAA0B,uCAAuC;AACjE;AACA,uDAAuD,+BAA+B;AACtF;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,mDAAmD,UAAU;AAC7D;AACA;AACA;AACA;;AAEA,mCAAmC,uCAAuC;AAC1E;AACA;AACA;AACA;AACA;AACA,kCAAkC,qBAAqB;AACvD,UAAU;AACV;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,gCAAgC,YAAY;AAC5C;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,oBAAoB;AACrC,iDAAiD,oBAAoB;AACrE,wCAAwC,OAAO,sBAAsB;AACrE;;AAEA;AACA,kBAAkB,kBAAkB;AACpC,yCAAyC,+BAA+B;AACxE;AACA;;AAEA;AACA,wBAAwB,uBAAuB;AAC/C,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA,qDAAqD,4BAA4B;AACjF;AACA;AACA,iDAAiD,SAAS;AAC1D;AACA;AACA,oDAAoD,gCAAgC;AACpF;AACA;;AAEA,gCAAgC,4BAA4B;AAC5D;AACA;AACA,oDAAoD,kBAAkB;AACtE;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,6CAA6C,oBAAoB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gCAAgC,SAAS;AACzC;AACA;AACA;AACA;AACA,6CAA6C,kBAAkB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA,gCAAgC,gCAAgC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX,SAAS;AACT;AACA;AACA,OAAO;AACP;;AAEA;AACA,qBAAqB,yCAAyC;AAC9D,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA,iBAAiB,gBAAgB,sCAAsC;AACvE,oCAAoC,YAAY;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,qCAAqC;AAC3E;AACA;;AAEA,sBAAsB,wBAAwB;AAC9C;AACA,qBAAqB,wBAAwB;AAC7C;AACA;AACA;AACA;AACA,uBAAuB,wBAAwB;AAC/C;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;;AAEA,0BAA0B,wBAAwB;AAClD;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,8BAA8B,wBAAwB;AACtD;;AAEA,6BAA6B,mBAAmB;AAChD;AACA;AACA;AACA;AACA,kDAAkD,UAAU;AAC5D;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,4DAA4D,6BAA6B;AACzF;AACA;AACA;AACA;AACA,wCAAwC,QAAQ,UAAU,cAAc;AACxE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;AC7YA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,YAAY;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,YAAY;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,uCAAuC,KAAK;AAC5C;AACA,oCAAoC,sBAAsB;AAC1D;AACA;AACA;AACA;AACA,yCAAyC,YAAY;AACrD;AACA,QAAQ;AACR;AACA;AACA,0CAA0C,kCAAkC;AAC5E;AACA;AACA;AACA;;AAEA,8BAA8B,KAAK;AACnC,uEAAuE,IAAI;AAC3E,6EAA6E,IAAI;AACjF,6EAA6E,IAAI;AACjF;;AAEA,2BAA2B,mBAAmB;AAC9C;AACA,qEAAqE,KAAK,qBAAqB,aAAa;AAC5G;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,aAAa;AAChD,sCAAsC,aAAa;AACnD,sCAAsC,aAAa;AACnD;AACA;AACA,sCAAsC,2BAA2B;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA,0BAA0B,aAAa;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,IAAI,GAAG,OAAO,GAAG,aAAa,GAAG,MAAM;AAC7D;AACA;AACA;AACA,4DAA4D,KAAK,WAAW,aAAa;AACzF;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;;AAEA,6BAA6B,aAAa;AAC1C;AACA;AACA,qBAAqB,IAAI,GAAG,OAAO;AACnC,4BAA4B,KAAK,qEAAqE,KAAK,eAAe,OAAO;AACjI;AACA;AACA;;AAEA,6BAA6B,aAAa;AAC1C;AACA;AACA;AACA,4BAA4B,KAAK,eAAe;AAChD;AACA;AACA;AACA;AACA;AACA,4BAA4B,KAAK,eAAe;AAChD;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;AC7JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,wCAAwC,uEAAuE;AAC/G;AACA;AACA;AACA;AACA,uDAAuD,2DAA2D;AAClH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,4DAA4D;AACrG,UAAU;AACV,4CAA4C,2CAA2C;AACvF;AACA;AACA,oDAAoD,kCAAkC;AACtF;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;;;;;;;AClDA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB,gCAAgC;AACrD;AACA,kBAAkB;AAClB;AACA,yCAAyC,oBAAoB;AAC7D;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA;;AAEA;AACA,uBAAuB,qCAAqC;AAC5D;AACA,6DAA6D,0BAA0B;AACvF;AACA;AACA,gEAAgE,2CAA2C;AAC3G;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,0BAA0B,qCAAqC;AAC/D;AACA,6DAA6D,0BAA0B;AACvF;AACA;AACA,gEAAgE,2CAA2C;AAC3G;;AAEA;AACA,uCAAuC,mBAAmB;;AAE1D;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,oBAAoB,gCAAgC;AACpD,wCAAwC,oBAAoB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;;;;;;;AC9FA;AACA;AACA;AACA,+BAA+B,QAAQ;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,+BAA+B,QAAQ;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,+BAA+B,QAAQ;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6BAA6B,gBAAgB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6BAA6B,gBAAgB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6BAA6B,gBAAgB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,8BAA8B,uCAAuC;AACrE;AACA;AACA;AACA,oCAAoC,mBAAmB;AACvD;AACA;AACA;AACA;AACA;AACA,2DAA2D,2BAA2B;AACtF;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA,4CAA4C,WAAW;AACvD;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA,8BAA8B,8CAA8C;AAC5E;AACA;AACA;AACA,oCAAoC,mBAAmB;AACvD;AACA;AACA;AACA;AACA;AACA,2DAA2D,2BAA2B;AACtF;AACA;AACA;AACA;AACA;AACA,YAAY,gBAAgB,0BAA0B;AACtD,YAAY,gBAAgB,0BAA0B;AACtD,YAAY,cAAc,0BAA0B;AACpD;AACA;AACA;AACA,yBAAyB,OAAO;AAChC;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA,cAAc,OAAO,0BAA0B,WAAW;AAC1D;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA,8BAA8B,uCAAuC;AACrE;AACA;AACA;AACA,oCAAoC,mBAAmB;AACvD;AACA;AACA;AACA;AACA;AACA,2DAA2D,2BAA2B;AACtF;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA,4CAA4C,WAAW;AACvD;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA,6BAA6B,oBAAoB;AACjD;AACA,sCAAsC,YAAY;AAClD;AACA;AACA;AACA;;AAEA,yBAAyB,oBAAoB;AAC7C;AACA,sCAAsC,oBAAoB;AAC1D;AACA;AACA;AACA;;AAEA,uBAAuB,oBAAoB;AAC3C;AACA,gCAAgC,oBAAoB;AACpD;AACA,8BAA8B,YAAY;AAC1C;;AAEA,wCAAwC,0BAA0B;AAClE,2CAA2C,oBAAoB;AAC/D;AACA;AACA;AACA,gBAAgB,iBAAiB;AACjC;AACA,OAAO;AACP;AACA;AACA;;AAEA,oCAAoC,kCAAkC;AACtE;AACA;AACA,iDAAiD,oBAAoB;AACrE;AACA;AACA,gBAAgB,gBAAgB;AAChC;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;;;;;;;ACjNA;AACA;AACA;AACA;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAsB,gCAAgC;AACtD;AACA,kBAAkB;AAClB;AACA,yCAAyC,oBAAoB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA;;AAEA,sBAAsB,gCAAgC;AACtD;AACA,kBAAkB;AAClB,kDAAkD,oBAAoB;AACtE;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA;;AAEA;AACA,wBAAwB,8CAA8C;AACtE;AACA,6DAA6D,0BAA0B;AACvF;AACA;AACA,sEAAsE,0BAA0B;AAChG;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA,2BAA2B,8CAA8C;AACzE;AACA,6DAA6D,0BAA0B;AACvF;AACA;AACA,sEAAsE,0BAA0B;AAChG;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA,+BAA+B,QAAQ;AACvC,wCAAwC,QAAQ;AAChD;AACA;;AAEA;AACA;;;;;;;;ACjGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,kBAAkB,qBAAqB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAgB,OAAO;AACvB,uCAAuC,WAAW;AAClD;;AAEA,iBAAiB,8BAA8B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,oBAAoB;AACzD;AACA;;AAEA,iBAAiB,oBAAoB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAgB,iBAAiB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA,iBAAiB,aAAa;AAC9B;AACA;AACA;AACA,OAAO;AACP;;AAEA,mBAAmB,OAAO;AAC1B;AACA,mDAAmD,OAAO;AAC1D;;AAEA;AACA,mCAAmC,WAAW;AAC9C;;AAEA,0BAA0B,kBAAkB;AAC5C;AACA;AACA;AACA;AACA;AACA,iCAAiC,QAAQ;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;;AAEA,0BAA0B,QAAQ;AAClC;AACA;AACA,OAAO;AACP;;AAEA,4BAA4B,kBAAkB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,OAAO;AAC/D;AACA,qCAAqC,yBAAyB;AAC9D;AACA;;AAEA,0BAA0B,OAAO;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBAAsB,6CAA6C;AACnE;AACA;AACA;AACA,sCAAsC,wCAAwC;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA,sBAAsB,8BAA8B;AACpD;AACA;AACA,qBAAqB,wBAAwB,gBAAgB,aAAa;AAC1E;AACA;AACA;AACA;AACA,uBAAuB,8BAA8B;AACrD;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;;AAEA,0BAA0B,8BAA8B;AACxD;AACA,oCAAoC,8BAA8B;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;;;;;;;;ACjMA,eAAe,mBAAO,CAAC,IAA4B;AACnD,eAAe,mBAAO,CAAC,IAA4B;;AAEnD;AACA;AACA;;;;;;;;ACLA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,wCAAwC,cAAc;AACtD;AACA;AACA;AACA;AACA;AACA,sCAAsC,kDAAkD;AACxF;AACA,uDAAuD,uBAAuB;AAC9E,wCAAwC,yBAAyB;AACjE;AACA,wCAAwC,YAAY;AACpD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wDAAwD,eAAe;AACvE;AACA;AACA;AACA,qDAAqD,uBAAuB;AAC5E;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,sBAAsB;AACxE,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,4DAA4D,mBAAmB;AAC/E;AACA;AACA;AACA;AACA;;AAEA,gCAAgC,SAAS;AACzC;AACA;AACA;AACA;AACA;AACA,sCAAsC,mBAAmB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,uBAAuB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,0BAA0B,gBAAgB;AAC1C;AACA,QAAQ;AACR;AACA,2BAA2B;AAC3B,0BAA0B,gBAAgB;AAC1C;AACA;AACA;AACA;AACA;;AAEA,yBAAyB,oBAAoB;AAC7C;AACA;AACA,wBAAwB,MAAM;AAC9B;AACA;AACA;AACA,2CAA2C,iBAAiB;AAC5D;AACA;;AAEA,6BAA6B,QAAQ;AACrC;AACA;AACA;AACA;AACA,yDAAyD,UAAU;AACnE,0CAA0C,yBAAyB;AACnE;AACA;;AAEA,kCAAkC,QAAQ;AAC1C;AACA,oCAAoC,YAAY;AAChD;AACA;AACA;AACA;AACA;AACA,mEAAmE,QAAQ;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,wBAAwB;AAC7F,+CAA+C,mCAAmC;AAClF;AACA;AACA,oEAAoE,+CAA+C;AACnH;AACA;AACA,8CAA8C,yBAAyB;AACvE;AACA;AACA;AACA;AACA;AACA,gBAAgB,0BAA0B;AAC1C,OAAO;AACP;;AAEA,kBAAkB,QAAQ;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB,QAAQ;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB,qBAAqB;AAC1C;AACA;AACA;AACA,OAAO;AACP;;AAEA,wBAAwB,qBAAqB;AAC7C;AACA;AACA;AACA,OAAO;AACP;;AAEA,wBAAwB,aAAa;AACrC;AACA,qCAAqC,iBAAiB;AACtD,sBAAsB;AACtB;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA,sCAAsC,sCAAsC;AAC5E;;AAEA;AACA,mBAAmB,8BAA8B;AACjD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,kCAAkC,wCAAwC;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,0CAA0C;AAClF;AACA;AACA,4CAA4C,gBAAgB;AAC5D;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,0CAA0C;AACpF,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,wCAAwC,gBAAgB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,wCAAwC,YAAY;AACpD;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB,yBAAyB;AACzC,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;;AAEA,6BAA6B,sBAAsB;AACnD;AACA;AACA;AACA;AACA,gBAAgB,sBAAsB;AACtC,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,oBAAoB;AAC9C;;AAEA,4BAA4B,QAAQ;AACpC;AACA;AACA;AACA,uCAAuC,wBAAwB;AAC/D,QAAQ;AACR,gEAAgE,wBAAwB;AACxF;AACA;AACA;;AAEA,2BAA2B,mBAAmB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,wBAAwB;AACzE;AACA;AACA;AACA;AACA,mCAAmC,IAAI;AACvC;AACA;AACA;AACA;AACA,iCAAiC,eAAe;AAChD,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,QAAQ;AAC5C;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,0BAA0B;AAC1D;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,YAAY;AAC7B;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,wBAAwB,MAAM;AAC9B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,iBAAiB;AACzD;AACA;AACA;AACA,qBAAqB,MAAM,IAAI,SAAS;AACxC;AACA,QAAQ;AACR,wCAAwC,iBAAiB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACjmBA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,QAAQ,uFAAuF;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,wCAAwC,yBAAyB;AACjE;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B,OAAO;AACP;AACA;AACA;;AAEA,mBAAmB,yBAAyB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,UAAU;AACnD,sCAAsC,OAAO;AAC7C,uCAAuC,QAAQ;AAC/C;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;;AAEA,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,0BAA0B;AACnF;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,2BAA2B,MAAM;AACjC;AACA,oCAAoC,aAAa;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,MAAM;AAC9B;;AAEA,sBAAsB,eAAe;AACrC;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,4BAA4B,sBAAsB;AAClD,4CAA4C,eAAe;AAC3D;AACA,iCAAiC,MAAM,GAAG,KAAK;AAC/C;AACA;;AAEA,kBAAkB,eAAe;AACjC,iCAAiC,yBAAyB;AAC1D;;AAEA,mBAAmB,4CAA4C;AAC/D,gCAAgC,iCAAiC;AACjE;;AAEA,0BAA0B,2CAA2C;AACrE,cAAc,cAAc;AAC5B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,gBAAgB,0BAA0B;AACtD,YAAY,gBAAgB,0BAA0B;AACtD,YAAY,cAAc,0BAA0B;AACpD;AACA;AACA,gCAAgC,iCAAiC;AACjE;;AAEA,kBAAkB;AAClB,kBAAkB,4CAA4C;AAC9D;AACA;AACA,iDAAiD,6DAA6D;AAC9G;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,eAAe;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB,8BAA8B;AAClD,2CAA2C,oBAAoB;AAC/D,oBAAoB;AACpB;AACA,sCAAsC,aAAa,SAAS;AAC5D,QAAQ;AACR,qCAAqC,aAAa,SAAS;AAC3D;AACA;;AAEA,mBAAmB,oBAAoB;AACvC,iDAAiD,oBAAoB;AACrE;AACA,mCAAmC,OAAO,sBAAsB;AAChE;;AAEA,6BAA6B,oBAAoB;AACjD;AACA,sCAAsC,YAAY;AAClD;AACA;AACA;AACA;;AAEA,yBAAyB,oBAAoB;AAC7C;AACA,sCAAsC,oBAAoB;AAC1D;AACA;AACA;AACA;;AAEA,uBAAuB,oBAAoB;AAC3C;AACA,gCAAgC,oBAAoB;AACpD;AACA,8BAA8B,YAAY;AAC1C;;AAEA,wCAAwC,0BAA0B;AAClE,4CAA4C,oBAAoB;AAChE;AACA;AACA;AACA,gBAAgB,kBAAkB;AAClC;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAgB,MAAM;AACtB;AACA,sDAAsD,iBAAiB;AACvE,uBAAuB;AACvB;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,MAAM;AACN;;AAEA,gBAAgB,+CAA+C;AAC/D;AACA,gDAAgD,0BAA0B;AAC1E,mDAAmD,wBAAwB;AAC3E;AACA,kCAAkC,WAAW,qBAAqB,WAAW,mBAAmB,WAAW;AAC3G;AACA,yEAAyE,6BAA6B;AACtG;AACA;AACA,iDAAiD,2BAA2B;AAC5E;AACA;AACA,gBAAgB,QAAQ;AACxB,WAAW;AACX;AACA,mBAAmB;AACnB,mBAAmB;AACnB,mBAAmB;AACnB;AACA,aAAa;AACb;AACA;AACA;;;;;;;;AC1SA,iBAAiB,mBAAO,CAAC,IAAU;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,mBAAO,CAAC,IAAoB;;AAE1C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,0BAA0B,WAAW,IAAI;AACzC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,yBAAyB,IAAI,IAAI,IAAI;AACrC;AACA;;AAEA;AACA;AACA,uBAAuB,IAAI,IAAI,IAAI;AACnC;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iDAAiD,cAAc;AAC/D;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR,wBAAwB,sBAAsB;AAC9C;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,eAAe,GAAG,IAAI;AACvC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,qBAAqB,wBAAwB;AAC7C;AACA,qDAAqD,OAAO,GAAG,MAAM;AACrE;AACA,yDAAyD,MAAM;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,yBAAyB,8BAA8B;AACvD,qDAAqD,qCAAqC;AAC1F,0EAA0E;AAC1E;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,wBAAwB,mBAAmB;AAC3C,oDAAoD,mBAAmB;AACvE,SAAS;AACT;AACA;;AAEA;AACA,8BAA8B,eAAe;AAC7C;AACA,gEAAgE,YAAY;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;;;;;;;;AC5QA,uBAAuB,mBAAO,CAAC,IAA2C;AAC1E,yBAAyB,mBAAO,CAAC,IAA6C;AAC9E,6BAA6B,mBAAO,CAAC,IAAiD;AACtF,8BAA8B,mBAAO,CAAC,IAAkD;AACxF,+BAA+B,mBAAO,CAAC,IAAmD;AAC1F,4BAA4B,mBAAO,CAAC,GAAgD;AACpF,+CAA+C,mBAAO,CAAC,GAAmE;AAC1H,2CAA2C,mBAAO,CAAC,IAA+D;AAClH,6CAA6C,mBAAO,CAAC,IAAiE;AACtH,iDAAiD,mBAAO,CAAC,IAAqE;AAC9H,iDAAiD,mBAAO,CAAC,IAAqE;AAC9H,2BAA2B,mBAAO,CAAC,IAA+C;;AAElF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,iBAAiB,yCAAyC;AAC1D;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,+BAA+B,OAAO;AACtC;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA,4BAA4B,eAAe;AAC3C,WAAW;AACX;AACA,oCAAoC;AACpC;;AAEA,WAAW;AACX,WAAW;AACX;;AAEA;AACA;AACA;;AAEA,8BAA8B,mDAAmD;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,+BAA+B,OAAO;AACtC;AACA;;AAEA;AACA;AACA;AACA;AACA,kCAAkC,KAAK,eAAe,WAAW;AACjE,OAAO;AACP;AACA,+DAA+D,KAAK,qCAAqC,UAAU;AACnH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oCAAoC,KAAK,eAAe,OAAO;AAC/D,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,qBAAqB;AACrB;;AAEA;AACA;AACA,kBAAkB;AAClB,kBAAkB;;AAElB,kBAAkB;;AAElB;AACA,2CAA2C;AAC3C,qBAAqB;AACrB,qBAAqB;AACrB;AACA;AACA;AACA;AACA,kGAAkG,KAAK,wCAAwC;AAC/I;AACA;AACA;;AAEA,iBAAiB;AACjB,iBAAiB;AACjB;;AAEA;AACA;AACA;;AAEA,iCAAiC,4BAA4B;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,KAAK,WAAW;AAC7D;AACA,8FAA8F,KAAK,mBAAmB,YAAY,kBAAkB,UAAU;AAC9J;AACA;AACA;AACA;;;;;;;;ACpLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA,mBAAmB,2BAA2B;AAC9C;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,kCAAkC,KAAK;AACvC;AACA;AACA;AACA;AACA,qCAAqC,KAAK;AAC1C;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA,eAAe;AACf;AACA;AACA;AACA;;;;;;;;AC3IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACTA;AACA;AACA,uBAAuB,6CAA6C;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,WAAW,6EAA6E,KAAK,+CAA+C,QAAQ,gCAAgC,UAAU;AACzN;AACA;AACA;AACA;AACA;AACA,iFAAiF,KAAK,yEAAyE,QAAQ,kBAAkB;AACzL;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,4BAA4B,KAAK,+CAA+C,QAAQ,iDAAiD;AACzI;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA,YAAY;AACZ;AACA;AACA;AACA,gCAAgC,aAAa;AAC7C,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,KAAK,WAAW;AACtD;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACtDA;AACA;AACA,2BAA2B,qCAAqC;AAChE;AACA;AACA;AACA;AACA;;AAEA,kDAAkD,OAAO;AACzD;AACA;AACA,4EAA4E,KAAK,sEAAsE;AACvJ;AACA;AACA;AACA;AACA;AACA,4BAA4B,KAAK,iCAAiC,aAAa,EAAE,cAAc,EAAE;AACjG;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACxBA;AACA;AACA,2BAA2B,0CAA0C;AACrE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4EAA4E,KAAK,wDAAwD,WAAW,eAAe;AACnK;AACA;AACA;AACA;AACA,0BAA0B,KAAK,WAAW,aAAa,EAAE;AACzD;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACtBA;AACA;AACA;AACA,qBAAqB,mDAAmD;AACxE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,6BAA6B,WAAW,6EAA6E,KAAK,+EAA+E,UAAU;AACnN;AACA;AACA;AACA;AACA;AACA,iFAAiF,KAAK,2FAA2F;AACjL;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,8BAA8B,KAAK,gGAAgG;AACnI,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA,YAAY;AACZ;AACA;AACA;AACA,gCAAgC,aAAa;AAC7C,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,KAAK,WAAW;AACzD;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChEA;AACA;AACA,yBAAyB,qCAAqC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iFAAiF,KAAK,2FAA2F;AACjL;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,8BAA8B,KAAK,gGAAgG;AACnI;AACA;AACA;AACA;AACA,gCAAgC,aAAa;AAC7C,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,KAAK,WAAW;AACvD;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2EAA2E;AAC3E;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,cAAc,iCAAiC,sBAAsB,2BAA2B;;AAEhG;AACA,gCAAgC,OAAO;AACvC;AACA;;AAEA;AACA;AACA;AACA,QAAQ;AACR;AACA;;AAEA;AACA;AACA,kDAAkD,SAAS;AAC3D,QAAQ;AACR;AACA;;AAEA;AACA;AACA;AACA,kCAAkC,KAAK,cAAc,IAAI;AACzD,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sCAAsC,KAAK;AAC3C,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mCAAmC,KAAK;AACxC,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mCAAmC,WAAW;AAC9C,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR,2BAA2B,YAAY,EAAE;AACzC;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,kBAAkB,eAAe,EAAE,YAAY,EAAE,eAAe;AAChE;;AAEA;AACA;AACA;AACA;AACA;AACA,mEAAmE,KAAK,6CAA6C;AACrH;AACA;AACA;AACA;AACA,gCAAgC,aAAa;AAC7C,QAAQ;AACR;AACA;;AAEA;AACA,6BAA6B,eAAe;AAC5C;AACA,cAAc;AACd;AACA;AACA,cAAc;AACd,cAAc;AACd,cAAc;AACd,cAAc;AACd,cAAc;AACd,cAAc;;AAEd,YAAY;AACZ;AACA,qCAAqC,KAAK,kBAAkB;AAC5D,eAAe;AACf,eAAe;AACf,eAAe;AACf,eAAe;AACf,eAAe;AACf,eAAe;AACf,eAAe;AACf,eAAe;AACf,eAAe;AACf;;AAEA,YAAY;AACZ,YAAY;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC3NA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2EAA2E;AAC3E;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,cAAc,iCAAiC,sBAAsB,2BAA2B;;AAEhG;AACA,gCAAgC,OAAO;AACvC;AACA;;AAEA;AACA;AACA;AACA,QAAQ;AACR;AACA;;AAEA;AACA;AACA,kDAAkD,SAAS;AAC3D,QAAQ;AACR;AACA;;AAEA;AACA;AACA;AACA,kCAAkC,KAAK,cAAc,IAAI;AACzD,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA;AACA,mCAAmC,KAAK,eAAe,WAAW;AAClE,QAAQ;AACR;AACA;AACA;AACA,4EAA4E,KAAK,mCAAmC,UAAU;;AAE9H;AACA;AACA;AACA,oCAAoC,KAAK,eAAe,WAAW,gBAAgB,MAAM;AACzF,QAAQ;AACR;AACA;AACA;AACA,gFAAgF,KAAK,mCAAmC,UAAU;;AAElI;AACA;AACA;AACA,qEAAqE,KAAK,sCAAsC,UAAU;;AAE1H;AACA,sCAAsC,KAAK;AAC3C,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mCAAmC,KAAK;AACxC,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mCAAmC,WAAW;AAC9C,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR,2BAA2B,YAAY,EAAE;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,YAAY,EAAE,aAAa,EAAE;AAC/C,kBAAkB,YAAY,EAAE;AAChC;AACA;;AAEA;AACA,6BAA6B,eAAe;AAC5C;AACA;AACA;AACA;AACA,cAAc;AACd,cAAc;AACd,cAAc;AACd,cAAc;AACd,cAAc;AACd,cAAc;AACd,cAAc;AACd,cAAc;;AAEd,YAAY;AACZ;AACA,qCAAqC,KAAK,kBAAkB,OAAO,yCAAyC;AAC5G,eAAe;AACf,eAAe;AACf,eAAe;AACf,eAAe;AACf,eAAe;AACf,eAAe;AACf,eAAe;AACf,eAAe;AACf,eAAe;AACf,eAAe;AACf;;AAEA,YAAY;AACZ,YAAY;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACxNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2EAA2E;AAC3E;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,cAAc,iCAAiC,sBAAsB,2BAA2B;;AAEhG;AACA,gCAAgC,OAAO;AACvC;AACA;;AAEA;AACA;AACA;AACA,QAAQ;AACR;AACA;;AAEA;AACA;AACA,kDAAkD,SAAS;AAC3D,QAAQ;AACR;AACA;;AAEA;AACA;AACA;AACA,kCAAkC,KAAK,cAAc,IAAI;AACzD,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA;AACA,mCAAmC,KAAK,eAAe,WAAW;AAClE,QAAQ;AACR;AACA;AACA;AACA,4EAA4E,KAAK,mCAAmC,UAAU;;AAE9H;AACA;AACA;AACA,oCAAoC,KAAK,eAAe,WAAW,gBAAgB,MAAM;AACzF,QAAQ;AACR;AACA;AACA;AACA,gFAAgF,KAAK,mCAAmC,UAAU;;AAElI;AACA;AACA;AACA,qEAAqE,KAAK,sCAAsC,UAAU;;AAE1H;AACA,sCAAsC,KAAK;AAC3C,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mCAAmC,KAAK;AACxC,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mCAAmC,WAAW;AAC9C,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;;AAEA;AACA;AACA;AACA,QAAQ;AACR;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR,2BAA2B,YAAY,EAAE;AACzC;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,kBAAkB,YAAY,EAAE,aAAa,EAAE,eAAe,EAAE,YAAY,EAAE,eAAe;AAC7F;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gFAAgF,KAAK,MAAM,aAAa,oCAAoC;AAC5I;AACA;AACA,QAAQ;AACR;AACA,6BAA6B,WAAW,6EAA6E,KAAK,+EAA+E,UAAU;AACnN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iGAAiG;AACjG,gCAAgC,KAAK,2FAA2F;AAChI;AACA;AACA,YAAY;AACZ;AACA;AACA,qFAAqF,KAAK,2FAA2F;AACrL;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,8BAA8B,KAAK,gGAAgG;AACnI,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,gBAAgB;AAChB;AACA,gBAAgB;AAChB;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,gBAAgB;AAChB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gCAAgC,aAAa;AAC7C,QAAQ;AACR;AACA;;AAEA;AACA,6BAA6B,eAAe;AAC5C;AACA,cAAc;AACd;AACA;AACA,cAAc;AACd,cAAc;AACd,cAAc;AACd,cAAc;AACd,cAAc;AACd,cAAc;AACd,cAAc;AACd,cAAc;;AAEd,YAAY;AACZ;AACA,qCAAqC,KAAK,kBAAkB;AAC5D,eAAe;AACf,eAAe;AACf,eAAe;AACf,eAAe;AACf,eAAe;AACf,eAAe;AACf,eAAe;AACf,eAAe;AACf,eAAe;AACf,eAAe;AACf,eAAe;AACf;;AAEA,YAAY;AACZ,YAAY;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChUA;AACA;AACA,cAAc,qFAAqF;AACnG;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2EAA2E;;AAE3E;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,qEAAqE,KAAK,iCAAiC,UAAU;AACrH,QAAQ;AACR;AACA;;AAEA;AACA;AACA,yEAAyE,KAAK,iCAAiC,UAAU;AACzH,QAAQ;AACR;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mCAAmC,WAAW;AAC9C,QAAQ;AACR;AACA;AACA;;AAEA;AACA,cAAc,iCAAiC,sBAAsB,2BAA2B;;AAEhG;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA,6BAA6B,YAAY,EAAE;AAC3C;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,kBAAkB;AAClB,kBAAkB;AAClB,kBAAkB;AAClB,kBAAkB;AAClB;;AAEA;AACA,cAAc;AACd;AACA;AACA,cAAc;AACd,cAAc;AACd,cAAc;AACd,cAAc;;AAEd,uBAAuB;AACvB,wCAAwC;AACxC,cAAc;AACd,cAAc;AACd,cAAc;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACzHA;AACA;AACA,yBAAyB,gCAAgC;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uFAAuF,KAAK,uBAAuB,gBAAgB,kBAAkB,UAAU;AAC/J;AACA;AACA;AACA;AACA;AACA,0BAA0B,KAAK,kEAAkE;AACjG,gBAAgB;AAChB;AACA;AACA;;AAEA,4BAA4B,2BAA2B;AACvD;AACA;AACA;AACA;AACA;AACA,0BAA0B,KAAK,0DAA0D,uBAAuB;AAChH;AACA;AACA,gCAAgC,KAAK,eAAe,QAAQ;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACVA,YAAY,+BAAkB;AAC9B,iBAAiB,mBAAO,CAAC,IAAU;AACnC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,iDAAiD;;AAEjD;AACA;AACA;AACA;AACA;AACA,wBAAwB,UAAU,UAAU,KAAK;AACjD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACnDA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,IAAI;AACrB,IAAI;AACJ;AACA;AACA;AACA;AACA,iBAAiB,IAAI;AACrB,IAAI;AACJ;AACA;AACA;AACA;AACA,iBAAiB,IAAI;AACrB,IAAI;AACJ;AACA;AACA;AACA,eAAe,IAAI;AACnB,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,UAAU,qBAAqB,gCAAgC,cAAc;;AAE7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,oBAAoB;AAClC;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,IAAI;AACJ;AACA,cAAc,oBAAoB;AAClC;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,uCAAuC,qBAAqB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,+CAA+C,GAAG,KAAK;AACvE,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,oBAAoB;AACrD,oBAAoB;AACpB;AACA;AACA;AACA;;AAEA,gCAAgC,oCAAoC;AACpE;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA,mDAAmD,SAAS;AAC5D;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;;AAEA,uCAAuC,cAAc;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,wBAAwB;AAC/E,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC1NA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;;;;;;;ACvBA;AACA;AACA;AACA,cAAc,UAAU;AACxB;AACA;AACA;;AAEA;AACA;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACTA;AACA;AACA;AACA,sCAAsC,eAAe;AACrD;AACA;;AAEA;AACA;;;;;;;;ACRA;AACA;AACA;AACA;AACA,cAAc,uBAAuB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACxCA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,MAAM;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,SAAS;AACT;AACA;AACA;AACA,8BAA8B,QAAQ;AACtC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACzCA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;;;;;;;AChBA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;AChCA,yBAAyB,mBAAO,CAAC,IAAsB;AACvD,yBAAyB,mBAAO,CAAC,IAAsB;AACvD,yBAAyB,mBAAO,CAAC,IAAsB;AACvD,yBAAyB,mBAAO,CAAC,IAAsB;AACvD,yBAAyB,mBAAO,CAAC,IAAsB;AACvD,yBAAyB,mBAAO,CAAC,IAAsB;AACvD,yBAAyB,mBAAO,CAAC,IAAsB;AACvD,0BAA0B,mBAAO,CAAC,IAAuB;AACzD,0BAA0B,mBAAO,CAAC,IAAuB;AACzD,0BAA0B,mBAAO,CAAC,IAAuB;AACzD,0BAA0B,mBAAO,CAAC,IAAuB;AACzD,0BAA0B,mBAAO,CAAC,IAAuB;AACzD,0BAA0B,mBAAO,CAAC,IAAuB;AACzD,0BAA0B,mBAAO,CAAC,IAAuB;AACzD,0BAA0B,mBAAO,CAAC,IAAuB;AACzD,0BAA0B,mBAAO,CAAC,IAAuB;AACzD,0BAA0B,mBAAO,CAAC,IAAuB;AACzD,0BAA0B,mBAAO,CAAC,IAAuB;AACzD,uBAAuB,mBAAO,CAAC,IAAoB;AACnD,uBAAuB,mBAAO,CAAC,IAAoB;AACnD,uBAAuB,mBAAO,CAAC,IAAoB;AACnD,uBAAuB,mBAAO,CAAC,IAAoB;AACnD,uBAAuB,mBAAO,CAAC,IAAoB;AACnD,uBAAuB,mBAAO,CAAC,IAAoB;AACnD,wBAAwB,mBAAO,CAAC,IAAqB;AACrD,wBAAwB,mBAAO,CAAC,IAAqB;;AAErsCAAsC,cAAc;AACpD;AACA,wDAAwD,cAAc;AACtE;AACA;;AAEA;AACA;;;;;;;;ACjLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uDAAuD,sBAAsB;AAC7E,iCAAiC,kCAAkC;AACnE;AACA;;AAEA;AACA;AACA;AACA,UAAU,sCAAsC;AAChD,UAAU,mDAAmD;AAC7D,UAAU,iEAAiE;AAC3E,UAAU,oDAAoD;AAC9D,UAAU,kEAAkE;AAC5E,UAAU,qDAAqD;AAC/D,UAAU,mEAAmE;AAC7E,UAAU,oDAAoD;AAC9D,UAAU,kEAAkE;AAC5E,UAAU,qDAAqD;AAC/D,UAAU,mEAAmE;AAC7E,UAAU,sDAAsD;AAChE,UAAU,oEAAoE;AAC9E,UAAU,wDAAwD;AAClE,UAAU,sEAAsE;AAChF,UAAU,0CAA0C;AACpD,UAAU,0CAA0C;AACpD;AACA,8CAA8C,uCAAuC;AACrF;;AAEA;AACA;AACA;AACA,aAAa,sCAAsC;AACnD,aAAa,mDAAmD;AAChE,aAAa,oDAAoD;AACjE,aAAa,qDAAqD;AAClE,aAAa,oDAAoD;AACjE,aAAa,qDAAqD;AAClE,aAAa,0DAA0D;AACvE,aAAa,sDAAsD;AACnE,aAAa,2DAA2D;AACxE,aAAa,wDAAwD;AACrE,aAAa,6DAA6D;AAC1E;AACA,UAAU,4DAA4D;AACtE,UAAU,6DAA6D;AACvE,UAAU,8DAA8D;AACxE,UAAU,6DAA6D;AACvE,UAAU,4DAA4D;AACtE,UAAU,gEAAgE;AAC1E,aAAa,iEAAiE;AAC9E,aAAa,gEAAgE;AAC7E,UAAU,8EAA8E;AACxF,UAAU,0EAA0E;AACpF;AACA,UAAU,wDAAwD;AAClE,UAAU,yDAAyD;AACnE,UAAU,0DAA0D;AACpE,UAAU,yDAAyD;AACnE,UAAU,wDAAwD;AAClE,UAAU,4DAA4D;AACtE,UAAU,6DAA6D;AACvE,UAAU,4DAA4D;AACtE,UAAU,0EAA0E;AACpF,UAAU,sEAAsE;AAChF,UAAU,0CAA0C;AACpD,UAAU,0CAA0C;AACpD,aAAa,yCAAyC;AACtD;AACA,8CAA8C,mCAAmC;AACjF;;AAEA;AACA;AACA;AACA,UAAU,wDAAwD;AAClE,UAAU,yDAAyD;AACnE,aAAa,0DAA0D;AACvE,aAAa,yDAAyD;AACtE,UAAU,0DAA0D;AACpE,UAAU,2DAA2D;AACrE,UAAU,6DAA6D;AACvE,UAAU,0EAA0E;AACpF,UAAU,sEAAsE;AAChF,aAAa,0CAA0C;AACvD,UAAU,0CAA0C;AACpD;AACA,8CAA8C,mCAAmC;AACjF;AACA;;AAEA;AACA;;;;;;;;ACtGA,iBAAiB,mBAAO,CAAC,IAAiB;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA,6DAA6D,oBAAoB;AACjF,8DAA8D,qBAAqB;AACnF,2DAA2D,wDAAwD;AACnH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACnCA,iBAAiB,mBAAO,CAAC,IAAgB;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA,yCAAyC,yDAAyD;AAClG;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,0BAA0B;AAC5C,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;;;;;;;;AC9DA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,yDAAyD,yBAAyB;AAClF;AACA;AACA,iEAAiE,6BAA6B;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,sEAAsE,uBAAuB;AAC7F,6CAA6C,6CAA6C;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACpDA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACNA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,sCAAsC;AACnD,aAAa,mDAAmD;AAChE,aAAa,6DAA6D;AAC1E,aAAa,oDAAoD;AACjE,aAAa,8DAA8D;AAC3E,aAAa,qDAAqD;AAClE,aAAa,+DAA+D;AAC5E,aAAa,oDAAoD;AACjE,aAAa,8DAA8D;AAC3E,aAAa,qDAAqD;AAClE,aAAa,+DAA+D;AAC5E,aAAa,sDAAsD;AACnE,aAAa,gEAAgE;AAC7E,aAAa,wDAAwD;AACrE,aAAa,kEAAkE;AAC/E,aAAa,0CAA0C;AACvD,aAAa,0CAA0C;AACvD;AACA,iDAAiD,uCAAuC;AACxF;AACA;;AAEA;AACA;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA,oBAAoB,iCAAiC;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;ACzHA,oBAAoB,mBAAO,CAAC,GAAkB;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;AC1DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uDAAuD,WAAW;AAClE;AACA;AACA;AACA;AACA,2BAA2B,wBAAwB;AACnD;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,qCAAqC;AAClF;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;AC/FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uDAAuD,WAAW;AAClE;AACA;AACA;AACA;AACA,2BAA2B,wBAAwB;AACnD;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA,uDAAuD,WAAW;AAClE;AACA;AACA;AACA;AACA,2BAA2B,wBAAwB;AACnD;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA,kDAAkD,SAAS,aAAa;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,wBAAwB,QAAQ,SAAS;AACvE;AACA;AACA;AACA,WAAW;AACX,kBAAkB,OAAO;AACzB,SAAS;AACT;AACA;AACA;AACA;AACA,WAAW;AACX,kBAAkB,OAAO;AACzB,SAAS;AACT;AACA;AACA;AACA,qBAAqB,kBAAkB;AACvC,kBAAkB,OAAO;AACzB,SAAS;AACT;AACA;;AAEA;AACA;AACA,kDAAkD,SAAS,aAAa;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,kBAAkB,OAAO;AACzB,SAAS;AACT;AACA;AACA;AACA;AACA,WAAW;AACX,kBAAkB,OAAO;AACzB,SAAS;AACT;AACA;AACA;AACA,qBAAqB,kBAAkB;AACvC,kBAAkB,OAAO;AACzB,SAAS;AACT;AACA;AACA;;AAEA;AACA;;;;;;;;AChIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qCAAqC,6BAA6B;AAClE,qCAAqC,6BAA6B;AAClE;;AAEA,8BAA8B,cAAc;AAC5C;AACA,uDAAuD,WAAW;AAClE;AACA;AACA;AACA;AACA,2BAA2B,wBAAwB;AACnD;AACA;AACA,WAAW;AACX;AACA,SAAS;AACT;AACA;;AAEA,sCAAsC,cAAc;AACpD;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,kBAAkB,mBAAmB;AACrC;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,yCAAyC,yBAAyB;AAClE,QAAQ;AACR;AACA,uCAAuC,YAAY,kBAAkB,sBAAsB;AAC3F;AACA;AACA;;AAEA;AACA;;;;;;;;ACvtLA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACfA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uDAAuD,WAAW;AAClE;AACA;AACA;AACA;AACA,2BAA2B,wBAAwB;AACnD;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,mBAAmB,GAAG,iBAAiB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB,iBAAiB;AACtC,gBAAgB,YAAY;AAC5B,OAAO;AACP;AACA;;AAEA;AACA;;;;;;;;AC9GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;AClPA,uBAAuB,mBAAO,CAAC,IAA2B;AAC1D,qBAAqB,mBAAO,CAAC,IAAyB;AACtD,iBAAiB,mBAAO,CAAC,IAAqB;AAC9C,iBAAiB,mBAAO,CAAC,GAAqB;AAC9C,uBAAuB,mBAAO,CAAC,IAA2B;AAC1D,sBAAsB,mBAAO,CAAC,IAA0B;AACxD,uBAAuB,mBAAO,CAAC,GAA2B;AAC1D,6BAA6B,mBAAO,CAAC,IAAiC;AACtE,+BAA+B,mBAAO,CAAC,IAAmC;AAC1E,oCAAoC,mBAAO,CAAC,IAAwC;AACpF,wBAAwB,mBAAO,CAAC,IAA4B;AAC5D,uBAAuB,mBAAO,CAAC,IAA2B;AAC1D,8BAA8B,mBAAO,CAAC,IAAkC;AACxE,uBAAuB,mBAAO,CAAC,IAA2B;AAC1D,uBAAuB,mBAAO,CAAC,IAA2B;AAC1D,wBAAwB,mBAAO,CAAC,IAA4B;AAC5D,wBAAwB,mBAAO,CAAC,IAA4B;AAC5D,0BAA0B,mBAAO,CAAC,IAA8B;AAChE,iCAAiC,mBAAO,CAAC,IAAqC;AAC9E,kBAAkB,mBAAO,CAAC,IAAsB;AAChD,qBAAqB,mBAAO,CAAC,IAAyB;AACtD,iBAAiB,mBAAO,CAAC,IAAqB;AAC9C,uBAAuB,mBAAO,CAAC,IAA2B;AAC1D,sBAAsB,mBAAO,CAAC,IAA0B;AACxD,uBAAuB,mBAAO,CAAC,IAA2B;AAC1D,iBAAiB,mBAAO,CAAC,GAAqB;AAC9C,iBAAiB,mBAAO,CAAC,IAAqB;AAC9C,qBAAqB,mBAAO,CAAC,IAAyB;AACtD,iBAAiB,mBAAO,CAAC,IAAqB;AAC9C,iBAAiB,mBAAO,CAAC,IAAqB;AAC9C,iBAAiB,mBAAO,CAAC,IAAqB;AAC9C,qBAAqB,mBAAO,CAAC,EAAyB;AACtD,gBAAgB,mBAAO,CAAC,IAAoB;AAC5C,uBAAuB,mBAAO,CAAC,GAA2B;AAC1D,sBAAsB,mBAAO,CAAC,IAA0B;AACxD,0BAA0B,mBAAO,CAAC,IAA8B;AAChE,mBAAmB,mBAAO,CAAC,IAAuB;AAClD,oBAAoB,mBAAO,CAAC,IAAwB;AACpD,yBAAyB,mBAAO,CAAC,GAA6B;;AAE9D;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;AChOA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb,YAAY;AACZ,YAAY;AACZ,cAAc;AACd,cAAc;AACd;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;;;;;;;;ACpDA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;;;;;;;ACjLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,aAAa;AAC/B,SAAS;AACT;AACA;AACA;AACA;AACA,oEAAoE,QAAQ,UAAU,QAAQ;AAC9F;AACA;AACA;AACA,kBAAkB,oBAAoB;AACtC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,cAAc;AAChC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,gBAAgB;AAClC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,6BAA6B;AAC/C,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,oBAAoB;AACtC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,cAAc;AAChC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,mBAAmB;AACrC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,oBAAoB;AACtC,SAAS;AACT;AACA;AACA;AACA,gEAAgE,QAAQ,UAAU,QAAQ;AAC1F;AACA;AACA;AACA;AACA;AACA,kBAAkB,gBAAgB;AAClC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,gBAAgB;AAClC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,gBAAgB;AAClC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,gBAAgB;AAClC;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,mBAAmB;AACrC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,kBAAkB,8BAA8B;AAChD;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,kBAAkB,oBAAoB;AACtC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,kBAAkB,cAAc;AAChC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,kBAAkB,cAAc;AAChC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,kBAAkB,qCAAqC;AACvD,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,kBAAkB,gCAAgC;AAClD,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,kBAAkB,8BAA8B;AAChD,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,kBAAkB,oBAAoB;AACtC,SAAS;AACT;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;;;;;;;;AC9QA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjvKA;AACA,WAAW,mBAAO,CAAC,IAAmB;AACtC,WAAW,mBAAO,CAAC,IAAmB;AACtC;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,wBAAwB;AAChD,WAAW;AACX;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,kBAAkB;AAClC,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA,gBAAgB,0BAA0B;AAC1C,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA,gBAAgB,sBAAsB;AACtC,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA,gBAAgB,mBAAmB;AACnC,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA,gBAAgB,sBAAsB;AACtC,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA,gBAAgB,sBAAsB;AACtC,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA,gBAAgB,wBAAwB;AACxC,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC5EA,iBAAiB,mBAAO,CAAC,IAAoB;;AAE7C;AACA;AACA;AACA;;;;;;;;ACLA,uBAAuB,mBAAO,CAAC,IAA2B;AAC1D,sBAAsB,mBAAO,CAAC,IAA0B;AACxD,wBAAwB,mBAAO,CAAC,IAA4B;AAC5D,0BAA0B,mBAAO,CAAC,IAA8B;AAChE,0BAA0B,mBAAO,CAAC,IAA8B;AAChE,0BAA0B,mBAAO,CAAC,IAA8B;AAChE,0BAA0B,mBAAO,CAAC,GAA8B;AAChE,2BAA2B,mBAAO,CAAC,IAA+B;AAClE,2BAA2B,mBAAO,CAAC,IAA+B;AAClE,8BAA8B,mBAAO,CAAC,GAAkC;AACxE,qBAAqB,mBAAO,CAAC,IAAyB;AACtD,4BAA4B,mBAAO,CAAC,IAAgC;AACpE,yBAAyB,mBAAO,CAAC,GAA6B;AAC9D,wBAAwB,mBAAO,CAAC,IAA4B;AAC5D,+BAA+B,mBAAO,CAAC,IAAmC;AAC1E,4BAA4B,mBAAO,CAAC,IAAgC;AACpE,2BAA2B,mBAAO,CAAC,IAA+B;;AAElE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,4CAA4C;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,sDAAsD,4CAA4C;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA,sDAAsD,4CAA4C;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;;;;;;;;AC3BA;AACA;AACA;AACA;AACA;AACA,sDAAsD,4CAA4C;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA,0DAA0D,4CAA4C;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;;;;;;;;AC3BA;AACA;AACA;AACA;AACA;AACA,0DAA0D,4CAA4C;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA,0DAA0D,4CAA4C;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;;;;;;;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC1BA;AACA;AACA,wBAAwB,mBAAO,CAAC,IAAY;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC9EA;AACA;AACA;AACA,MAAM,mCAAmC;AACzC,MAAM,wCAAwC;AAC9C,MAAM,4CAA4C;AAClD,MAAM,uCAAuC;AAC7C,MAAM,qCAAqC;AAC3C,MAAM,yCAAyC;AAC/C,MAAM,wCAAwC;AAC9C,MAAM,wCAAwC;AAC9C,MAAM,sCAAsC;AAC5C,MAAM,2CAA2C;AACjD,MAAM,uCAAuC;AAC7C,MAAM,uCAAuC;AAC7C;AACA;AACA;AACA;AACA;AACA,6BAA6B,gBAAgB;AAC7C;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,cAAc;AAC/D;AACA,4BAA4B,mEAAmE;AAC/F;AACA;AACA;AACA,4BAA4B,yEAAyE;AACrG;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;;;;;;;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;;;;;;;;ACpGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;;;;;;;;ACpIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;;;;;;;;AC9DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;;;;;;;;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;;;;;;;;ACrBA,aAAa,mBAAO,CAAC,IAAkB;AACvC,kBAAkB,mBAAO,CAAC,IAAuB;AACjD,2BAA2B,mBAAO,CAAC,IAAgC;AACnE,iBAAiB,mBAAO,CAAC,IAAsB;AAC/C,iBAAiB,mBAAO,CAAC,IAAsB;AAC/C,aAAa,mBAAO,CAAC,IAAkB;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;;;;;;;ACvRA;AACA;;AAEA;AACA;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;;;;;;;ACzCA;AACA;AACA;AACA,WAAW,IAAI,GAAG,QAAQ,GAAG;AAC7B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACrBA,iBAAiB,mBAAO,CAAC,IAAU;AACnC;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,yBAAyB,MAAM;AAC/B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,yBAAyB,MAAM;AAC/B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;;;;;;;ACxHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;;;;;;;ACzEA;AACA;AACA;AACA,cAAc,kBAAkB;AAChC;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA,cAAc,qBAAqB;AACnC;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA,cAAc,mBAAmB;AACjC;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA,cAAc,mBAAmB;AACjC;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA,cAAc,2BAA2B;AACzC;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA,cAAc,mBAAmB;AACjC;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA,cAAc,cAAc;AAC5B;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA,cAAc,cAAc;AAC5B;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjFA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE;AACnE;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP,yBAAyB,MAAM;AAC/B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;;;;;;;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,yBAAyB,MAAM;AAC/B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;;;;;;;AC5CA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;;;;;;;ACjBA,aAAa,mBAAO,CAAC,IAAsB;AAC3C,mBAAmB,mBAAO,CAAC,GAA4B;AACvD,kBAAkB,mBAAO,CAAC,IAA2B;AACrD,aAAa,mBAAO,CAAC,IAAsB;AAC3C,aAAa,mBAAO,CAAC,IAAsB;AAC3C,gBAAgB,mBAAO,CAAC,IAAyB;AACjD,iBAAiB,mBAAO,CAAC,IAA0B;AACnD,YAAY,mBAAO,CAAC,IAAqB;AACzC,qBAAqB,mBAAO,CAAC,IAA8B;AAC3D,aAAa,mBAAO,CAAC,IAAsB;AAC3C,iBAAiB,mBAAO,CAAC,IAA0B;AACnD,YAAY,mBAAO,CAAC,IAAqB;AACzC,aAAa,mBAAO,CAAC,IAAsB;AAC3C,WAAW,mBAAO,CAAC,IAAoB;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjCA,eAAe,mBAAO,CAAC,IAAoB;AAC3C,gBAAgB,mBAAO,CAAC,EAAqB;AAC7C,eAAe,mBAAO,CAAC,IAAoB;AAC3C,mBAAmB,mBAAO,CAAC,IAAyB;;AAEpD;AACA;AACA;AACA;;AAEA;AACA,eAAe,mBAAO,CAAC,IAAW;AAClC;AACA,gBAAgB,mBAAO,CAAC,IAAY;AACpC;AACA,iBAAiB,mBAAO,CAAC,IAAa;AACtC;AACA,sBAAsB,mBAAO,CAAC,IAAkB;AAChD;AACA,mBAAmB,mBAAO,CAAC,IAAe;AAC1C;AACA,iBAAiB,mBAAO,CAAC,IAAa;AACtC;AACA,oBAAoB,mBAAO,CAAC,IAAuB;AACnD;AACA,eAAe,mBAAO,CAAC,GAAW;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACxCA;AACA;AACA;AACA,mBAAmB,mBAAO,CAAC,IAAiC;AAC5D;AACA,kBAAkB,mBAAO,CAAC,IAAgC;AAC1D;AACA,sBAAsB,mBAAO,CAAC,IAA0B;AACxD,0BAA0B,mBAAO,CAAC,IAA8B;AAChE,sBAAsB,mBAAO,CAAC,IAA0B;AACxD;AACA,0BAA0B,mBAAO,CAAC,IAA8B;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,eAAe;AACf,aAAa;AACb;AACA;AACA;AACA;AACA,eAAe;AACf,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,sBAAsB,wCAAwC;AAC9D,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,sBAAsB,mCAAmC;AACzD;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,sBAAsB,8BAA8B;AACpD;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,sBAAsB,kBAAkB;AACxC;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,sBAAsB,qCAAqC;AAC3D;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,sBAAsB,sCAAsC;AAC5D;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,yBAAyB,qCAAqC;AAC9D;AACA;AACA;AACA,gBAAgB;AAChB,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe;AACf,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,kBAAkB;AACxC,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,sBAAsB,qCAAqC;AAC3D,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,sBAAsB,sCAAsC;AAC5D,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;;;;;;;;ACjVA;AACA;AACA;AACA,mBAAmB,2BAA2B,yBAAyB;AACvE;AACA;;AAEA;AACA;;;;;;;;ACRA;AACA;AACA;AACA,mBAAmB,iCAAiC,yBAAyB;AAC7E;AACA;;AAEA;AACA;;;;;;;;ACRA;AACA;AACA;AACA,mBAAmB,gCAAgC,yBAAyB;AAC5E;AACA;;AAEA;AACA;;;;;;;;ACRA;AACA;AACA;AACA,mBAAmB,gCAAgC,wBAAwB;AAC3E;AACA;;AAEA;AACA;;;;;;;;ACRA;AACA;AACA;AACA,mBAAmB,mCAAmC,wBAAwB;AAC9E;AACA;;AAEA;AACA;;;;;;;;ACRA;AACA;AACA;AACA,mBAAmB,+BAA+B,wBAAwB;AAC1E;AACA;;AAEA;AACA;;;;;;;;ACRA;AACA;AACA;AACA,mBAAmB,2BAA2B,wBAAwB;AACtE;AACA;;AAEA;AACA;;;;;;;;ACRA;AACA;AACA;AACA,mBAAmB,mCAAmC,wBAAwB;AAC9E;AACA;;AAEA;AACA;;;;;;;;ACRA;AACA;AACA;AACA,mBAAmB,+BAA+B,yBAAyB;AAC3E;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA,mBAAmB,8BAA8B,yBAAyB;AAC1E;AACA;;AAEA;AACA;;;;;;;;ACRA;AACA;AACA;AACA,mBAAmB,mCAAmC,wBAAwB;AAC9E;AACA;;AAEA;AACA;;;;;;;;ACRA;AACA;AACA;AACA,mBAAmB,kCAAkC,yBAAyB;AAC9E;AACA;;AAEA;AACA;;;;;;;;ACRA;AACA;AACA;AACA,mBAAmB,4BAA4B,wBAAwB;AACvE;AACA;;AAEA;AACA;;;;;;;;ACRA;AACA;AACA;AACA,mBAAmB,+BAA+B,yBAAyB;AAC3E;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA,mBAAmB,qCAAqC,wBAAwB;AAChF;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA,mBAAmB,mCAAmC,wBAAwB;AAC9E;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA,mBAAmB,2BAA2B,wBAAwB;AACtE;AACA;;AAEA;AACA;;;;;;;;ACRA;AACA;AACA;AACA,mBAAmB,8BAA8B,wBAAwB;AACzE;AACA;;AAEA;AACA;;;;;;;;ACRA;AACA;AACA;AACA,mBAAmB,iCAAiC,wBAAwB;AAC5E;AACA;;AAEA;AACA;;;;;;;;ACRA;AACA;AACA;AACA,mBAAmB,8BAA8B,wBAAwB;AACzE;;AAEA,sBAAsB,mBAAmB;AACzC;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;;;;;;;AChBA;AACA;AACA;AACA,mBAAmB,gCAAgC,wBAAwB;AAC3E;AACA;;AAEA;AACA;;;;;;;;ACRA;AACA;AACA;AACA,mBAAmB,mCAAmC,wBAAwB;AAC9E;AACA;;AAEA;AACA;;;;;;;;ACRA;AACA;AACA;AACA,mBAAmB,0BAA0B,yBAAyB;AACtE;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA,mBAAmB,6BAA6B,wBAAwB;AACxE;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA,mBAAmB,2BAA2B,yBAAyB;AACvE;AACA;;AAEA;AACA;;;;;;;;ACRA;AACA;AACA;AACA,mBAAmB,gCAAgC,wBAAwB;AAC3E;AACA;;AAEA;AACA;;;;;;;;ACRA;AACA;AACA;AACA,mBAAmB,+BAA+B,wBAAwB;AAC1E;AACA;;AAEA;AACA;;;;;;;;ACRA,aAAa,mBAAO,CAAC,IAAiB;AACtC,mBAAmB,mBAAO,CAAC,IAAuB;AAClD,kBAAkB,mBAAO,CAAC,IAAsB;AAChD,aAAa,mBAAO,CAAC,IAAiB;AACtC,qBAAqB,mBAAO,CAAC,IAAyB;AACtD,aAAa,mBAAO,CAAC,IAAiB;AACtC,gBAAgB,mBAAO,CAAC,IAAoB;AAC5C,mBAAmB,mBAAO,CAAC,IAAuB;AAClD,gBAAgB,mBAAO,CAAC,IAAoB;AAC5C,kBAAkB,mBAAO,CAAC,IAAsB;AAChD,qBAAqB,mBAAO,CAAC,IAAyB;AACtD,aAAa,mBAAO,CAAC,IAAiB;AACtC,kBAAkB,mBAAO,CAAC,IAAsB;AAChD,iBAAiB,mBAAO,CAAC,IAAqB;AAC9C,cAAc,mBAAO,CAAC,EAAkB;AACxC,kBAAkB,mBAAO,CAAC,IAAsB;AAChD,qBAAqB,mBAAO,CAAC,IAAyB;AACtD,iBAAiB,mBAAO,CAAC,IAAqB;AAC9C,gBAAgB,mBAAO,CAAC,IAAoB;AAC5C,oBAAoB,mBAAO,CAAC,IAAwB;AACpD,qBAAqB,mBAAO,CAAC,IAAyB;AACtD,iBAAiB,mBAAO,CAAC,IAAqB;AAC9C,YAAY,mBAAO,CAAC,IAAgB;AACpC,eAAe,mBAAO,CAAC,IAAmB;AAC1C,iBAAiB,mBAAO,CAAC,IAAqB;AAC9C,uBAAuB,mBAAO,CAAC,IAA2B;AAC1D,qBAAqB,mBAAO,CAAC,IAAyB;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC3DA;AACA;AACA;AACA,MAAM,0DAA0D;AAChE,MAAM,0DAA0D;AAChE,MAAM,gEAAgE;AACtE,MAAM,8DAA8D;AACpE,MAAM,0DAA0D;AAChE,MAAM,gEAAgE,QAAQ,mBAAmB;AACjG,MAAM,yDAAyD;AAC/D;AACA,MAAM,iEAAiE;AACvE,MAAM,gEAAgE;AACtE,MAAM,kEAAkE;AACxE;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS,kCAAkC;AACzD,KAAK;AACL,MAAM,oEAAoE,SAAS,kCAAkC;AACrH,MAAM,+DAA+D,SAAS,kCAAkC;AAChH,MAAM,yDAAyD;AAC/D,MAAM,wDAAwD;AAC9D;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS,iDAAiD;AACxE,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS,iCAAiC;AACxD,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS,iDAAiD;AACxE,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS,iDAAiD;AACxE,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS,kCAAkC;AACzD,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS,iCAAiC;AACxD,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS,kCAAkC;AACzD,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS,mCAAmC;AAC1D,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS,sCAAsC;AAC7D,KAAK;AACL;AACA;AACA;AACA;AACA,cAAc,SAAS,sCAAsC;AAC7D,KAAK;AACL;AACA;AACA;AACA;AACA,cAAc,SAAS,sCAAsC;AAC7D,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B,iBAAiB,8BAA8B;AAC/C,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA,cAAc,SAAS,iDAAiD;AACxE,KAAK;AACL,MAAM,wDAAwD;AAC9D;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B,iBAAiB,8BAA8B;AAC/C,OAAO;AACP,KAAK;AACL,MAAM,0DAA0D;AAChE,MAAM,8DAA8D;AACpE,MAAM,yDAAyD;AAC/D,MAAM,4DAA4D;AAClE,MAAM,mEAAmE;AACzE;AACA,MAAM,4DAA4D;AAClE;AACA;AACA;AACA;AACA,cAAc,SAAS,iDAAiD;AACxE,KAAK;AACL;AACA;AACA;AACA;AACA,cAAc,SAAS,iDAAiD;AACxE,KAAK;AACL;AACA;AACA;AACA;AACA,cAAc,SAAS,iDAAiD;AACxE,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B,iBAAiB,+CAA+C;AAChE,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B,iBAAiB,+CAA+C;AAChE,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B,iBAAiB,+CAA+C;AAChE,OAAO;AACP,KAAK;AACL;AACA,MAAM,4DAA4D;AAClE,MAAM,4DAA4D;AAClE;AACA,MAAM,iEAAiE;AACvE,MAAM,+DAA+D;AACrE,MAAM,gEAAgE;AACtE;AACA;AACA;AACA;AACA,cAAc,SAAS,qCAAqC;AAC5D,KAAK;AACL;AACA;AACA;AACA;AACA,cAAc,SAAS,qCAAqC;AAC5D,KAAK;AACL;AACA;AACA;AACA;AACA,cAAc,SAAS,qCAAqC;AAC5D,KAAK;AACL;AACA,MAAM,4EAA4E;AAClF,MAAM,6EAA6E;AACnF,MAAM,sEAAsE;AAC5E,MAAM,4EAA4E;AAClF,MAAM,wEAAwE;AAC9E;AACA,MAAM,+DAA+D,QAAQ,mBAAmB;AAChG,MAAM,gEAAgE,QAAQ,gBAAgB;AAC9F;AACA;AACA;AACA;AACA;AACA,gBAAgB,cAAc;AAC9B,iBAAiB,sBAAsB;AACvC,OAAO;AACP,KAAK;AACL;AACA,MAAM,+BAA+B;AACrC;AACA,MAAM,uDAAuD;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ,iBAAiB;AACvC,KAAK;AACL,MAAM,iEAAiE;AACvE;AACA,MAAM,uEAAuE;AAC7E,MAAM,uEAAuE;AAC7E,MAAM,0EAA0E;AAChF;AACA,MAAM,gEAAgE;AACtE,MAAM,mEAAmE;AACzE;AACA;AACA;AACA;AACA,cAAc,SAAS,4DAA4D;AACnF,KAAK;AACL;AACA;AACA;AACA;AACA,cAAc,SAAS,4DAA4D;AACnF,KAAK;AACL;AACA;AACA;AACA;AACA,cAAc,SAAS,4DAA4D;AACnF,KAAK;AACL;AACA;AACA;AACA;AACA,cAAc,SAAS,4DAA4D;AACnF,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,yCAAyC;AAC7D,iBAAiB,0DAA0D;AAC3E,OAAO;AACP,KAAK;AACL,MAAM,+DAA+D;AACrE,MAAM,sEAAsE;AAC5E,MAAM,4EAA4E;AAClF;AACA,MAAM,qDAAqD;AAC3D;AACA;AACA;AACA;AACA,cAAc,SAAS,4DAA4D;AACnF,KAAK;AACL;AACA;AACA;AACA;AACA,cAAc,SAAS,4DAA4D;AACnF,KAAK;AACL;AACA;AACA;AACA;AACA,cAAc,SAAS,4DAA4D;AACnF,KAAK;AACL;AACA,MAAM,0EAA0E;AAChF,MAAM,0EAA0E;AAChF,MAAM,uEAAuE;AAC7E,MAAM,yEAAyE;AAC/E,MAAM,0EAA0E;AAChF,MAAM,0EAA0E;AAChF,MAAM,yEAAyE;AAC/E,MAAM,4EAA4E;AAClF,MAAM,uEAAuE;AAC7E;AACA;AACA;;;;;;;;ACxTA;AACA;AACA,2BAA2B,iBAAiB;AAC5C,uDAAuD,iBAAiB;AACxE;;AAEA,0BAA0B,iBAAiB;AAC3C,sDAAsD,iBAAiB;AACvE;;AAEA,4BAA4B,iBAAiB;AAC7C,wDAAwD,iBAAiB;AACzE;;AAEA,mBAAmB,6CAA6C;AAChE,+CAA+C,6CAA6C;AAC5F;;AAEA,sBAAsB,WAAW;AACjC,oEAAoE,oBAAoB;AACxF;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,oBAAoB;AACrC,6CAA6C,oBAAoB;AACjE;;AAEA,mBAAmB,0BAA0B;AAC7C,+CAA+C,0BAA0B;AACzE;;AAEA,kBAAkB,0BAA0B;AAC5C,8CAA8C,0BAA0B;AACxE;;AAEA,kBAAkB,0BAA0B;AAC5C,8CAA8C,0BAA0B;AACxE;;AAEA,sBAAsB,WAAW;AACjC,kDAAkD,WAAW;AAC7D;;AAEA,mBAAmB,oBAAoB;AACvC,+CAA+C,oBAAoB;AACnE;;AAEA,mBAAmB,WAAW;AAC9B,+CAA+C,WAAW;AAC1D;;AAEA,uBAAuB,YAAY;AACnC,mDAAmD,YAAY;AAC/D;;AAEA,kBAAkB,WAAW;AAC7B,8CAA8C,WAAW;AACzD;;AAEA,mBAAmB,WAAW;AAC9B,+CAA+C,WAAW;AAC1D;;AAEA,oBAAoB,WAAW;AAC/B,gDAAgD,WAAW;AAC3D;;AAEA,uBAAuB,kCAAkC;AACzD,mDAAmD,kCAAkC;AACrF;;AAEA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,gCAAgC;AAChF,SAAS;AACT,iBAAiB;AACjB;AACA;AACA,4CAA4C,gCAAgC;AAC5E;;AAEA,iBAAiB,iBAAiB;AAClC,6CAA6C,iBAAiB;AAC9D;;AAEA,sBAAsB,iBAAiB;AACvC,kDAAkD,iBAAiB;AACnE;;AAEA,kBAAkB,eAAe;AACjC,8CAA8C,eAAe;AAC7D;;AAEA,mBAAmB,iBAAiB;AACpC,+CAA+C,iBAAiB;AAChE;;AAEA,oBAAoB,kBAAkB;AACtC,gDAAgD,kBAAkB;AAClE;;AAEA,wBAAwB,wBAAwB;AAChD,oDAAoD,wBAAwB;AAC5E;;AAEA,6BAA6B,qCAAqC;AAClE,yDAAyD,QAAQ,gBAAgB,kCAAkC;AACnH;;AAEA,mBAAmB,mBAAmB;AACtC,+CAA+C,mBAAmB;AAClE;;AAEA,sBAAsB,WAAW;AACjC,kDAAkD,WAAW;AAC7D;AACA;;AAEA;AACA;;;;;;;;ACvIA;AACA;;AAEA;AACA;;;;;;;;ACJA;AACA;AACA,4BAA4B,WAAW;AACvC,6DAA6D,WAAW;AACxE;;AAEA,6BAA6B,iBAAiB;AAC9C,yDAAyD,iBAAiB;AAC1E;;AAEA,sBAAsB,WAAW;AACjC;AACA;;AAEA,4BAA4B,MAAM;AAClC,6DAA6D,MAAM;AACnE;;AAEA,wBAAwB,iBAAiB;AACzC,yDAAyD,iBAAiB;AAC1E;AACA;;AAEA;AACA;;;;;;;;ACxBA;AACA;;AAEA;AACA;;;;;;;;ACJA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;AC5BA;AACA;AACA,kBAAkB,8FAA8F;AAChH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA,qBAAqB,8FAA8F;AACnH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA,iBAAiB,gFAAgF;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA,gBAAgB,iBAAiB;AACjC,gDAAgD,iBAAiB;AACjE;;AAEA,mBAAmB,YAAY;AAC/B,mDAAmD,YAAY;AAC/D;;AAEA,iBAAiB,8BAA8B;AAC/C,iDAAiD,8BAA8B;AAC/E;;AAEA,iBAAiB,uBAAuB;AACxC,gDAAgD,uBAAuB;AACvE;;AAEA,iBAAiB,kBAAkB;AACnC,iDAAiD,kBAAkB;AACnE;;AAEA,wBAAwB,uBAAuB;AAC/C,wDAAwD,uBAAuB;AAC/E;;AAEA,8BAA8B,4DAA4D;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;;;;;;;;AC5EA,iBAAiB,mBAAO,CAAC,IAAU;AACnC;;AAEA;AACA;AACA,iBAAiB,oBAAoB;AACrC,6CAA6C,cAAc;AAC3D;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ,EAAE,SAAS,EAAE,OAAO;AACvC;AACA;AACA;;AAEA,kBAAkB,oBAAoB;AACtC,6CAA6C,cAAc;AAC3D;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;;AAEA,qBAAqB,cAAc;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,kBAAkB,WAAW,QAAQ;AACtD;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,iBAAiB;AAClC;AACA,qCAAqC,iBAAiB;AACtD;AACA,oCAAoC,iBAAiB;AACrD;;AAEA,sBAAsB,aAAa,oBAAoB,QAAQ;AAC/D;AACA,0DAA0D,eAAe;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB,aAAa,kBAAkB,QAAQ;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,aAAa;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,yCAAyC,aAAa,YAAY,QAAQ;AAC1E;AACA,4BAA4B,wEAAwE;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,aAAa,WAAW,QAAQ;AACnD;AACA,sDAAsD,eAAe;AACrE;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,iDAAiD,WAAW;AAC5D;AACA,4CAA4C,eAAe;AAC3D;AACA,yCAAyC,aAAa,aAAa,QAAQ;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB,aAAa,kBAAkB,QAAQ;AACzD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,sDAAsD,eAAe;AACrE;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB,qDAAqD;AAC1E;AACA;AACA,mDAAmD,YAAY;AAC/D;AACA;AACA,iDAAiD,yCAAyC;AAC1F,qCAAqC;AACrC;AACA;AACA;AACA,iDAAiD,oCAAoC;AACrF,mCAAmC;AACnC;AACA;AACA,6DAA6D,OAAO,aAAa,UAAU;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;;AAEA,0BAA0B,uBAAuB;AACjD,kDAAkD,YAAY;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,sCAAsC;AACzD;AACA;AACA,gBAAgB;;AAEhB,MAAM,cAAc;;AAEpB,EAAE,KAAK;AACP,EAAE;AACF,EAAE;;AAEF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,2BAA2B,8CAA8C;AACzE,8CAA8C,sCAAsC;AACpF;AACA,gBAAgB,QAAQ;AACxB;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;AC7UA;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA;;AAEA,mBAAmB,oBAAoB;AACvC;AACA;;AAEA,gBAAgB,kBAAkB;AAClC;AACA;;AAEA,kBAAkB,kBAAkB;AACpC;AACA;;AAEA,mBAAmB,0BAA0B;AAC7C;AACA;;AAEA,mBAAmB,kBAAkB;AACrC;AACA;;AAEA,kBAAkB,aAAa;AAC/B;AACA;;AAEA,qBAAqB,aAAa;AAClC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACvCA,iBAAiB,mBAAO,CAAC,IAAU;AACnC;;AAEA;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;;AAEA;AACA;;;;;;;;ACvBA;AACA;AACA,iBAAiB,cAAc;AAC/B,wCAAwC,OAAO,GAAG,QAAQ;AAC1D;AACA;;AAEA,iBAAiB,oBAAoB;AACrC,wCAAwC,OAAO,GAAG,QAAQ;AAC1D;AACA;;AAEA,oBAAoB,0BAA0B;AAC9C,6CAA6C,cAAc;AAC3D,+CAA+C,oBAAoB,IAAI,cAAc;AACrF,wBAAwB,oBAAoB;AAC5C;AACA;;AAEA;AACA;;;;;;;;ACpBA;AACA;AACA,mBAAmB,0BAA0B;AAC7C,mDAAmD,0BAA0B;AAC7E;;AAEA,iBAAiB,8BAA8B;AAC/C,4DAA4D,8BAA8B;AAC1F;;AAEA,kBAAkB,sBAAsB;AACxC,kDAAkD,sBAAsB;AACxE;;AAEA,0BAA0B,WAAW;AACrC,0DAA0D,WAAW;AACrE;;AAEA,+BAA+B,iBAAiB;AAChD;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA,4BAA4B,iBAAiB;AAC7C;AACA,uDAAuD,kCAAkC;AACzF;AACA;AACA;;AAEA;AACA;;;;;;;;AClCA;AACA;AACA,iBAAiB,oBAAoB;AACrC,4CAA4C,oBAAoB;AAChE;;AAEA,gBAAgB,iBAAiB;AACjC,2CAA2C,iBAAiB;AAC5D;;AAEA,mBAAmB,OAAO;AAC1B,8CAA8C,OAAO;AACrD;;AAEA,iBAAiB,aAAa;AAC9B,4CAA4C,aAAa;AACzD;AACA;;AAEA;AACA;;;;;;;;ACpBA;AACA;AACA,sBAAsB,MAAM;AAC5B,kDAAkD,MAAM;AACxD;;AAEA,sBAAsB,cAAc;AACpC,kDAAkD,cAAc;AAChE;AACA;;AAEA;AACA;;;;;;;;ACZA,iBAAiB,mBAAO,CAAC,IAAU;AACnC;;AAEA;AACA;AACA,0BAA0B,QAAQ;AAClC;AACA;AACA;AACA;AACA;;AAEA,2BAA2B,SAAS;AACpC;AACA;AACA;AACA;AACA;AACA,2CAA2C,QAAQ;AACnD,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,2CAA2C,iBAAiB;AAC5D;AACA;;AAEA;AACA;;;;;;;;AChCA,aAAa,mBAAO,CAAC,IAAmB;AACxC,aAAa,mBAAO,CAAC,IAAmB;AACxC,aAAa,mBAAO,CAAC,IAAmB;AACxC,kBAAkB,mBAAO,CAAC,IAAwB;AAClD,mBAAmB,mBAAO,CAAC,IAAyB;AACpD,aAAa,mBAAO,CAAC,IAAmB;AACxC,iBAAiB,mBAAO,CAAC,IAAuB;AAChD,gBAAgB,mBAAO,CAAC,IAAsB;AAC9C,YAAY,mBAAO,CAAC,IAAkB;AACtC,qBAAqB,mBAAO,CAAC,IAA2B;AACxD,iBAAiB,mBAAO,CAAC,IAAuB;AAChD,YAAY,mBAAO,CAAC,IAAkB;AACtC,aAAa,mBAAO,CAAC,IAAmB;AACxC,WAAW,mBAAO,CAAC,IAAiB;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACjCA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCzBA;WACA;WACA;WACA;WACA;;;;;UEJA;UACA;UACA;UACA","sources":["webpack://egg-born-module-a-base-sync/./backend/src/aop/category.js","webpack://egg-born-module-a-base-sync/./backend/src/aop/local.js","webpack://egg-born-module-a-base-sync/./backend/src/aops.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/atom.resource.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/atom.role.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/atom.user.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/bean.areaScope.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/bean.atom.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/bean.atom/bean.atom_0.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/bean.atom/bean.atom_1.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/bean.atom/bean.atom_areaScope.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/bean.atom/bean.atom_checkRightAction.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/bean.atom/bean.atom_draft.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/bean.atom/bean.atom_formal.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/bean.atom/bean.atom_right.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/bean.atom/bean.atom_simple.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/bean.atom/bean.atom_starLabel.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/bean.atom/bean.atom_submit.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/bean.atomAction.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/bean.atomAction/bean.atomAction_base.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/bean.atomAction/bean.atomAction_flow.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/bean.atomBase.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/bean.atomBase/bean.atomBase_0.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/bean.atomBase/bean.atomBase_1.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/bean.atomBase/bean.atomBase_read.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/bean.atomBase/bean.atomBase_write.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/bean.atomClass.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/bean.atomStatic.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/bean.auth.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/bean.base.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/bean.bodyCrypto.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/bean.category.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/bean.local.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/bean.resource.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/bean.role.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/bean.role/bean.role_atomRights.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/bean.role/bean.role_base.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/bean.role/bean.role_build.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/bean.role/bean.role_flow.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/bean.role/bean.role_includes.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/bean.role/bean.role_others.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/bean.role/bean.role_resourceRights.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/bean.role/bean.role_users.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/bean.tag.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/bean.user.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/bean.user/bean.user_0.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/bean.user/bean.user_1.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/bean.util.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/local.procedure.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/local.procedure/local.procedure_atom.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/local.procedure/local.procedure_atomRight.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/local.procedure/local.procedure_atomRight_checkRightAction.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/local.procedure/local.procedure_atomRight_checkRightActionBulk.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/local.procedure/local.procedure_atomRight_checkRightCreateRole.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/local.procedure/local.procedure_atomRight_checkRightRead.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/local.procedure/local.procedure_atomRight_checkRoleRightRead.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/local.procedure/local.procedure_atom_0.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/local.procedure/local.procedure_atom_draft.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/local.procedure/local.procedure_atom_formal.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/local.procedure/local.procedure_atom_getAtom.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/local.procedure/local.procedure_resource.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/middleware.auth.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/middleware.connectionAuth.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/middleware.cors.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/middleware.httpLog.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/middleware.inner.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/middleware.jsonp.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/middleware.right.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/middleware.test.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/middleware.transaction.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/queue.roleBuild.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/queue.schedule.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/startup.checkResourceLocales.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/startup.loadAtomStatics.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/startup.loadSchedules.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/stats.draftsCommon.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/stats.labels.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/stats.stars.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/stats.starsLabels.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/version.manager.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/version/init14.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/version/init15.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/version/init2.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/version/init4.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/version/init5.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/version/init7.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/version/init8.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/version/init9.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/version/initData15.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/version/initData2.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/version/update1.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/version/update10.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/version/update11.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/version/update12.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/version/update13.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/version/update14.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/version/update16.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/version/update17.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/version/update18.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/version/update19.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/version/update1Data.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/version/update2.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/version/update20.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/version/update21.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/version/update3.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/version/update4.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/version/update6.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/version/update8.js","webpack://egg-born-module-a-base-sync/./backend/src/bean/version/update9.js","webpack://egg-born-module-a-base-sync/./backend/src/beans.js","webpack://egg-born-module-a-base-sync/./backend/src/common/utils.js","webpack://egg-born-module-a-base-sync/./backend/src/config/config.js","webpack://egg-born-module-a-base-sync/./backend/src/config/constants.js","webpack://egg-born-module-a-base-sync/./backend/src/config/errors.js","webpack://egg-born-module-a-base-sync/./backend/src/config/locale/en-us.js","webpack://egg-born-module-a-base-sync/./backend/src/config/locale/zh-cn.js","webpack://egg-born-module-a-base-sync/./backend/src/config/locales.js","webpack://egg-born-module-a-base-sync/./backend/src/config/socketio/comment.js","webpack://egg-born-module-a-base-sync/./backend/src/config/static/dict/roleType.js","webpack://egg-born-module-a-base-sync/./backend/src/config/static/dicts.js","webpack://egg-born-module-a-base-sync/./backend/src/config/static/mines.js","webpack://egg-born-module-a-base-sync/./backend/src/config/static/mines/mineAppearanceLanguage.js","webpack://egg-born-module-a-base-sync/./backend/src/config/static/mines/mineAppearanceTheme.js","webpack://egg-born-module-a-base-sync/./backend/src/config/static/mines/mineAppearanceView.js","webpack://egg-born-module-a-base-sync/./backend/src/config/static/mines/mineAtomDrafts.js","webpack://egg-born-module-a-base-sync/./backend/src/config/static/mines/mineAtomFormals.js","webpack://egg-born-module-a-base-sync/./backend/src/config/static/mines/mineAtomStars.js","webpack://egg-born-module-a-base-sync/./backend/src/config/static/mines/mineFlowEnds.js","webpack://egg-born-module-a-base-sync/./backend/src/config/static/mines/mineFlowInitiateds.js","webpack://egg-born-module-a-base-sync/./backend/src/config/static/mines/mineFlowParticipateds.js","webpack://egg-born-module-a-base-sync/./backend/src/config/static/mines/mineMineAttachments.js","webpack://egg-born-module-a-base-sync/./backend/src/config/static/mines/mineMineComments.js","webpack://egg-born-module-a-base-sync/./backend/src/config/static/mines/mineMineExports.js","webpack://egg-born-module-a-base-sync/./backend/src/config/static/mines/mineTaskClaimings.js","webpack://egg-born-module-a-base-sync/./backend/src/config/static/mines/mineTaskCompleteds.js","webpack://egg-born-module-a-base-sync/./backend/src/config/static/mines/mineTaskHandlings.js","webpack://egg-born-module-a-base-sync/./backend/src/config/static/mines/mineWorkFlowFlows.js","webpack://egg-born-module-a-base-sync/./backend/src/config/static/mines/mineWorkFlowTasks.js","webpack://egg-born-module-a-base-sync/./backend/src/config/static/resources.js","webpack://egg-born-module-a-base-sync/./backend/src/config/static/roles.js","webpack://egg-born-module-a-base-sync/./backend/src/config/validation/keywords.js","webpack://egg-born-module-a-base-sync/./backend/src/config/validation/schema/category.js","webpack://egg-born-module-a-base-sync/./backend/src/config/validation/schema/resource.js","webpack://egg-born-module-a-base-sync/./backend/src/config/validation/schema/role.js","webpack://egg-born-module-a-base-sync/./backend/src/config/validation/schema/user.js","webpack://egg-born-module-a-base-sync/./backend/src/config/validation/schema/userAdmin.js","webpack://egg-born-module-a-base-sync/./backend/src/config/validation/schema/userChangeUserName.js","webpack://egg-born-module-a-base-sync/./backend/src/config/validation/schemas.js","webpack://egg-born-module-a-base-sync/./backend/src/controller/atom.js","webpack://egg-born-module-a-base-sync/./backend/src/controller/atomAction.js","webpack://egg-born-module-a-base-sync/./backend/src/controller/atomClass.js","webpack://egg-born-module-a-base-sync/./backend/src/controller/auth.js","webpack://egg-born-module-a-base-sync/./backend/src/controller/base.js","webpack://egg-born-module-a-base-sync/./backend/src/controller/category.js","webpack://egg-born-module-a-base-sync/./backend/src/controller/comment.js","webpack://egg-born-module-a-base-sync/./backend/src/controller/db.js","webpack://egg-born-module-a-base-sync/./backend/src/controller/jwt.js","webpack://egg-born-module-a-base-sync/./backend/src/controller/layoutConfig.js","webpack://egg-born-module-a-base-sync/./backend/src/controller/resource.js","webpack://egg-born-module-a-base-sync/./backend/src/controller/tag.js","webpack://egg-born-module-a-base-sync/./backend/src/controller/user.js","webpack://egg-born-module-a-base-sync/./backend/src/controller/util.js","webpack://egg-born-module-a-base-sync/./backend/src/controllers.js","webpack://egg-born-module-a-base-sync/./backend/src/main.js","webpack://egg-born-module-a-base-sync/./backend/src/meta.js","webpack://egg-born-module-a-base-sync/./backend/src/model/atom.js","webpack://egg-born-module-a-base-sync/./backend/src/model/atomAction.js","webpack://egg-born-module-a-base-sync/./backend/src/model/atomClass.js","webpack://egg-born-module-a-base-sync/./backend/src/model/atomLabel.js","webpack://egg-born-module-a-base-sync/./backend/src/model/atomLabelRef.js","webpack://egg-born-module-a-base-sync/./backend/src/model/atomStar.js","webpack://egg-born-module-a-base-sync/./backend/src/model/auth.js","webpack://egg-born-module-a-base-sync/./backend/src/model/authProvider.js","webpack://egg-born-module-a-base-sync/./backend/src/model/category.js","webpack://egg-born-module-a-base-sync/./backend/src/model/comment.js","webpack://egg-born-module-a-base-sync/./backend/src/model/commentHeart.js","webpack://egg-born-module-a-base-sync/./backend/src/model/commentView.js","webpack://egg-born-module-a-base-sync/./backend/src/model/label.js","webpack://egg-born-module-a-base-sync/./backend/src/model/resource.js","webpack://egg-born-module-a-base-sync/./backend/src/model/resourceLocale.js","webpack://egg-born-module-a-base-sync/./backend/src/model/resourceRole.js","webpack://egg-born-module-a-base-sync/./backend/src/model/role.js","webpack://egg-born-module-a-base-sync/./backend/src/model/roleInc.js","webpack://egg-born-module-a-base-sync/./backend/src/model/roleIncRef.js","webpack://egg-born-module-a-base-sync/./backend/src/model/roleRef.js","webpack://egg-born-module-a-base-sync/./backend/src/model/roleRight.js","webpack://egg-born-module-a-base-sync/./backend/src/model/roleRightRef.js","webpack://egg-born-module-a-base-sync/./backend/src/model/tag.js","webpack://egg-born-module-a-base-sync/./backend/src/model/tagRef.js","webpack://egg-born-module-a-base-sync/./backend/src/model/user.js","webpack://egg-born-module-a-base-sync/./backend/src/model/userAgent.js","webpack://egg-born-module-a-base-sync/./backend/src/model/userRole.js","webpack://egg-born-module-a-base-sync/./backend/src/models.js","webpack://egg-born-module-a-base-sync/./backend/src/routes.js","webpack://egg-born-module-a-base-sync/./backend/src/service/atom.js","webpack://egg-born-module-a-base-sync/./backend/src/service/atomAction.js","webpack://egg-born-module-a-base-sync/./backend/src/service/atomClass.js","webpack://egg-born-module-a-base-sync/./backend/src/service/auth.js","webpack://egg-born-module-a-base-sync/./backend/src/service/base.js","webpack://egg-born-module-a-base-sync/./backend/src/service/category.js","webpack://egg-born-module-a-base-sync/./backend/src/service/comment.js","webpack://egg-born-module-a-base-sync/./backend/src/service/db.js","webpack://egg-born-module-a-base-sync/./backend/src/service/jwt.js","webpack://egg-born-module-a-base-sync/./backend/src/service/layoutConfig.js","webpack://egg-born-module-a-base-sync/./backend/src/service/resource.js","webpack://egg-born-module-a-base-sync/./backend/src/service/tag.js","webpack://egg-born-module-a-base-sync/./backend/src/service/user.js","webpack://egg-born-module-a-base-sync/./backend/src/service/util.js","webpack://egg-born-module-a-base-sync/./backend/src/services.js","webpack://egg-born-module-a-base-sync/external commonjs2 \"require3\"","webpack://egg-born-module-a-base-sync/external node-commonjs \"os\"","webpack://egg-born-module-a-base-sync/external node-commonjs \"path\"","webpack://egg-born-module-a-base-sync/external node-commonjs \"url\"","webpack://egg-born-module-a-base-sync/webpack/bootstrap","webpack://egg-born-module-a-base-sync/webpack/runtime/node module decorator","webpack://egg-born-module-a-base-sync/webpack/before-startup","webpack://egg-born-module-a-base-sync/webpack/startup","webpack://egg-born-module-a-base-sync/webpack/after-startup"],"sourcesContent":["module.exports = ctx => {\n  // const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  const __atomClassApp = {\n    module: 'a-app',\n    atomClassName: 'app',\n  };\n  class localAop {\n    async children(context, next) {\n      // next\n      await next();\n      // check atomClass\n      const params = context.arguments[0];\n      const categoryIdParent = params.categoryId;\n      const atomClass = params.atomClass;\n      if (!atomClass) return;\n      // check if resource\n      const atomClassBase = await ctx.bean.atomClass.atomClass(atomClass);\n      if (!atomClassBase.resource) return;\n\n      // locale\n      const list = context.result;\n      if (list.length === 0) return;\n      // resourceType\n      let res = this._checkResourceType({ list, categoryIdParent, atomClass });\n      if (res) return;\n      // appKey\n      res = await this._checkAppKey({ list, categoryIdParent, atomClass });\n      if (res) return;\n      // general\n      this._checkGeneral({ list });\n    }\n\n    _checkGeneral({ list }) {\n      for (const item of list) {\n        item.categoryNameLocale = ctx.text(item.categoryName);\n      }\n      return true;\n    }\n\n    _checkResourceType({ list, categoryIdParent, atomClass }) {\n      if (atomClass.module !== 'a-base' || atomClass.atomClassName !== 'resource') return false;\n      if (categoryIdParent !== 0) return false;\n      // resourceTypes for a-base:resource\n      const resourceTypes = ctx.bean.base.resourceTypes();\n      for (const item of list) {\n        // resource type\n        const resourceType = resourceTypes[item.categoryName];\n        if (resourceType) {\n          item.categoryNameLocale = resourceType.titleLocale;\n        }\n      }\n      return true;\n    }\n\n    async _checkAppKey({ list, categoryIdParent, atomClass }) {\n      if (atomClass.module !== 'a-base' || atomClass.atomClassName !== 'resource') return false;\n      if (categoryIdParent === 0) return false;\n      // categoryIdParent\n      const categoryParent = await ctx.bean.category.get({ categoryId: categoryIdParent });\n      if (!categoryParent) return false;\n      if (!['a-base:menu', 'a-base:mine'].includes(categoryParent.categoryName)) return false;\n      const appKeys = list.map(item => item.categoryName);\n      const apps = await ctx.bean.resource.select({\n        atomClass: __atomClassApp,\n        options: {\n          where: {\n            atomStaticKey: appKeys,\n          },\n        },\n      });\n      for (const item of list) {\n        const app = apps.find(_item => _item.atomStaticKey === item.categoryName);\n        if (app) {\n          item.categoryNameLocale = `(${ctx.text('App')})${app.atomNameLocale}`;\n        }\n      }\n      return true;\n    }\n  }\n\n  return localAop;\n};\n","module.exports = ctx => {\n  class localAop {\n    // magic\n    get__magic__(context, next) {\n      next();\n      const prop = context.prop;\n      const moduleName = context.target.moduleName;\n      if (context.value === undefined) {\n        context.value = ctx.bean._getBean(moduleName, `local.${prop}`);\n      }\n    }\n  }\n\n  return localAop;\n};\n","const category = require('./aop/category.js');\nconst local = require('./aop/local.js');\n\nmodule.exports = app => {\n  const aops = {};\n  Object.assign(aops, {\n    category: {\n      match: 'category',\n      mode: 'ctx',\n      bean: category,\n    },\n    local: {\n      match: 'local',\n      mode: 'ctx',\n      bean: local,\n    },\n  });\n  return aops;\n};\n","module.exports = app => {\n  class Atom extends app.meta.AtomBase {\n    async create({ atomClass, item, options, user }) {\n      // super\n      const key = await super.create({ atomClass, item, options, user });\n      // add resource\n      const res = await this.ctx.model.resource.insert({\n        atomId: key.atomId,\n      });\n      const itemId = res.insertId;\n      return { atomId: key.atomId, itemId };\n    }\n\n    async read({ atomClass, options, key, user }) {\n      // super\n      const item = await super.read({ atomClass, options, key, user });\n      if (!item) return null;\n      // meta\n      this._getMeta(options, item, true);\n      // ok\n      return item;\n    }\n\n    async select({ atomClass, options, items, user }) {\n      // super\n      await super.select({ atomClass, options, items, user });\n      // meta\n      const showSorting = !!(options && options.category);\n      for (const item of items) {\n        this._getMeta(options, item, showSorting);\n      }\n    }\n\n    async write({ atomClass, target, key, item, options, user }) {\n      // super\n      await super.write({ atomClass, target, key, item, options, user });\n      // update resource\n      const data = await this.ctx.model.resource.prepareData(item);\n      await this.ctx.model.resource.update(data);\n    }\n\n    async delete({ atomClass, key, options, user }) {\n      // super\n      await super.delete({ atomClass, key, options, user });\n      // delete resource\n      await this.ctx.model.resource.delete({\n        id: key.itemId,\n      });\n      // delete resource locales\n      await this.ctx.model.resourceLocale.delete({\n        atomId: key.atomId,\n      });\n    }\n\n    _getMeta(options, item, showSorting) {\n      // resourceTypes\n      const resourceTypes = this.ctx.bean.base.resourceTypes();\n      const resourceType = resourceTypes[item.resourceType];\n      if (resourceType) {\n        item.resourceTypeLocale = resourceType.titleLocale;\n      }\n      // locale of appName\n      if (item.appName) {\n        item.appNameLocale = this.ctx.text(item.appName);\n      }\n      // locale of atomCategoryName\n      item.atomCategoryNameLocale = this.ctx.text(item.atomCategoryName);\n      // meta\n      const meta = this._ensureItemMeta(item);\n      // meta.flags\n      if (showSorting) {\n        meta.flags.push(item.resourceSorting);\n      }\n      // meta.summary\n      meta.summary = item.description;\n    }\n  }\n\n  return Atom;\n};\n","module.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Atom extends app.meta.AtomBase {\n    get beanRole() {\n      return this.ctx.bean.role;\n    }\n\n    async create({ atomClass, item, options, user }) {\n      // only support atomStage=1\n      if (item.atomStage !== 1) throw new Error('role only support atomStage=1');\n      // fields\n      const catalog = item.catalog || 0;\n      const system = item.system || 0;\n      let roleIdParent = item.roleIdParent || 0;\n      // is 0 when clone\n      if (roleIdParent !== 0) {\n        // roleIdParent maybe string\n        if (typeof roleIdParent === 'string') {\n          const role = await this.beanRole.parseRoleName({ roleName: roleIdParent, force: false });\n          roleIdParent = role.id;\n        }\n        // check if addChild right of roleIdParent\n        const addChildRight = await this.beanRole._checkRightActionOfRole({\n          roleId: roleIdParent,\n          action: 'addChild',\n          user,\n        });\n        if (!addChildRight) this.ctx.throw(403);\n      }\n      // super\n      const key = await super.create({ atomClass, item, options, user });\n      const atomId = key.atomId;\n      // add role\n      //   item.itemId only be set from inner access\n      let itemId = item.itemId;\n      if (!itemId) {\n        const _atomNew = await this.ctx.bean.atom.modelAtom.get({ id: atomId });\n        const roleName = _atomNew.atomName;\n        const res = await this.ctx.model.role.insert({\n          atomId: key.atomId,\n          catalog,\n          system,\n          roleIdParent,\n          roleName,\n        });\n        itemId = res.insertId;\n      } else {\n        await this.ctx.model.role.update({\n          id: itemId,\n          atomId,\n          catalog,\n          system,\n          roleIdParent,\n        });\n      }\n      // update roleIdOwner\n      await this.ctx.model.atom.update({ id: atomId, roleIdOwner: itemId });\n      // adjust catalog\n      await this.beanRole.adjustCatalog(roleIdParent);\n      // set dirty\n      await this.beanRole.setDirty(true);\n      // ok\n      return { atomId, itemId };\n    }\n\n    async read({ atomClass, options, key, user }) {\n      // super\n      const item = await super.read({ atomClass, options, key, user });\n      if (!item) return null;\n      // meta\n      await this._getMeta(options, item, true);\n      // ok\n      return item;\n    }\n\n    async select({ atomClass, options, items, user }) {\n      // super\n      await super.select({ atomClass, options, items, user });\n      // meta\n      const showSorting = !!(options && options.category);\n      for (const item of items) {\n        await this._getMeta(options, item, showSorting);\n      }\n    }\n\n    async write({ atomClass, target, key, item, options, user }) {\n      // check demo\n      const ctxCaller = this.ctx.ctxCaller;\n      if (ctxCaller && ctxCaller.path === '/api/a/base/atom/write') {\n        this.ctx.bean.util.checkDemo();\n      }\n      // roleIdParent maybe string, so cause validate error\n      delete item.roleIdParent;\n      // super\n      await super.write({ atomClass, target, key, item, options, user });\n      // update role\n      const data = await this.ctx.model.role.prepareData(item);\n      if (item.atomName) data.roleName = item.atomName;\n      await this.ctx.model.role.update(data);\n    }\n\n    async delete({ atomClass, key, options, user }) {\n      const roleId = key.itemId;\n      // force\n      const force = options && options.force;\n      // role\n      const role = await this.beanRole.get({ id: roleId });\n      // parent\n      const roleIdParent = role.roleIdParent;\n\n      // check if system\n      if (role.system) this.ctx.throw(403);\n      // check if children\n      if (role.catalog && !force) {\n        const children = await this.beanRole.children({ roleId });\n        if (children.length > 0) this.ctx.throw.module(moduleInfo.relativeName, 1008);\n      }\n\n      // delete all includes\n      await this.beanRole.modelRoleInc.delete({ roleId });\n      await this.beanRole.modelRoleInc.delete({ roleIdInc: roleId });\n\n      // delete all users\n      await this.beanRole.modelUserRole.delete({ roleId });\n\n      // delete all atom rights\n      await this.beanRole.modelRoleRight.delete({ roleId });\n      await this.beanRole.modelRoleRightRef.delete({ roleId });\n\n      // super\n      await super.delete({ atomClass, key, options, user });\n      // delete role\n      await this.ctx.model.role.delete({\n        id: key.itemId,\n      });\n\n      // adjust catalog\n      await this.beanRole.adjustCatalog(roleIdParent);\n\n      // set dirty\n      await this.beanRole.setDirty(true);\n    }\n\n    async copy({ atomClass, target, srcKey, srcItem, destKey, destItem, user }) {\n      await super.copy({ atomClass, target, srcKey, srcItem, destKey, destItem, user });\n      if (target === 'clone') {\n        await this.ctx.model.role.update({\n          id: destKey.itemId,\n          catalog: 0, // srcItem.catalog,\n          system: 0, // srcItem.system,\n          roleIdParent: srcItem.roleIdParent,\n        });\n      }\n    }\n\n    async checkRightAction({ atom, atomClass, action, stage, user, checkFlow }) {\n      // super\n      const res = await super.checkRightAction({ atom, atomClass, action, stage, user, checkFlow });\n      if (!res) return res;\n      if (atom.atomStage !== 1) return res;\n      // delete/clone/move/addChild/roleUsers/includes/resourceAuthorizations/atomAuthorizations\n      if (![4, 5, 101, 102, 103, 104, 105, 106].includes(action)) return res;\n      // role\n      const role = await this.ctx.model.role.get({ id: atom.itemId });\n      // delete\n      if (action === 4) {\n        if (role.system === 1) return null;\n      }\n      // clone\n      if (action === 5) {\n        if (role.roleIdParent === 0) return null;\n        if (atom.atomName === 'OpenAuthScope' && role.roleTypeCode === 6) return null;\n      }\n      // move\n      if (action === 101) {\n        if (role.system === 1) return null;\n      }\n      // addChild\n      if (action === 102) {\n        if (atom.atomName !== 'OpenAuthScope' && role.roleTypeCode === 6) return null;\n      }\n      // roleUsers\n      if (action === 103) {\n        if (role.catalog === 1) return null;\n        if (role.roleTypeCode === 6) return null;\n      }\n      // includes\n      if (action === 104) {\n        // if (role.roleTypeCode === 6) return null;\n      }\n      // resourceAuthorizations\n      if (action === 105) {\n        if (['OpenAuthScope', 'RoleScopeFull'].includes(atom.atomName) && role.roleTypeCode === 6) return null;\n      }\n      // atomAuthorizations\n      if (action === 106) {\n        if (['OpenAuthScope', 'RoleScopeFull'].includes(atom.atomName) && role.roleTypeCode === 6) return null;\n      }\n      // default\n      return res;\n    }\n\n    async _getMeta(options, item, showSorting) {\n      // meta\n      const meta = this._ensureItemMeta(item);\n      // meta.flags\n      if (showSorting) {\n        meta.flags.push(item.sorting);\n      }\n      // meta.summary\n      meta.summary = item.description;\n      // translate\n      await this._getMetaTranslate({ item });\n      // roleNameParent\n      if (item.roleNameParent) {\n        item.roleNameParentLocale = this.ctx.text(item.roleNameParent);\n      }\n    }\n\n    async _getMetaTranslate({ item }) {\n      const dictKey = 'a-base:dictRoleType';\n      const atomDict = await this.ctx.bean.atom.modelAtom.get({\n        atomStaticKey: dictKey,\n        atomStage: 1,\n      });\n      if (!atomDict) {\n        // do nothing\n        return;\n      }\n      // translate\n      const _item = await this._dictTranslateField({\n        fieldName: 'roleTypeCode',\n        code: item.roleTypeCode,\n        field: {\n          dictKey: 'a-base:dictRoleType',\n        },\n      });\n      Object.assign(item, _item);\n    }\n  }\n\n  return Atom;\n};\n","module.exports = app => {\n  // const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Atom extends app.meta.AtomBase {\n    get beanUser() {\n      return this.ctx.bean.user;\n    }\n\n    async create({ atomClass, item, options, user }) {\n      // only support atomStage=1\n      if (item.atomStage !== 1) throw new Error('user only support atomStage=1');\n      // fields\n      const disabled = item.disabled || 0;\n      const anonymous = item.anonymous || 0;\n      // super\n      const key = await super.create({ atomClass, item, options, user });\n      const atomId = key.atomId;\n      // add user\n      //   item.itemId only be set from inner access\n      let itemId = item.itemId;\n      if (!itemId) {\n        const _atomNew = await this.ctx.bean.atom.modelAtom.get({ id: atomId });\n        const userName = _atomNew.atomName;\n        const res = await this.ctx.model.user.insert({\n          atomId: key.atomId,\n          disabled,\n          anonymous,\n          userName,\n        });\n        itemId = res.insertId;\n      } else {\n        await this.ctx.model.user.update({\n          id: itemId,\n          disabled,\n          anonymous,\n          atomId,\n        });\n      }\n      // ok\n      return { atomId, itemId };\n    }\n\n    async read({ atomClass, options, key, user }) {\n      // super\n      const item = await super.read({ atomClass, options, key, user });\n      if (!item) return null;\n      // meta\n      await this._getMeta(options, item);\n      // ok\n      return item;\n    }\n\n    async select({ atomClass, options, items, user }) {\n      // super\n      await super.select({ atomClass, options, items, user });\n      // meta\n      for (const item of items) {\n        await this._getMeta(options, item);\n      }\n    }\n\n    async write({ atomClass, target, key, item, options, user }) {\n      // check demo\n      const ctxCaller = this.ctx.ctxCaller;\n      if (ctxCaller && ctxCaller.path === '/api/a/base/atom/write') {\n        this.ctx.bean.util.checkDemo();\n      }\n      // super\n      await super.write({ atomClass, target, key, item, options, user });\n      // update user\n      const data = await this.ctx.model.user.prepareData(item);\n      if (item.atomName) data.userName = item.atomName;\n      await this.ctx.model.user.update(data);\n    }\n\n    async delete({ atomClass, key, options, user }) {\n      const userId = key.itemId;\n      // super\n      await super.delete({ atomClass, key, options, user });\n\n      await this.ctx.bean.role.deleteAllUserRoles({ userId });\n      await this.ctx.bean.user.modelAuth.delete({ userId });\n\n      // delete user\n      await this.ctx.model.user.delete({ id: userId });\n    }\n\n    async enable({ atomClass, key, user }) {\n      // check demo\n      const ctxCaller = this.ctx.ctxCaller;\n      if (ctxCaller && ctxCaller.path === '/api/a/base/atom/enable') {\n        this.ctx.bean.util.checkDemo();\n      }\n      // super\n      await super.enable({ atomClass, key, user });\n      // enable\n      await this.ctx.model.user.update({\n        id: key.itemId,\n        disabled: 0,\n      });\n    }\n\n    async disable({ atomClass, key, user }) {\n      // check demo\n      const ctxCaller = this.ctx.ctxCaller;\n      if (ctxCaller && ctxCaller.path === '/api/a/base/atom/disable') {\n        this.ctx.bean.util.checkDemo();\n      }\n      // super\n      await super.disable({ atomClass, key, user });\n      // disable\n      await this.ctx.model.user.update({\n        id: key.itemId,\n        disabled: 1,\n      });\n    }\n\n    async checkRightAction({ atom, atomClass, action, stage, user, checkFlow }) {\n      // super\n      const res = await super.checkRightAction({ atom, atomClass, action, stage, user, checkFlow });\n      if (!res) return res;\n      if (atom.atomStage !== 1) return res;\n      // write/enable/disable\n      if (![3, 6, 7].includes(action)) return res;\n      // item\n      const item = await this.ctx.model.user.get({ id: atom.itemId });\n      if (item.anonymous) return null;\n      // default\n      return res;\n    }\n\n    async _getMeta(options, item) {\n      // meta\n      const meta = this._ensureItemMeta(item);\n      // meta.summary\n      meta.summary = item.motto;\n    }\n  }\n\n  return Atom;\n};\n","module.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class AreaScope {\n    get configModule() {\n      return ctx.config.module(moduleInfo.relativeName);\n    }\n\n    areaScopeEnabled() {\n      return this.configModule.configFront.areaScope.enable;\n    }\n\n    _checkIfEmpty(value) {\n      return value === null || value === undefined || value === '';\n    }\n\n    adjustValue({ atomAreaValue, trimEnd = false }) {\n      // check if empty\n      if (this._checkIfEmpty(atomAreaValue)) return null;\n      if (!Array.isArray(atomAreaValue)) {\n        atomAreaValue = atomAreaValue.split('|');\n      }\n      if (atomAreaValue.length === 0) return null;\n      // clear tailing empty\n      let hasTailingEmpty = false;\n      for (let i = atomAreaValue.length - 1; i >= 0; i--) {\n        if (this._checkIfEmpty(atomAreaValue[i])) {\n          hasTailingEmpty = true;\n          atomAreaValue.splice(i, 1);\n        } else {\n          break;\n        }\n      }\n      if (atomAreaValue.length === 0) return null;\n      // check middle empty\n      if (atomAreaValue.some(item => this._checkIfEmpty(item))) {\n        return null; // invalid\n      }\n      // append tailing\n      if (hasTailingEmpty && !trimEnd) {\n        atomAreaValue.push('');\n      }\n      return atomAreaValue.join('|');\n    }\n\n    adjustKeyAndValue({ atomAreaKey, atomAreaValue, trimEnd = false }) {\n      // atomAreaValue\n      atomAreaValue = this.adjustValue({ atomAreaValue, trimEnd });\n      // atomAreaKey\n      if (!atomAreaValue) {\n        atomAreaKey = null;\n      } else if (!atomAreaKey) {\n        atomAreaKey = null;\n      } else if (Array.isArray(atomAreaKey)) {\n        atomAreaKey = atomAreaKey.join('|');\n      }\n      // ok\n      return { atomAreaKey, atomAreaValue };\n    }\n\n    getAreaScopeMeta({ atomClass, escape = true }) {\n      if (!atomClass) return null;\n      let atomClassBase = ctx.bean.base.atomClass(atomClass);\n      while (true) {\n        const meta = atomClassBase.areaScope;\n        if (!meta) return null;\n        if (!meta.sameAs || !escape) return meta;\n        const _atomClassBase = ctx.bean.base.atomClass(meta.sameAs);\n        if (_atomClassBase === atomClassBase) return meta;\n        atomClassBase = _atomClassBase;\n      }\n    }\n  }\n  return AreaScope;\n};\n","const atom_0 = require('./bean.atom/bean.atom_0.js');\nconst atom_1 = require('./bean.atom/bean.atom_1.js');\nconst atom_right = require('./bean.atom/bean.atom_right.js');\nconst atom_starLabel = require('./bean.atom/bean.atom_starLabel.js');\nconst atom_areaScope = require('./bean.atom/bean.atom_areaScope.js');\nconst atom_draft = require('./bean.atom/bean.atom_draft.js');\nconst atom_formal = require('./bean.atom/bean.atom_formal.js');\nconst atom_simple = require('./bean.atom/bean.atom_simple.js');\nconst atom_submit = require('./bean.atom/bean.atom_submit.js');\nconst atom_checkRightAction = require('./bean.atom/bean.atom_checkRightAction.js');\n\nmodule.exports = ctx => {\n  return ctx.app.meta.util.mixinClasses(\n    atom_0,\n    [\n      //\n      atom_1,\n      atom_right,\n      atom_starLabel,\n      atom_areaScope,\n      atom_draft,\n      atom_formal,\n      atom_simple,\n      atom_submit,\n      atom_checkRightAction,\n    ],\n    ctx\n  );\n};\n","const require3 = require('require3');\n// const debug = require3('debug')('sql');\nconst mparse = require3('egg-born-mparse').default;\n\nmodule.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Atom extends ctx.app.meta.BeanModuleBase {\n    constructor(moduleName) {\n      super(ctx, 'atom');\n      this.moduleName = moduleName || ctx.module.info.relativeName;\n    }\n\n    get atomClass() {\n      return ctx.bean.atomClass.module(this.moduleName);\n    }\n\n    get modelAtom() {\n      return ctx.model.module(moduleInfo.relativeName).atom;\n    }\n\n    get modelAtomStar() {\n      return ctx.model.module(moduleInfo.relativeName).atomStar;\n    }\n\n    get modelLabel() {\n      return ctx.model.module(moduleInfo.relativeName).label;\n    }\n\n    get modelAtomLabel() {\n      return ctx.model.module(moduleInfo.relativeName).atomLabel;\n    }\n\n    get modelAtomLabelRef() {\n      return ctx.model.module(moduleInfo.relativeName).atomLabelRef;\n    }\n    get modelFile() {\n      return ctx.model.module('a-file').file;\n    }\n\n    get sequence() {\n      return ctx.bean.sequence.module(moduleInfo.relativeName);\n    }\n\n    get sqlProcedure() {\n      return ctx.bean._getBean(moduleInfo.relativeName, 'local.procedure');\n    }\n\n    // atom and item\n\n    // create\n    async create({ atomClass, atomStage, roleIdOwner, item, options, createOptions, user }) {\n      options = options || {};\n      if (createOptions) {\n        options.createOptions = createOptions;\n      }\n      // atomClass\n      atomClass = await ctx.bean.atomClass.get(atomClass);\n      const _atomClass = await ctx.bean.atomClass.atomClass(atomClass);\n      // atomSimple\n      const atomSimple = Number(Boolean(_atomClass.simple));\n      // item\n      item = item || {};\n      item.atomStage = atomStage !== undefined ? atomStage : atomSimple;\n      item.roleIdOwner = roleIdOwner;\n      // atom bean\n      const _moduleInfo = mparse.parseInfo(atomClass.module);\n      const beanFullName = `${_moduleInfo.relativeName}.atom.${_atomClass.bean}`;\n      const res = await ctx.meta.util.executeBean({\n        beanModule: _moduleInfo.relativeName,\n        beanFullName,\n        context: { atomClass, item, options, user },\n        fn: 'create',\n      });\n      const { atomId, itemId } = res;\n      // save itemId\n      await this._update({\n        atom: { id: atomId, itemId },\n        user,\n      });\n      // notify\n      this._notifyDraftsDrafting(null, atomClass);\n      // ok\n      const key = { atomId, itemId };\n      const returnAtom = options.returnAtom;\n      if (!returnAtom) return key;\n      // read\n      item = await this.read({ key, user });\n      return { key, atom: item };\n    }\n\n    // read\n    async read({ key, options, user }) {\n      options = options || {};\n      const atomClass = await ctx.bean.atomClass.getByAtomId({ atomId: key.atomId });\n      if (!atomClass) ctx.throw.module(moduleInfo.relativeName, 1002);\n      // atom bean\n      const _moduleInfo = mparse.parseInfo(atomClass.module);\n      const _atomClass = await ctx.bean.atomClass.atomClass(atomClass);\n      const beanFullName = `${_moduleInfo.relativeName}.atom.${_atomClass.bean}`;\n      const item = await ctx.meta.util.executeBean({\n        beanModule: _moduleInfo.relativeName,\n        beanFullName,\n        context: { atomClass, options, key, user },\n        fn: 'read',\n      });\n      // ok\n      return item;\n    }\n\n    // readByStaticKey\n    async readByStaticKey({ atomClass, atomStaticKey, atomRevision, atomStage }) {\n      const options = {\n        mode: 'full',\n        stage: atomStage,\n        where: {\n          'a.atomStaticKey': atomStaticKey,\n        },\n      };\n      if (atomRevision !== undefined) {\n        options.where['a.atomRevision'] = atomRevision;\n      }\n      const list = await this.select({ atomClass, options });\n      return list[0];\n    }\n\n    // count\n    async count({ atomClass, options, user }) {\n      return await this.select({ atomClass, options, user, count: 1 });\n    }\n\n    // select\n    async select({ atomClass, options, user, pageForce = true, count = 0 }) {\n      if (!options) options = {};\n      if (!options.where) options.where = {};\n      if (!options.orders) options.orders = [];\n      // atomClass\n      let _atomClass;\n      let _moduleInfo;\n      if (atomClass) {\n        atomClass = await ctx.bean.atomClass.get(atomClass);\n        _atomClass = await ctx.bean.atomClass.atomClass(atomClass);\n        _moduleInfo = mparse.parseInfo(atomClass.module);\n      }\n      // selectBefore\n      if (atomClass) {\n        const beanFullName = `${_moduleInfo.relativeName}.atom.${_atomClass.bean}`;\n        await ctx.meta.util.executeBean({\n          beanModule: _moduleInfo.relativeName,\n          beanFullName,\n          context: { atomClass, options, user },\n          fn: 'selectBefore',\n        });\n      }\n      // tableName\n      let tableName = '';\n      if (_atomClass) {\n        tableName = await this.getTableName({\n          atomClass,\n          atomClassBase: _atomClass,\n          options,\n          mode: options.mode,\n          user,\n          action: 'select',\n          count,\n        });\n        // 'where' should append atomClassId, such as article/post using the same table\n        options.where['a.atomClassId'] = atomClass.id;\n      }\n      // cms\n      const cms = _atomClass && _atomClass.cms;\n      // forAtomUser\n      const forAtomUser = this._checkForAtomUser(atomClass);\n      // useAreaScope\n      const useAreaScope = this._checkUseAreaScope(atomClass);\n      // select\n      const items = await this._list({\n        tableName,\n        options,\n        cms,\n        forAtomUser,\n        useAreaScope,\n        user,\n        pageForce,\n        count,\n      });\n      // select items\n      if (!count) {\n        if (atomClass) {\n          const beanFullName = `${_moduleInfo.relativeName}.atom.${_atomClass.bean}`;\n          await ctx.meta.util.executeBean({\n            beanModule: _moduleInfo.relativeName,\n            beanFullName,\n            context: { atomClass, options, items, user },\n            fn: 'select',\n          });\n        } else {\n          await ctx.bean.atomBase.select({ atomClass, options, items, user });\n        }\n      }\n      // ok\n      return items;\n    }\n\n    // write\n    //   target: should be null for frontend call\n    async write({ key, target, item, options, user }) {\n      // atomClass\n      const atomClass = await ctx.bean.atomClass.getByAtomId({ atomId: key.atomId });\n      if (!atomClass) ctx.throw.module(moduleInfo.relativeName, 1002);\n      if (!key.itemId) key.itemId = atomClass.itemId;\n      // atom bean\n      const _moduleInfo = mparse.parseInfo(atomClass.module);\n      const _atomClass = await ctx.bean.atomClass.atomClass(atomClass);\n      const beanFullName = `${_moduleInfo.relativeName}.atom.${_atomClass.bean}`;\n      // basic info\n      const _atomBasic = await this.modelAtom.get({ id: key.atomId });\n      // support formal flow\n      // if (_atomBasic.atomStage !== _atomBasic.atomSimple) ctx.throw(403);\n      if (_atomBasic.atomSimple) {\n        if (_atomClass.history !== false) {\n          //  formal -> history\n          await this._copy({\n            target: 'history',\n            srcKey: { atomId: key.atomId },\n            srcItem: null,\n            destKey: null,\n            options,\n            user,\n          });\n        }\n      }\n      // write draft/formal(simple)\n      const itemWrite = Object.assign({}, item, {\n        atomId: key.atomId,\n        itemId: key.itemId,\n        atomSimple: _atomBasic.atomSimple,\n        atomStage: _atomBasic.atomSimple ? 1 : _atomBasic.atomStage,\n      });\n      await ctx.meta.util.executeBean({\n        beanModule: _moduleInfo.relativeName,\n        beanFullName,\n        context: { atomClass, target, key, item: itemWrite, options, user },\n        fn: 'write',\n      });\n      // update formal version for simple\n      if (_atomBasic.atomSimple) {\n        await this.modelAtom.update({\n          id: key.atomId,\n          atomRevision: _atomBasic.atomRevision + 1,\n        });\n      }\n    }\n\n    // deleteBulk\n    async deleteBulk({ keys, user }) {\n      const resKeys = [];\n      for (const key of keys) {\n        const res = await this._deleteBulk_item({ key, user });\n        if (res) {\n          resKeys.push(key);\n        }\n      }\n      return { keys: resKeys };\n    }\n\n    // delete\n    async delete({ key, options, user }) {\n      const atomClass = await ctx.bean.atomClass.getByAtomId({ atomId: key.atomId });\n      if (!atomClass) ctx.throw.module(moduleInfo.relativeName, 1002);\n      if (!key.itemId) key.itemId = atomClass.itemId;\n      // atom bean\n      const _moduleInfo = mparse.parseInfo(atomClass.module);\n      const _atomClass = await ctx.bean.atomClass.atomClass(atomClass);\n      const beanFullName = `${_moduleInfo.relativeName}.atom.${_atomClass.bean}`;\n      // atom\n      const _atom = await this.modelAtom.get({ id: key.atomId });\n      if (_atom.atomStage === 0) {\n        // close draft\n        await this.closeDraft({ key });\n      } else if (_atom.atomStage === 1) {\n        // delete history\n        const listHistory = await this.modelAtom.select({\n          where: {\n            atomStage: 2,\n            atomIdFormal: _atom.id,\n          },\n        });\n        for (const item of listHistory) {\n          await ctx.meta.util.executeBean({\n            beanModule: _moduleInfo.relativeName,\n            beanFullName,\n            context: { atomClass, key: { atomId: item.id, itemId: item.itemId }, options, user },\n            fn: 'delete',\n          });\n        }\n        // delete draft\n        const itemDraft = await this.modelAtom.get({\n          atomStage: 0,\n          atomIdFormal: _atom.id,\n        });\n        if (itemDraft) {\n          await ctx.meta.util.executeBean({\n            beanModule: _moduleInfo.relativeName,\n            beanFullName,\n            context: { atomClass, key: { atomId: itemDraft.id, itemId: itemDraft.itemId }, options, user },\n            fn: 'delete',\n          });\n          // notify\n          this._notifyDraftsDrafting(null, atomClass);\n        }\n        // delete formal\n        await ctx.meta.util.executeBean({\n          beanModule: _moduleInfo.relativeName,\n          beanFullName,\n          context: { atomClass, key: { atomId: _atom.id, itemId: _atom.itemId }, options, user },\n          fn: 'delete',\n        });\n      } else if (_atom.atomStage === 2) {\n        // delete history self\n        await ctx.meta.util.executeBean({\n          beanModule: _moduleInfo.relativeName,\n          beanFullName,\n          context: { atomClass, key: { atomId: _atom.id, itemId: _atom.itemId }, options, user },\n          fn: 'delete',\n        });\n      }\n    }\n\n    async enable({ key, user }) {\n      // atomClass\n      const atomClass = await ctx.bean.atomClass.getByAtomId({ atomId: key.atomId });\n      if (!atomClass) ctx.throw.module(moduleInfo.relativeName, 1002);\n      if (!key.itemId) key.itemId = atomClass.itemId;\n      // atom bean\n      const _moduleInfo = mparse.parseInfo(atomClass.module);\n      const _atomClass = await ctx.bean.atomClass.atomClass(atomClass);\n      const beanFullName = `${_moduleInfo.relativeName}.atom.${_atomClass.bean}`;\n      await ctx.meta.util.executeBean({\n        beanModule: _moduleInfo.relativeName,\n        beanFullName,\n        context: { atomClass, key, user },\n        fn: 'enable',\n      });\n    }\n\n    async disable({ key, user }) {\n      // atomClass\n      const atomClass = await ctx.bean.atomClass.getByAtomId({ atomId: key.atomId });\n      if (!atomClass) ctx.throw.module(moduleInfo.relativeName, 1002);\n      if (!key.itemId) key.itemId = atomClass.itemId;\n      // atom bean\n      const _moduleInfo = mparse.parseInfo(atomClass.module);\n      const _atomClass = await ctx.bean.atomClass.atomClass(atomClass);\n      const beanFullName = `${_moduleInfo.relativeName}.atom.${_atomClass.bean}`;\n      await ctx.meta.util.executeBean({\n        beanModule: _moduleInfo.relativeName,\n        beanFullName,\n        context: { atomClass, key, user },\n        fn: 'disable',\n      });\n    }\n\n    async clone({ key, user }) {\n      // atomClass\n      const atomClass = await ctx.bean.atomClass.getByAtomId({ atomId: key.atomId });\n      if (!atomClass) ctx.throw.module(moduleInfo.relativeName, 1002);\n      // copy\n      const keyDraft = await this._copy({\n        target: 'clone',\n        srcKey: { atomId: key.atomId },\n        srcItem: null,\n        destKey: null,\n        user,\n      });\n      // ok\n      // get atom\n      const atom = await this.read({ key: keyDraft, user });\n      // draft/formal\n      const res = { key: keyDraft, atom };\n      if (atom.atomStage === 0) return { draft: res };\n      return { formal: res };\n    }\n\n    async exportBulk({ atomClass, options, fields, user }) {\n      // atomClass\n      let _atomClass;\n      if (atomClass) {\n        atomClass = await ctx.bean.atomClass.get(atomClass);\n        _atomClass = await ctx.bean.atomClass.atomClass(atomClass);\n      }\n      // select\n      const items = await this.select({ atomClass, options, user, pageForce: false });\n      // export\n      const _moduleInfo = mparse.parseInfo(atomClass.module);\n      const beanFullName = `${_moduleInfo.relativeName}.atom.${_atomClass.bean}`;\n      const resExport = await ctx.meta.util.executeBean({\n        beanModule: _moduleInfo.relativeName,\n        beanFullName,\n        context: { atomClass, options, fields, items, user },\n        fn: 'exportBulk',\n      });\n      // file\n      const resFile = await ctx.bean.file._upload({\n        fileContent: resExport.data,\n        meta: resExport.meta,\n        user,\n      });\n      // ok\n      return resFile;\n    }\n\n    async importBulk({ atomClass, options, file, user }) {\n      // atomClass\n      let _atomClass;\n      if (atomClass) {\n        atomClass = await ctx.bean.atomClass.get(atomClass);\n        _atomClass = await ctx.bean.atomClass.atomClass(atomClass);\n      }\n      // options\n      if (!options) {\n        const actionBase = ctx.bean.base.action({\n          module: atomClass.module,\n          atomClassName: atomClass.atomClassName,\n          name: 'importBulk',\n        });\n        // options\n        options = actionBase.params;\n      }\n      try {\n        // prepare file\n        if (options.file.mode === 'buffer') {\n          const res = await ctx.bean.file.loadBuffer({ downloadId: file.downloadId });\n          options.file.buffer = res.buffer;\n        }\n        // import\n        let resImport;\n        if (options.transaction) {\n          resImport = await ctx.transaction.begin(async () => {\n            return await this._importBulk_inner({ atomClass, _atomClass, options, file, user });\n          });\n        } else {\n          resImport = await this._importBulk_inner({ atomClass, _atomClass, options, file, user });\n        }\n        // ok\n        return resImport;\n      } finally {\n        // delete file\n        await ctx.bean.file.delete({ downloadId: file.downloadId });\n      }\n    }\n\n    async _importBulk_inner({ atomClass, _atomClass, options, file, user }) {\n      const _moduleInfo = mparse.parseInfo(atomClass.module);\n      const beanFullName = `${_moduleInfo.relativeName}.atom.${_atomClass.bean}`;\n      return await ctx.meta.util.executeBean({\n        beanModule: _moduleInfo.relativeName,\n        beanFullName,\n        context: { atomClass, options, file, user },\n        fn: 'importBulk',\n      });\n    }\n\n    // atom other functions\n\n    async get({ atomId }) {\n      return await this.modelAtom.get({ id: atomId });\n    }\n\n    async flow({ key, atom: { atomFlowId } }) {\n      const atomClass = await ctx.bean.atomClass.getByAtomId({ atomId: key.atomId });\n      await this.modelAtom.update({\n        id: key.atomId,\n        atomFlowId,\n      });\n      // notify\n      const item = await this.modelAtom.get({ id: key.atomId });\n      const user = { id: item.userIdUpdated };\n      this._notifyDraftsDrafting(user, atomClass);\n      this._notifyDraftsFlowing(user, atomClass);\n    }\n\n    async atomState({ key, atom: { atomState } }) {\n      await this.modelAtom.update({\n        id: key.atomId,\n        atomState,\n      });\n    }\n\n    async readCount({ key, atom: { readCount = 1 }, user }) {\n      await this.modelAtom.query('update aAtom set readCount = readCount + ? where iid=? and id=?', [\n        readCount,\n        ctx.instance.id,\n        key.atomId,\n      ]);\n    }\n\n    async comment({ key, atom: { comment = 1 }, user }) {\n      await this.modelAtom.query('update aAtom set commentCount = commentCount + ? where iid=? and id=?', [\n        comment,\n        ctx.instance.id,\n        key.atomId,\n      ]);\n    }\n\n    async attachment({ key, atom: { attachment = 1 }, user }) {\n      await this.modelAtom.query('update aAtom set attachmentCount = attachmentCount + ? where iid=? and id=?', [\n        attachment,\n        ctx.instance.id,\n        key.atomId,\n      ]);\n    }\n\n    async stats({ atomIds, user }) {\n      const list = [];\n      for (const atomId of atomIds) {\n        const res = await this.checkRightRead({ atom: { id: atomId }, user, checkFlow: true });\n        if (res) {\n          list.push({\n            id: atomId,\n            atomId,\n            readCount: res.readCount,\n            commentCount: res.commentCount,\n            starCount: res.starCount,\n          });\n        }\n      }\n      return list;\n    }\n\n    async schema({ atomClass, schema }) {\n      const validator = await this.validator({ atomClass });\n      if (!validator) return null;\n      return ctx.bean.validation.getSchema({ module: validator.module, validator: validator.validator, schema });\n    }\n\n    async validator({ atomClass }) {\n      atomClass = await this.atomClass.get(atomClass);\n      atomClass = await this.atomClass.top(atomClass);\n      return await this.atomClass.validator({ atomClass });\n    }\n\n    async getTableName({ atomClass, atomClassBase, options, mode, user, action, key, count }) {\n      const tableNameModes = atomClassBase.tableNameModes || {};\n      let tableName;\n      if (mode === 'search') {\n        tableName = tableNameModes.search || tableNameModes.full || tableNameModes.default || atomClassBase.tableName;\n      } else {\n        tableName = tableNameModes[mode] || tableNameModes.default || atomClassBase.tableName;\n      }\n      if (!tableName) return tableName;\n      // if function\n      if (typeof tableName !== 'string') {\n        tableName = await tableName({ ctx, atomClass, atomClassBase, options, mode, user, action, key, count });\n      } else {\n        // check if resource\n        if (atomClassBase.resource) {\n          const optionsResource = options && options.resource;\n          if (!optionsResource) {\n            tableName = `(\n                  select ___a.*,\n                    ___c.atomNameLocale\n                    from ${tableName} ___a\n                    left join aResourceLocale ___c on ___a.atomId=___c.atomId and ___c.locale='${ctx.locale}'\n                )`;\n          }\n        }\n      }\n      // ok\n      return tableName;\n    }\n\n    async getAtomClassId({ module, atomClassName, atomClassIdParent = 0 }) {\n      ctx.app.meta.util.deprecated('ctx.bean.atom.getAtomClassId', 'ctx.bean.atomClass.get');\n      const atomClass = await ctx.bean.atomClass.get({ module, atomClassName, atomClassIdParent });\n      return atomClass.id;\n    }\n  }\n\n  return Atom;\n};\n","const require3 = require('require3');\nconst debug = require3('debug')('sql');\nconst mparse = require3('egg-born-mparse').default;\n\nmodule.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Atom {\n    async _deleteBulk_item({ key, user }) {\n      // check right\n      const res = await ctx.bean.atom.checkRightAction({\n        atom: { id: key.atomId },\n        action: 4,\n        user,\n      });\n      if (!res) return false;\n      // delete\n      await this.delete({ key, user });\n      // ok\n      return true;\n    }\n\n    _copy_prepareDestItem({ target, srcItem, user }) {\n      // atomSimple\n      const atomSimple = srcItem.atomSimple;\n      // atomStage\n      let atomStage = ctx.constant.module(moduleInfo.relativeName).atom.stage[target];\n      if (atomStage === undefined) {\n        atomStage = atomSimple; // support simple when target='clone'\n      }\n      // if (target === 'clone') {\n      //   atomStage = atomSimple; // support simple\n      // }\n      // atomClosed\n      const atomClosed = 0;\n      // atomIdDraft/atomIdFormal\n      let atomIdDraft;\n      let atomIdFormal;\n      let userIdUpdated = srcItem.userIdUpdated;\n      let userIdCreated = srcItem.userIdCreated || userIdUpdated;\n      let atomFlowId = srcItem.atomFlowId;\n      let atomName = srcItem.atomName;\n      let atomStatic = srcItem.atomStatic;\n      let atomStaticKey = srcItem.atomStaticKey;\n      let atomRevision = srcItem.atomRevision;\n      const atomLanguage = srcItem.atomLanguage;\n      const atomCategoryId = srcItem.atomCategoryId;\n      const atomTags = srcItem.atomTags;\n      if (target === 'draft') {\n        atomIdDraft = 0;\n        atomIdFormal = srcItem.atomStage === 1 ? srcItem.atomId : srcItem.atomIdFormal;\n        userIdUpdated = user.id;\n        atomFlowId = 0; // will start a new flow instance\n        // formal->draft: = srcItem.atomRevision\n        if (srcItem.atomStage === 2) {\n          // history->draft\n          atomRevision = undefined;\n        }\n      } else if (target === 'formal') {\n        if (srcItem.atomStage === 0) {\n          // draft->formal\n          atomIdDraft = srcItem.atomId;\n        } else {\n          // history->formal\n          atomIdDraft = 0;\n        }\n        atomIdFormal = 0;\n        // history->formal\n        if (srcItem.atomStage === 2) {\n          atomRevision = undefined;\n        }\n      } else if (target === 'history') {\n        // formal->history\n        atomIdDraft = srcItem.atomIdDraft;\n        atomIdFormal = srcItem.atomId;\n      } else if (target === 'clone') {\n        atomIdDraft = 0;\n        atomIdFormal = 0;\n        userIdUpdated = user.id;\n        userIdCreated = user.id;\n        atomFlowId = 0;\n        atomName = `${srcItem.atomName}-${ctx.text('CloneCopyText')}`;\n        atomStatic = 0;\n        if (atomStaticKey) {\n          atomStaticKey = ctx.bean.util.uuidv4();\n        }\n        atomRevision = 0;\n      }\n      // destItem\n      const destItem = Object.assign({}, srcItem, {\n        // atomId: destKey.atomId,\n        // itemId: destKey.itemId,\n        userIdCreated,\n        userIdUpdated,\n        atomName,\n        atomStatic,\n        atomStaticKey,\n        atomRevision,\n        atomLanguage,\n        atomCategoryId,\n        atomTags,\n        atomSimple,\n        atomStage,\n        atomFlowId,\n        allowComment: srcItem.allowComment,\n        attachmentCount: srcItem.attachmentCount,\n        atomClosed,\n        atomIdDraft,\n        atomIdFormal,\n        createdAt: srcItem.atomCreatedAt,\n        updatedAt: srcItem.atomUpdatedAt,\n      });\n      return destItem;\n    }\n\n    // target: draft/formal/history/clone\n    async _copy({ target, srcKey, srcItem, destKey, options, user }) {\n      // atomClass\n      const atomClass = await ctx.bean.atomClass.getByAtomId({ atomId: srcKey.atomId });\n      if (!atomClass) ctx.throw.module(moduleInfo.relativeName, 1002);\n      if (!srcKey.itemId) srcKey.itemId = atomClass.itemId;\n      // atom bean\n      const _moduleInfo = mparse.parseInfo(atomClass.module);\n      const _atomClass = await ctx.bean.atomClass.atomClass(atomClass);\n      const beanFullName = `${_moduleInfo.relativeName}.atom.${_atomClass.bean}`;\n      // srcItem\n      if (!srcItem) {\n        srcItem = await ctx.bean.atom.read({ key: { atomId: srcKey.atomId }, user: null });\n      }\n      // destItem\n      const destItem = this._copy_prepareDestItem({ target, srcItem, user });\n      // destKey\n      if (!destKey) {\n        destKey = await this.create({\n          atomClass,\n          atomStage: destItem.atomStage,\n          roleIdOwner: srcItem.roleIdOwner,\n          item: null,\n          createOptions: { target, srcItem, destItem },\n          user,\n        });\n      }\n      if (!destKey.itemId) {\n        const _item = await this.modelAtom.get({ id: destKey.atomId });\n        destKey.itemId = _item.itemId;\n      }\n      // append destKey\n      destItem.atomId = destKey.atomId;\n      destItem.itemId = destKey.itemId;\n      // update fields\n      const data = {\n        id: destItem.atomId,\n        userIdCreated: destItem.userIdCreated,\n        userIdUpdated: destItem.userIdUpdated,\n        //   see also: atomBase\n        // atomName: destItem.atomName,\n        // atomLanguage: destItem.atomLanguage,\n        // atomCategoryId: destItem.atomCategoryId,\n        // atomTags: destItem.atomTags,\n        // allowComment: destItem.allowComment,\n        atomStatic: destItem.atomStatic,\n        atomStaticKey: destItem.atomStaticKey,\n        atomRevision: destItem.atomRevision,\n        atomSimple: destItem.atomSimple,\n        atomStage: destItem.atomStage,\n        // atomFlowId: destItem.atomFlowId,\n        attachmentCount: destItem.attachmentCount,\n        // atomClosed: destItem.atomClosed,\n        atomIdDraft: destItem.atomIdDraft,\n        atomIdFormal: destItem.atomIdFormal,\n        createdAt: destItem.createdAt,\n        updatedAt: destItem.updatedAt,\n      };\n      if (target === 'draft' || target === 'clone') {\n        data.atomClosed = destItem.atomClosed;\n        data.atomFlowId = destItem.atomFlowId;\n      }\n      await this.modelAtom.update(data);\n      // bean write\n      await ctx.meta.util.executeBean({\n        beanModule: _moduleInfo.relativeName,\n        beanFullName,\n        context: { atomClass, target, key: destKey, item: destItem, options, user },\n        fn: 'write',\n      });\n      // bean copy\n      await ctx.meta.util.executeBean({\n        beanModule: _moduleInfo.relativeName,\n        beanFullName,\n        context: { atomClass, target, srcKey, srcItem, destKey, destItem, options, user },\n        fn: 'copy',\n      });\n      // copy attachments\n      await this._copyAttachments({ atomIdSrc: srcKey.atomId, atomIdDest: destKey.atomId });\n      // copy details\n      await ctx.bean.detail._copyDetails({\n        atomClass,\n        target,\n        srcKeyAtom: srcKey,\n        destKeyAtom: destKey,\n        destAtom: destItem,\n        options,\n        user,\n      });\n      // ok\n      return destKey;\n    }\n\n    async _copyAttachments({ atomIdSrc, atomIdDest }) {\n      // delete old files\n      await this.modelFile.delete({ atomId: atomIdDest, mode: 2 });\n      // add new files\n      const files = await this.modelFile.select({\n        where: { atomId: atomIdSrc, mode: 2 },\n      });\n      for (const file of files) {\n        delete file.id;\n        file.atomId = atomIdDest;\n        await this.modelFile.insert(file);\n      }\n    }\n\n    // atom\n\n    async _add({\n      atomClass,\n      atom: {\n        atomStage = 0,\n        itemId,\n        atomName,\n        roleIdOwner = 0,\n        atomStatic = 0,\n        atomStaticKey = null,\n        atomRevision = 0,\n        atomLanguage = null,\n        atomCategoryId = 0,\n        atomTags = null,\n        allowComment = 1,\n        atomSimple = 0,\n      },\n      user,\n    }) {\n      const atomClassId = atomClass.id;\n      const res = await this.modelAtom.insert({\n        atomStage,\n        itemId,\n        atomClassId,\n        atomName,\n        atomStatic,\n        atomStaticKey,\n        atomRevision,\n        atomLanguage,\n        atomCategoryId,\n        atomTags,\n        atomSimple,\n        allowComment,\n        userIdCreated: user.id,\n        userIdUpdated: user.id,\n        roleIdOwner,\n      });\n      return res.insertId;\n    }\n\n    async _update({ atom /* , user,*/ }) {\n      await this.modelAtom.update(atom);\n    }\n\n    async _delete({ atomClass, atom, user }) {\n      if (!atomClass) {\n        atomClass = await ctx.bean.atomClass.getByAtomId({ atomId: atom.id });\n      }\n      // stars\n      await this._delete_stars({ atomId: atom.id });\n      // labels\n      await this._delete_labels({ atomId: atom.id });\n      // aFile\n      await this.modelFile.delete({ atomId: atom.id });\n      // details\n      await ctx.bean.detail._deleteDetails({ atomClass, atomKey: { atomId: atom.id }, user });\n      // aAtom\n      await this.modelAtom.delete(atom);\n    }\n\n    async _delete_stars({ atomId }) {\n      const items = await this.modelAtomStar.select({\n        where: { atomId, star: 1 },\n      });\n      for (const item of items) {\n        this._notifyStars({ id: item.userId });\n      }\n      if (items.length > 0) {\n        await this.modelAtomStar.delete({ atomId });\n      }\n    }\n\n    async _delete_labels({ atomId }) {\n      const items = await this.modelAtomLabel.select({\n        where: { atomId },\n      });\n      for (const item of items) {\n        this._notifyLabels({ id: item.userId });\n      }\n      if (items.length > 0) {\n        await this.modelAtomLabel.delete({ atomId });\n        await this.modelAtomLabelRef.delete({ atomId });\n      }\n    }\n\n    async _get({ atomClass, options, key, mode, user }) {\n      if (!options) options = {};\n      const resource = options.resource || 0;\n      const resourceLocale = options.resourceLocale === false ? false : options.resourceLocale || ctx.locale;\n      // atomClass\n      const _atomClass = await ctx.bean.atomClass.atomClass(atomClass);\n      // tableName\n      const tableName = await this.getTableName({\n        atomClass,\n        atomClassBase: _atomClass,\n        options,\n        mode,\n        user,\n        action: 'read',\n        key,\n      });\n      // cms\n      const cms = _atomClass && _atomClass.cms;\n      // forAtomUser\n      const forAtomUser = this._checkForAtomUser(atomClass);\n      // sql\n      const sql = this.sqlProcedure.getAtom({\n        iid: ctx.instance.id,\n        userIdWho: user ? user.id : 0,\n        tableName,\n        atomId: key.atomId,\n        resource,\n        resourceLocale,\n        mode,\n        cms,\n        forAtomUser,\n      });\n      debug('===== getAtom =====\\n%s', sql);\n      // query\n      return await ctx.model.queryOne(sql);\n    }\n\n    // forAtomUser\n    _checkForAtomUser(atomClass) {\n      return atomClass && atomClass.module === 'a-base' && atomClass.atomClassName === 'user';\n    }\n\n    // useAreaScope\n    _checkUseAreaScope(atomClass) {\n      if (!ctx.bean.areaScope.areaScopeEnabled()) return false;\n      if (!atomClass) return true;\n      const areaScopeMeta = ctx.bean.areaScope.getAreaScopeMeta({ atomClass, escape: false });\n      return !!areaScopeMeta;\n    }\n\n    async _list({\n      tableName,\n      options: {\n        where,\n        orders,\n        page,\n        star = 0,\n        label = 0,\n        comment = 0,\n        file = 0,\n        stage = 'formal',\n        language,\n        category = 0,\n        tag = 0,\n        mine = 0,\n        resource = 0,\n        resourceLocale,\n        role = 0,\n        mode,\n      },\n      cms,\n      forAtomUser,\n      useAreaScope,\n      user,\n      pageForce = true,\n      count = 0,\n    }) {\n      page = ctx.bean.util.page(page, pageForce);\n      stage = typeof stage === 'number' ? stage : ctx.constant.module(moduleInfo.relativeName).atom.stage[stage];\n      const sql = this.sqlProcedure.selectAtoms({\n        iid: ctx.instance.id,\n        userIdWho: user ? user.id : 0,\n        tableName,\n        where,\n        orders,\n        page,\n        star,\n        label,\n        comment,\n        file,\n        count,\n        stage,\n        language,\n        category,\n        tag,\n        mine,\n        resource,\n        resourceLocale,\n        mode,\n        cms,\n        forAtomUser,\n        useAreaScope,\n        role,\n      });\n      debug('===== selectAtoms =====\\n%s', sql);\n      const res = await ctx.model.query(sql);\n      return count ? res[0]._count : res;\n    }\n\n    // right\n\n    async __checkRightActionBulk({ actionRes, stage /* user*/ }) {\n      // not care about stage\n      if (!stage) return actionRes;\n      // action base\n      const actionBase = ctx.bean.base.action({\n        module: actionRes.module,\n        atomClassName: actionRes.atomClassName,\n        code: actionRes.code,\n      });\n      if (!actionBase) {\n        if (actionRes.code < 10000) {\n          await ctx.bean.atomAction.delete({ atomClassId: actionRes.atomClassId, code: actionRes.code });\n        }\n        return null;\n      }\n      if (actionBase.stage) {\n        const stages = actionBase.stage.split(',');\n        if (!stages.some(item => item === stage)) return null;\n      }\n      return actionRes;\n    }\n\n    _notifyDraftsDrafting(user, atomClass) {\n      ctx.bean.stats.notify({\n        module: moduleInfo.relativeName,\n        name: 'draftsDrafting',\n        nameSub: `${atomClass.module}_${atomClass.atomClassName}`,\n        user,\n      });\n    }\n\n    _notifyDraftsFlowing(user, atomClass) {\n      ctx.bean.stats.notify({\n        module: moduleInfo.relativeName,\n        name: 'draftsFlowing',\n        nameSub: `${atomClass.module}_${atomClass.atomClassName}`,\n        user,\n      });\n    }\n\n    _notifyStars(user) {\n      ctx.bean.stats.notify({\n        module: moduleInfo.relativeName,\n        name: 'stars',\n        user,\n      });\n    }\n\n    _notifyLabels(user) {\n      ctx.bean.stats.notify({\n        module: moduleInfo.relativeName,\n        name: 'labels',\n        user,\n      });\n    }\n  }\n\n  return Atom;\n};\n","const require3 = require('require3');\nconst mparse = require3('egg-born-mparse').default;\n\nmodule.exports = ctx => {\n  class Atom {\n    async setAreaScopeValue({ atomId, atomClass, atomAreaValue }) {\n      // // enabled\n      // if (!ctx.bean.areaScope.areaScopeEnabled()) return;\n      // meta\n      const areaScopeMeta = ctx.bean.areaScope.getAreaScopeMeta({ atomClass, escape: false });\n      if (!areaScopeMeta) {\n        // not support area scope\n        return;\n      }\n      // atomAreaKey\n      let atomAreaKey = Object.keys(areaScopeMeta.schemas);\n      const adjustRes = ctx.bean.areaScope.adjustKeyAndValue({ atomAreaKey, atomAreaValue });\n      atomAreaKey = adjustRes.atomAreaKey;\n      atomAreaValue = adjustRes.atomAreaValue;\n      // update\n      await this.modelAtom.update({\n        id: atomId,\n        atomAreaKey,\n        atomAreaValue,\n      });\n    }\n\n    async translateAreaScopeValue({ atomClass, atomAreaKey, atomAreaValue }) {\n      // adjust\n      const adjustRes = ctx.bean.areaScope.adjustKeyAndValue({ atomAreaKey, atomAreaValue });\n      atomAreaKey = adjustRes.atomAreaKey;\n      atomAreaValue = adjustRes.atomAreaValue;\n      if (!atomAreaKey || !atomAreaValue) return null;\n      // check if areaScopeMeta\n      const areaScopeMeta = ctx.bean.areaScope.getAreaScopeMeta({ atomClass, escape: false });\n      if (!areaScopeMeta) {\n        ctx.logger.info(`areaScope of atomClass not found: ${atomClass.module}:${atomClass.atomClassName}`);\n        return { error: ctx.text('Invalid') };\n      }\n      // atomClass\n      atomClass = await ctx.bean.atomClass.get(atomClass);\n      const _atomClass = await ctx.bean.atomClass.atomClass(atomClass);\n      // check if atomAreaKey equal\n      const atomAreaKeySchema = Object.keys(areaScopeMeta.schemas).join('|');\n      if (atomAreaKey !== atomAreaKeySchema) {\n        return { error: ctx.text('Invalid') };\n      }\n      // adjust again\n      atomAreaKey = atomAreaKey.split('|');\n      atomAreaValue = atomAreaValue.split('|');\n      // translate { title, error }\n      const _moduleInfo = mparse.parseInfo(atomClass.module);\n      const beanFullName = `${_moduleInfo.relativeName}.atom.${_atomClass.bean}`;\n      const res = await ctx.meta.util.executeBean({\n        beanModule: _moduleInfo.relativeName,\n        beanFullName,\n        context: { atomClass, areaScopeMeta, atomAreaKey, atomAreaValue },\n        fn: 'translateAreaScopeValue',\n      });\n      if (res) {\n        res.title = ctx.bean.areaScope.adjustValue({ atomAreaValue: res.title, trimEnd: true });\n        res.titleLocale = ctx.bean.areaScope.adjustValue({ atomAreaValue: res.titleLocale, trimEnd: true });\n      }\n      return res;\n    }\n  }\n  return Atom;\n};\n","const require3 = require('require3');\nconst mparse = require3('egg-born-mparse').default;\n\nmodule.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Atom {\n    async checkRightAction({ atom: { id }, action, stage, user, checkFlow, disableAuthOpenCheck }) {\n      const _atom = await this.modelAtom.get({ id });\n      if (!_atom) ctx.throw.module(moduleInfo.relativeName, 1002);\n      // atomClass\n      const atomClass = await ctx.bean.atomClass.get({ id: _atom.atomClassId });\n      if (!atomClass) ctx.throw.module(moduleInfo.relativeName, 1002);\n      // normal check\n      const res = await this._checkRightAction_normal({ _atom, atomClass, action, stage, user, checkFlow });\n      if (!res) return res;\n      // auth open check\n      if (!disableAuthOpenCheck) {\n        const resAuthOpenCheck = await ctx.bean.authOpen.checkRightAtomAction({ atomClass, action });\n        if (!resAuthOpenCheck) return null;\n      }\n      // ok\n      return res;\n    }\n\n    async _checkRightAction_normal({ _atom, atomClass, action, stage, user, checkFlow }) {\n      // atom bean\n      const _moduleInfo = mparse.parseInfo(atomClass.module);\n      const _atomClass = await ctx.bean.atomClass.atomClass(atomClass);\n      // parse action code\n      action = ctx.bean.atomAction.parseActionCode({\n        action,\n        atomClass,\n      });\n      // check right\n      const beanFullName = `${_moduleInfo.relativeName}.atom.${_atomClass.bean}`;\n      return await ctx.meta.util.executeBean({\n        beanModule: _moduleInfo.relativeName,\n        beanFullName,\n        context: { atom: _atom, atomClass, action, stage, user, checkFlow },\n        fn: 'checkRightAction',\n      });\n    }\n\n    async _checkRightAction({ atom, action, stage, user, checkFlow }) {\n      const _atom = atom;\n      if (!_atom) ctx.throw.module(moduleInfo.relativeName, 1002);\n      // adjust for simple\n      if (stage === 'draft' && _atom.atomSimple === 1) stage = 'formal';\n      // action.stage\n      if (\n        (stage === 'draft' && _atom.atomStage > 0) ||\n        ((stage === 'formal' || stage === 'history') && _atom.atomStage === 0)\n      ) {\n        return null;\n      }\n      // flow action\n      if (action >= 10000) {\n        const task = await this._checkRightAction_flowAction({ _atom, action, user });\n        if (!task) return null;\n        _atom.__task = task;\n        return _atom;\n      }\n      // atomClass\n      const atomClass = await ctx.bean.atomClass.get({ id: _atom.atomClassId });\n      // actionBase\n      const actionBase = ctx.bean.base.action({\n        module: atomClass.module,\n        atomClassName: atomClass.atomClassName,\n        code: action,\n      });\n      // if (!actionBase) throw new Error(`action not found: ${atomClass.module}:${atomClass.atomClassName}:${action}`);\n      if (!actionBase) {\n        if (action < 10000) {\n          await ctx.bean.atomAction.delete({ atomClassId: atomClass.id, code: action });\n        }\n        return null;\n      }\n      if (actionBase.stage) {\n        const stages = actionBase.stage.split(',');\n        if (!stages.some(item => ctx.constant.module(moduleInfo.relativeName).atom.stage[item] === _atom.atomStage)) {\n          return null;\n        }\n      }\n      // actionBase.enableOnStatic\n      if (_atom.atomStatic === 1 && !actionBase.enableOnStatic) {\n        return null;\n      }\n      // draft\n      if (_atom.atomStage === 0) {\n        return await this._checkRightAction_draft({ actionBase, _atom, action, user, checkFlow });\n      }\n      // not draft\n      return await this._checkRightAction_not_draft({ atomClass, actionBase, _atom, action, user, checkFlow });\n    }\n\n    async _checkRightAction_flowAction({ _atom, action, user }) {\n      // actionItem\n      const actionItem = await ctx.bean.atomAction.model.get({ atomClassId: _atom.atomClassId, code: action });\n      if (!actionItem) return null;\n      // flowTask\n      const task = await ctx.bean.flowTask.get({\n        options: {\n          where: {\n            'b.flowNodeDefId': actionItem.nodeDefId,\n            'c.flowDefKey': actionItem.flowKey,\n            'c.flowAtomId': _atom.id,\n          },\n          history: 0,\n        },\n        user,\n      });\n      return task;\n    }\n\n    async _checkRightAction_draft({ actionBase, _atom, action, user, checkFlow }) {\n      // _atomFormal\n      let _atomFormal;\n      if (_atom.atomIdFormal) {\n        _atomFormal = await this.modelAtom.get({ id: _atom.atomIdFormal });\n      }\n      // self\n      const bSelf = _atom.userIdUpdated === user.id;\n      // checkFlow\n      if (_atom.atomFlowId > 0 && checkFlow) {\n        const flow = await ctx.bean.flow.get({ flowId: _atom.atomFlowId, history: true, user });\n        if (flow) return _atom;\n      }\n      // 1. closed\n      if (_atom.atomClosed) {\n        // enable on 'self and write', not including 'delete'\n        if (bSelf && action === 3) {\n          // return _atom;\n          if (_atomFormal) {\n            return await this._checkRightAction({ atom: _atomFormal, action, stage: 'formal', user, checkFlow: false });\n          }\n        }\n        return null;\n      }\n      // 2. flow\n      const enableOnFlowing = actionBase.enableOnFlowing !== false;\n      const isFlowing = this._checkRightAction_isFlowing({ atom: _atom, atomAnother: _atomFormal });\n      if (!enableOnFlowing && isFlowing) return null;\n      // 3. self\n      if (bSelf) return _atom;\n      // others\n      return null;\n    }\n\n    _checkRightAction_isFlowing({ atom, atomAnother }) {\n      const a = atom && atom.atomFlowId > 0 && atom.atomClosed === 0;\n      const b = atomAnother && atomAnother.atomFlowId > 0 && atomAnother.atomClosed === 0;\n      return a || b;\n    }\n\n    async _checkRightAction_not_draft({ atomClass, actionBase, _atom, action, user, checkFlow }) {\n      // draft: must closed\n      let _atomDraft;\n      if (_atom.atomIdDraft) {\n        _atomDraft = await this.modelAtom.get({ id: _atom.atomIdDraft });\n      }\n      // check draft for ( action 3 + atomStage 1)\n      //   not handle for history\n      if (\n        action === 3 &&\n        _atom.atomStage === 1 &&\n        _atomDraft &&\n        !_atomDraft.atomClosed &&\n        _atomDraft.userIdUpdated === user.id\n      ) {\n        return await this._checkRightAction({ atom: _atomDraft, action, stage: 'draft', user, checkFlow: false });\n      }\n      // checkFlow\n      if (_atom.atomFlowId > 0 && !_atom.atomClosed && checkFlow) {\n        const flow = await ctx.bean.flow.get({ flowId: _atom.atomFlowId, history: true, user });\n        if (flow) return _atom;\n      }\n      // check enableOnOpened\n      const enableOnOpened = actionBase.enableOnOpened !== false;\n      if (_atomDraft && !_atomDraft.atomClosed && !enableOnOpened) return null;\n      // flow\n      const enableOnFlowing = actionBase.enableOnFlowing !== false;\n      const isFlowing = this._checkRightAction_isFlowing({ atom: _atom, atomAnother: _atomDraft });\n      if (!enableOnFlowing && isFlowing) return null;\n      // enable/disable\n      if (action === 6 && _atom.atomDisabled === 0) return null;\n      if (action === 7 && _atom.atomDisabled === 1) return null;\n      // workflowFormal\n      if (action === 16 && _atom.atomFlowId === 0) return null;\n      // forAtomUser\n      const forAtomUser = this._checkForAtomUser(atomClass);\n      // check formal/history\n      const sql = this.sqlProcedure.checkRightAction({\n        iid: ctx.instance.id,\n        userIdWho: user.id,\n        atomId: _atom.id,\n        action,\n        forAtomUser,\n      });\n      return await ctx.model.queryOne(sql);\n    }\n  }\n  return Atom;\n};\n","const require3 = require('require3');\nconst mparse = require3('egg-born-mparse').default;\n\nmodule.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Atom {\n    async closeDraft({ key }) {\n      const atomClass = await ctx.bean.atomClass.getByAtomId({ atomId: key.atomId });\n      if (!atomClass) ctx.throw.module(moduleInfo.relativeName, 1002);\n      if (!key.itemId) key.itemId = atomClass.itemId;\n      // atom bean\n      const _moduleInfo = mparse.parseInfo(atomClass.module);\n      const _atomClass = await ctx.bean.atomClass.atomClass(atomClass);\n      const beanFullName = `${_moduleInfo.relativeName}.atom.${_atomClass.bean}`;\n      // draft\n      const atomIdDraft = key.atomId;\n      const atomDraft = await this.modelAtom.get({ id: atomIdDraft });\n      const user = { id: atomDraft.userIdUpdated };\n      // ** update draft from formal\n      if (atomDraft.atomIdFormal) {\n        await this._copy({\n          target: 'draft',\n          srcKey: { atomId: atomDraft.atomIdFormal },\n          srcItem: null,\n          destKey: key,\n          user,\n        });\n        // update atomClosed\n        await this.modelAtom.update({\n          id: atomIdDraft,\n          atomClosed: 1,\n        });\n      } else {\n        // not delete draft if atomFlowId>0\n        if (atomDraft.atomFlowId > 0) {\n          // update atomClosed\n          await this.modelAtom.update({\n            id: atomIdDraft,\n            atomClosed: 1,\n            atomRevision: atomDraft.atomRevision - 1,\n          });\n        } else {\n          // delete\n          await ctx.meta.util.executeBean({\n            beanModule: _moduleInfo.relativeName,\n            beanFullName,\n            context: { atomClass, key, user },\n            fn: 'delete',\n          });\n        }\n      }\n      // notify\n      this._notifyDraftsDrafting(user, atomClass);\n      this._notifyDraftsFlowing(user, atomClass);\n    }\n\n    async openDraft({ key, user }) {\n      // atomClass\n      const atomClass = await ctx.bean.atomClass.getByAtomId({ atomId: key.atomId });\n      if (!atomClass) ctx.throw.module(moduleInfo.relativeName, 1002);\n      const _atomClass = await ctx.bean.atomClass.atomClass(atomClass);\n      // atom\n      let atom = await this.modelAtom.get({ id: key.atomId });\n      if (!atom) ctx.throw.module(moduleInfo.relativeName, 1002);\n      // check simple switch\n      atom = await this._checkSimpleSwitch({ atomClass, _atomClass, atom, user });\n      // open draft\n      let res;\n      if (atom.atomSimple) {\n        // simple\n        res = await this._openDraft_asSimple({ atomClass, _atomClass, atom, user });\n      } else {\n        // not simple\n        res = await this._openDraft_asSimpleZero({ atomClass, _atomClass, atom, user });\n      }\n      // ok\n      // get atom\n      const resData = res.draft || res.formal;\n      const keyDraft = resData.key;\n      atom = await this.modelAtom.get({ id: keyDraft.atomId });\n      atom.atomId = atom.id;\n      atom.module = atomClass.module;\n      atom.atomClassName = atomClass.atomClassName;\n      if (res.draft) {\n        res.draft.atom = atom;\n      } else {\n        res.formal.atom = atom;\n      }\n      return res;\n    }\n\n    async _openDraft_asSimple({ atom, user }) {\n      let keyFormal;\n      let changed = true;\n      // formal\n      if (atom.atomStage === 1) {\n        keyFormal = { atomId: atom.id, itemId: atom.itemId };\n        changed = false;\n      }\n      // history\n      if (atom.atomStage === 2) {\n        const atomIdFormal = atom.atomIdFormal;\n        keyFormal = { atomId: atomIdFormal };\n        // ** copy formal from history\n        keyFormal = await this._copy({\n          target: 'formal',\n          srcKey: { atomId: atom.id },\n          srcItem: null,\n          destKey: keyFormal,\n          user,\n        });\n        // update formal\n        await this.modelAtom.update({\n          id: atomIdFormal,\n          userIdUpdated: user.id,\n        });\n      }\n      // ok\n      return { formal: { key: keyFormal }, changed };\n    }\n\n    async _openDraft_asSimpleZero({ /* atomClass, _atomClass,*/ atom, user }) {\n      // draft\n      if (atom.atomStage === 0) {\n        return await this._openDraft_asSimpleZero_draft({ atom, user });\n      }\n      // formal\n      if (atom.atomStage === 1) {\n        return await this._openDraft_asSimpleZero_formal({ atom, user });\n      }\n      // history\n      if (atom.atomStage === 2) {\n        return await this._openDraft_asSimpleZero_history({ atom, user });\n      }\n      // never go here\n    }\n\n    async _openDraft_asSimpleZero_history({ atom, user }) {\n      let keyDraft;\n      let changed = true;\n      let atomDraft;\n      if (atom.atomIdDraft > 0) {\n        keyDraft = { atomId: atom.atomIdDraft };\n        // check if opened\n        atomDraft = await this.modelAtom.get({ id: keyDraft.atomId });\n        if (atomDraft.atomClosed === 0) {\n          changed = false;\n        }\n      } else {\n        // ** create draft from formal\n        keyDraft = await this._createDraftFromFormal({ atomIdFormal: atom.atomIdFormal, user });\n      }\n      // copy\n      if (changed) {\n        // hold atomRevision\n        if (!atomDraft) {\n          atomDraft = await this.modelAtom.get({ id: keyDraft.atomId });\n        }\n        const atomRevision = atomDraft.atomRevision;\n        // ** copy draft from history\n        keyDraft = await this._copy({\n          target: 'draft',\n          srcKey: { atomId: atom.id },\n          srcItem: null,\n          destKey: keyDraft,\n          user,\n        });\n        // open\n        await this._openDraft_update({\n          atomId: keyDraft.atomId,\n          atomRevision: atomRevision + 1,\n          user,\n        });\n      }\n      // ok\n      return { draft: { key: keyDraft }, changed };\n    }\n\n    async _openDraft_asSimpleZero_formal({ atom, user }) {\n      let keyDraft;\n      let changed = true;\n      if (atom.atomIdDraft > 0) {\n        keyDraft = { atomId: atom.atomIdDraft };\n        // check if opened\n        const _item = await this.modelAtom.get({ id: keyDraft.atomId });\n        if (_item.atomClosed === 0) {\n          changed = false;\n        } else {\n          // ** copy draft from formal\n          await this._copy({\n            target: 'draft',\n            srcKey: { atomId: atom.id },\n            srcItem: null,\n            destKey: keyDraft,\n            user,\n          });\n        }\n      } else {\n        // ** create draft from formal\n        keyDraft = await this._createDraftFromFormal({ atomIdFormal: atom.id, user });\n      }\n      // open\n      if (changed) {\n        await this._openDraft_update({\n          atomId: keyDraft.atomId,\n          atomRevision: atom.atomRevision + 1,\n          user,\n        });\n      }\n      // ok\n      return { draft: { key: keyDraft }, changed };\n    }\n\n    async _openDraft_asSimpleZero_draft({ atom, user }) {\n      let changed = true;\n      // key\n      const keyDraft = { atomId: atom.id, itemId: atom.itemId };\n      if (atom.atomClosed === 1) {\n        // ** copy draft from formal\n        if (atom.atomIdFormal > 0) {\n          await this._copy({\n            target: 'draft',\n            srcKey: { atomId: atom.atomIdFormal },\n            srcItem: null,\n            destKey: keyDraft,\n            user,\n          });\n        }\n        // open\n        await this._openDraft_update({\n          atomId: atom.id,\n          atomRevision: atom.atomRevision + 1,\n          user,\n        });\n      } else {\n        changed = false;\n      }\n      // ok\n      return { draft: { key: keyDraft }, changed };\n    }\n\n    async _openDraft_update({ atomId, atomRevision, user }) {\n      const atomClass = await ctx.bean.atomClass.getByAtomId({ atomId });\n      await this.modelAtom.update({\n        id: atomId,\n        atomFlowId: 0,\n        atomClosed: 0,\n        atomRevision,\n        userIdUpdated: user.id,\n      });\n      // notify\n      this._notifyDraftsDrafting(null, atomClass);\n    }\n\n    async _createDraftFromFormal({ atomIdFormal, user }) {\n      // ** create draft from formal\n      const keyDraft = await this._copy({\n        target: 'draft',\n        srcKey: { atomId: atomIdFormal },\n        srcItem: null,\n        destKey: null,\n        user,\n      });\n      // update history\n      await ctx.model.query(\n        `\n          update aAtom set atomIdDraft=?\n            where iid=? and deleted=0 and atomStage=2 and atomIdFormal=?\n        `,\n        [keyDraft.atomId, ctx.instance.id, atomIdFormal]\n      );\n      // update formal\n      await this.modelAtom.update({\n        id: atomIdFormal,\n        atomIdDraft: keyDraft.atomId,\n      });\n      // ok\n      return keyDraft;\n    }\n  }\n  return Atom;\n};\n","module.exports = ctx => {\n  // const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Atom {\n    async closeFormal({ key }) {\n      // update atomClosed\n      await this.modelAtom.update({\n        id: key.atomId,\n        atomClosed: 1,\n      });\n    }\n  }\n  return Atom;\n};\n","module.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Atom {\n    async checkRoleRightRead({ atom: { id }, roleId }) {\n      // not check draft\n      const atomId = id;\n      // atomClass\n      const atomClass = await ctx.bean.atomClass.getByAtomId({ atomId });\n      if (!atomClass) ctx.throw.module(moduleInfo.relativeName, 1002);\n      // forAtomUser\n      const forAtomUser = this._checkForAtomUser(atomClass);\n      // formal/history\n      const sql = this.sqlProcedure.checkRoleRightRead({\n        iid: ctx.instance.id,\n        roleIdWho: roleId,\n        atomId,\n        forAtomUser,\n      });\n      return await ctx.model.queryOne(sql);\n    }\n\n    async checkRightRead({ atom: { id }, user, checkFlow, disableAuthOpenCheck }) {\n      const _atom = await this.modelAtom.get({ id });\n      if (!_atom) ctx.throw.module(moduleInfo.relativeName, 1002);\n      // atomClass\n      const atomClass = await ctx.bean.atomClass.get({ id: _atom.atomClassId });\n      if (!atomClass) ctx.throw.module(moduleInfo.relativeName, 1002);\n      // normal check\n      const res = await this._checkRightRead_normal({ _atom, atomClass, user, checkFlow });\n      if (!res) return res;\n      // auth open check\n      if (!disableAuthOpenCheck) {\n        const resAuthOpenCheck = await ctx.bean.authOpen.checkRightAtomAction({ atomClass, action: 'read' });\n        if (!resAuthOpenCheck) return null;\n      }\n      // ok\n      return res;\n    }\n\n    async _checkRightRead_normal({ _atom, atomClass, user, checkFlow }) {\n      // draft: only userIdUpdated\n      const atomId = _atom.id;\n      // check right\n      if (_atom.atomStage === 0) {\n        // self\n        const bSelf = _atom.userIdUpdated === user.id;\n        // checkFlow\n        if (_atom.atomFlowId > 0 && checkFlow) {\n          const flow = await ctx.bean.flow.get({ flowId: _atom.atomFlowId, history: true, user });\n          if (!flow) return null;\n          return _atom;\n        }\n        // 1. closed\n        if (_atom.atomClosed) {\n          if (bSelf) return _atom;\n          return null;\n        }\n        // // 2. flow\n        // if (_atom.atomFlowId > 0) return null;\n        // 3. self\n        if (bSelf) return _atom;\n        // others\n        return null;\n      }\n      // forAtomUser\n      const forAtomUser = this._checkForAtomUser(atomClass);\n      // useAreaScope\n      const useAreaScope = this._checkUseAreaScope(atomClass);\n      // formal/history\n      const sql = this.sqlProcedure.checkRightRead({\n        iid: ctx.instance.id,\n        userIdWho: user.id,\n        atomId,\n        forAtomUser,\n        useAreaScope,\n      });\n      return await ctx.model.queryOne(sql);\n    }\n\n    // atomClass: { id, module, atomClassName, atomClassIdParent = 0 }\n    async checkRightActionBulk({ atomClass, action, stage, user }) {\n      atomClass = await ctx.bean.atomClass.get(atomClass);\n      // normal check\n      const res = await this._checkRightActionBulk_normal({ atomClass, action, stage, user });\n      if (!res) return res;\n      // auth open check\n      const resAuthOpenCheck = await ctx.bean.authOpen.checkRightAtomAction({ atomClass, action });\n      if (!resAuthOpenCheck) return null;\n      // ok\n      return res;\n    }\n\n    async _checkRightActionBulk_normal({ atomClass, action, stage, user }) {\n      // parse action code\n      action = ctx.bean.atomAction.parseActionCode({\n        action,\n        atomClass,\n      });\n      // check right\n      const sql = this.sqlProcedure.checkRightActionBulk({\n        iid: ctx.instance.id,\n        userIdWho: user.id,\n        atomClassId: atomClass.id,\n        action,\n      });\n      const actionRes = await ctx.model.queryOne(sql);\n      return await this.__checkRightActionBulk({ actionRes, stage, user });\n    }\n\n    async checkRightCreate({ atomClass, user }) {\n      return await this.checkRightActionBulk({ atomClass, action: 1, user });\n    }\n\n    // atomClass: { id, module, atomClassName, atomClassIdParent = 0 }\n    async checkRightCreateRole({ atomClass, roleIdOwner, user }) {\n      atomClass = await ctx.bean.atomClass.get(atomClass);\n      // normal check\n      const res = await this._checkRightCreateRole_normal({ atomClass, roleIdOwner, user });\n      if (!res) return res;\n      // auth open check\n      const resAuthOpenCheck = await ctx.bean.authOpen.checkRightAtomAction({ atomClass, action: 'create' });\n      if (!resAuthOpenCheck) return null;\n      // ok\n      return res;\n    }\n\n    async _checkRightCreateRole_normal({ atomClass, roleIdOwner, user }) {\n      if (!roleIdOwner) return null;\n      const sql = this.sqlProcedure.checkRightCreateRole({\n        iid: ctx.instance.id,\n        userIdWho: user.id,\n        atomClassId: atomClass.id,\n        roleIdOwner,\n      });\n      return await ctx.model.queryOne(sql);\n    }\n\n    // actions of atom\n    async actions({ key, basic, user }) {\n      // atomClass\n      const atomClass = await ctx.bean.atomClass.getByAtomId({ atomId: key.atomId });\n      if (!atomClass) ctx.throw.module(moduleInfo.relativeName, 1002);\n      // actions\n      const _basic = basic ? 'and a.code in (3,4)' : '';\n      const sql = `\n        select a.*,b.module,b.atomClassName,b.atomClassIdParent from aAtomAction a\n          left join aAtomClass b on a.atomClassId=b.id\n            where a.iid=? and a.deleted=0 and a.bulk=0 and a.atomClassId=? ${_basic}\n              order by a.code asc\n      `;\n      const actions = await ctx.model.query(sql, [ctx.instance.id, atomClass.id]);\n      // actions res\n      const actionsRes = [];\n      for (const action of actions) {\n        const res = await this.checkRightAction({ atom: { id: key.atomId }, action: action.code, user });\n        if (res) {\n          if (res.__task) {\n            action.__task = res.__task;\n          }\n          actionsRes.push(action);\n        }\n      }\n      return actionsRes;\n    }\n\n    // actionsBulk of atomClass\n    async actionsBulk({ atomClass, stage, user }) {\n      atomClass = await ctx.bean.atomClass.get(atomClass);\n      const atomClassId = atomClass.id;\n      const sql = this.sqlProcedure.checkRightActionBulk({\n        iid: ctx.instance.id,\n        userIdWho: user.id,\n        atomClassId,\n      });\n      const actionsRes = await ctx.model.query(sql);\n      const res = [];\n      for (const actionRes of actionsRes) {\n        const _res = await this.__checkRightActionBulk({ actionRes, stage, user });\n        if (_res) {\n          res.push(_res);\n        }\n      }\n      return res;\n    }\n\n    // preffered roles\n    async preferredRoles({ atomClass, user }) {\n      // atomClass\n      atomClass = await ctx.bean.atomClass.get(atomClass);\n      // normal check\n      const roles = await this._preferredRoles_normal({ atomClass, user });\n      if (!roles || roles.length === 0) return roles;\n      // auth open check\n      const resAuthOpenCheck = await ctx.bean.authOpen.checkRightAtomAction({ atomClass, action: 'create' });\n      if (!resAuthOpenCheck) return [];\n      // ok\n      return roles;\n    }\n\n    // preffered roles\n    async _preferredRoles_normal({ atomClass, user }) {\n      const roles = await ctx.model.query(\n        `select a.*,b.userId,c.roleName as roleNameWho from aViewRoleRightAtomClass a\n          inner join aUserRole b on a.roleIdWho=b.roleId\n          left join aRole c on a.roleIdWho=c.id\n          where a.iid=? and a.atomClassId=? and a.action=1 and b.userId=?\n          order by a.roleIdWho desc`,\n        [ctx.instance.id, atomClass.id, user.id]\n      );\n      return roles;\n    }\n\n    async preferredRole({ atomClass, user }) {\n      const roles = await this.preferredRoles({ atomClass, user });\n      return !roles || roles.length === 0 ? null : roles[0];\n    }\n\n    async preferredRoleId({ atomClass, user }) {\n      const role = await this.preferredRole({ atomClass, user });\n      return role ? role.roleIdWho : 0;\n    }\n  }\n\n  return Atom;\n};\n","const require3 = require('require3');\nconst mparse = require3('egg-born-mparse').default;\n\nmodule.exports = ctx => {\n  // const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Atom {\n    async _switchToSimple({ atomClass, _atomClass, atom, user }) {\n      let atomIdDraft;\n      let atomIdFormal;\n      if (atom.atomStage === 0) {\n        // is draft\n        atomIdDraft = atom.id;\n        atomIdFormal = atom.atomIdFormal;\n        if (!atomIdFormal) {\n          // formal/history not exists, so copy it\n          // create formal\n          const srcItem = await ctx.bean.atom.read({ key: { atomId: atomIdDraft }, user });\n          srcItem.atomSimple = 1; // important\n          const keyFormal = await this._copy({\n            target: 'formal',\n            srcKey: { atomId: atomIdDraft },\n            srcItem,\n            destKey: null,\n            options: null,\n            user,\n          });\n          atomIdFormal = keyFormal.atomId;\n        }\n      } else {\n        // is formal/history\n        atomIdDraft = atom.atomIdDraft;\n        atomIdFormal = atom.atomStage === 1 ? atom.id : atom.atomIdFormal;\n      }\n      // update history\n      await ctx.model.query(\n        `\n          update aAtom set atomSimple=1, atomIdDraft=0 \n            where iid=? and deleted=0 and atomStage=2 and atomIdFormal=?\n        `,\n        [ctx.instance.id, atomIdFormal]\n      );\n      // update formal\n      await this.modelAtom.update({\n        id: atomIdFormal,\n        atomSimple: 1,\n        atomIdDraft: 0,\n      });\n      // delete draft\n      if (atomIdDraft) {\n        const atomDraft = atom.atomStage === 0 ? atom : await this.modelAtom.get({ id: atomIdDraft });\n        const keyDraft = { atomId: atomDraft.id, itemId: atomDraft.itemId };\n        const _moduleInfo = mparse.parseInfo(atomClass.module);\n        const beanFullName = `${_moduleInfo.relativeName}.atom.${_atomClass.bean}`;\n        await ctx.meta.util.executeBean({\n          beanModule: _moduleInfo.relativeName,\n          beanFullName,\n          context: { atomClass, key: keyDraft, user },\n          fn: 'delete',\n        });\n        // notify to change draft stats\n        this._notifyDraftsDrafting(null, atomClass);\n      }\n      // ok\n      if (atom.atomStage === 0) {\n        // fetch formal\n        return await this.modelAtom.get({ id: atomIdFormal });\n      }\n      atom.atomSimple = 1;\n      return atom;\n    }\n\n    async _switchToSimpleZero({ /* atomClass, _atomClass,*/ atom, user }) {\n      const atomIdFormal = atom.atomStage === 1 ? atom.id : atom.atomIdFormal;\n      // update history's atomSimple\n      await ctx.model.query(\n        `\n          update aAtom set atomSimple=0\n            where iid=? and deleted=0 and atomStage=2 and atomIdFormal=?\n        `,\n        [ctx.instance.id, atomIdFormal]\n      );\n      // update formal's atomSimple\n      await this.modelAtom.update({\n        id: atomIdFormal,\n        atomSimple: 0,\n      });\n      // ** create draft from formal\n      const keyDraft = await this._createDraftFromFormal({ atomIdFormal, user });\n      // update draft's atomClosed\n      await this.modelAtom.update({\n        id: keyDraft.atomId,\n        atomClosed: 1,\n      });\n      // ok\n      atom.atomSimple = 0;\n      return atom;\n    }\n\n    async _checkSimpleSwitch({ atomClass, _atomClass, atom, user }) {\n      // the same mode\n      if (Boolean(atom.atomSimple) === Boolean(_atomClass.simple)) return atom;\n      // -> simple\n      if (_atomClass.simple) {\n        return await this._switchToSimple({ atomClass, _atomClass, atom, user });\n      }\n      // -> not simple\n      return await this._switchToSimpleZero({ atomClass, _atomClass, atom, user });\n    }\n  }\n  return Atom;\n};\n","module.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Atom {\n    async star({ key, atom: { star = 1 }, user }) {\n      // get\n      const atom = await this.get({ atomId: key.atomId });\n      if (atom.atomStage !== 1) ctx.throw.module(moduleInfo.relativeName, 1010);\n      // check if exists\n      let diff = 0;\n      const items = await this.modelAtomStar.select({\n        where: {\n          userId: user.id,\n          atomId: key.atomId,\n        },\n      });\n      const item = items[0];\n      if (items.length > 1) {\n        // remove others\n        for (let index = 1; index < items.length; index++) {\n          const _item = items[index];\n          await this.modelAtomStar.delete({\n            id: _item.id,\n          });\n        }\n      }\n      if (item && !star) {\n        diff = -1;\n        // delete\n        await this.modelAtomStar.delete({\n          id: item.id,\n        });\n      } else if (!item && star) {\n        diff = 1;\n        // new\n        await this.modelAtomStar.insert({\n          userId: user.id,\n          atomId: key.atomId,\n          star: 1,\n        });\n      }\n      // starCount\n      let starCount = atom.starCount;\n      if (diff !== 0) {\n        starCount += diff;\n        await this.modelAtom.update({\n          id: key.atomId,\n          starCount,\n        });\n      }\n      // notify\n      this._notifyStars();\n      // ok\n      return { star, starCount };\n    }\n\n    async labels({ key, atom: { labels = null }, user }) {\n      // get\n      const atom = await this.get({ atomId: key.atomId });\n      if (atom.atomStage !== 1) ctx.throw.module(moduleInfo.relativeName, 1010);\n      // atomLabel\n      await this._labels_atomLabel({ atomId: key.atomId, labels, user });\n      // atomLabelRef\n      await this._labels_atomLabelRef({ atomId: key.atomId, labels, user });\n      // notify\n      this._notifyLabels();\n    }\n\n    async _labels_atomLabel({ atomId, labels, user }) {\n      // delete\n      if (!labels || labels.length === 0) {\n        await this.modelAtomLabel.delete({\n          userId: user.id,\n          atomId,\n        });\n        return;\n      }\n      // insert/update\n      const items = await this.modelAtomLabel.select({\n        where: {\n          userId: user.id,\n          atomId,\n        },\n      });\n      const item = items[0];\n      if (items.length > 1) {\n        // remove others\n        for (let index = 1; index < items.length; index++) {\n          const _item = items[index];\n          await this.modelAtomLabel.delete({\n            id: _item.id,\n          });\n        }\n      }\n      // update\n      if (item) {\n        // update\n        await this.modelAtomLabel.update({\n          id: item.id,\n          labels: JSON.stringify(labels),\n        });\n      } else {\n        // create\n        await this.modelAtomLabel.insert({\n          userId: user.id,\n          atomId,\n          labels: JSON.stringify(labels),\n        });\n      }\n    }\n\n    async _labels_atomLabelRef({ atomId, labels, user }) {\n      // force delete\n      await this.modelAtomLabelRef.delete({\n        userId: user.id,\n        atomId,\n      });\n      // new\n      if (labels && labels.length > 0) {\n        for (const labelId of labels) {\n          await this.modelAtomLabelRef.insert({\n            userId: user.id,\n            atomId,\n            labelId,\n          });\n        }\n      }\n    }\n\n    async getLabels({ user }) {\n      const data = await this.modelLabel.get({\n        userId: user.id,\n      });\n      let labels = data ? JSON.parse(data.labels) : null;\n      if (!labels || Object.keys(labels).length === 0) {\n        // append default labels\n        labels = {\n          1: {\n            color: 'red',\n            text: ctx.text('Red'),\n          },\n          2: {\n            color: 'orange',\n            text: ctx.text('Orange'),\n          },\n        };\n        await this.setLabels({ labels, user });\n      }\n      return labels;\n    }\n\n    async setLabels({ labels, user }) {\n      const labels2 = JSON.stringify(labels);\n      const res = await this.modelLabel.get({\n        userId: user.id,\n      });\n      if (!res) {\n        await this.modelLabel.insert({\n          userId: user.id,\n          labels: labels2,\n        });\n      } else {\n        await this.modelLabel.update({\n          id: res.id,\n          labels: labels2,\n        });\n      }\n    }\n  }\n  return Atom;\n};\n","const require3 = require('require3');\nconst mparse = require3('egg-born-mparse').default;\n\nmodule.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Atom {\n    async submit({ key, options, user }) {\n      const atomClass = await ctx.bean.atomClass.getByAtomId({ atomId: key.atomId });\n      if (!atomClass) ctx.throw.module(moduleInfo.relativeName, 1002);\n      if (!key.itemId) key.itemId = atomClass.itemId;\n      // atom\n      const _atom = await this.modelAtom.get({ id: key.atomId });\n      if (_atom.atomSimple === 1 && _atom.atomStage === 1) {\n        // if simple, just return formal, so as for compatible with not simple\n        return { formal: { key } };\n      }\n      // atom bean\n      const _moduleInfo = mparse.parseInfo(atomClass.module);\n      const _atomClass = await ctx.bean.atomClass.atomClass(atomClass);\n      const beanFullName = `${_moduleInfo.relativeName}.atom.${_atomClass.bean}`;\n      return await ctx.meta.util.executeBean({\n        beanModule: _moduleInfo.relativeName,\n        beanFullName,\n        context: { atomClass, key, options, user },\n        fn: 'submit',\n      });\n    }\n\n    async _submitBase({ /* atomClass,*/ key, options, user }) {\n      // ignoreFlow only used by draft\n      const ignoreFlow = options && options.ignoreFlow;\n      const _atom = await ctx.bean.atom.read({ key, user: null });\n      // check atom flow\n      if (!ignoreFlow) {\n        const _nodeBaseBean = ctx.bean._newBean('a-flowtask.flow.node.startEventAtom');\n        const flowInstance = await _nodeBaseBean._match({ atom: _atom, userId: _atom.userIdUpdated });\n        if (flowInstance) {\n          // set atom flow\n          const atomFlowId = flowInstance.context._flowId;\n          await ctx.bean.atom.flow({ key, atom: { atomFlowId } });\n          // ok\n          return {\n            flow: { id: atomFlowId },\n            draft: {\n              key,\n              atom: {\n                atomId: _atom.atomId,\n                module: _atom.module,\n                atomClassName: _atom.atomClassName,\n                atomStage: _atom.atomStage,\n              },\n            },\n          };\n        }\n      }\n      return await this._submitDirect({ key, item: _atom, options, user });\n    }\n\n    async _submitDirect({ key, item, options, user }) {\n      // { formal }\n      let result = await this._submitDirect_formal({ key, item, options, user });\n      // check atom flow\n      key = result.formal.key;\n      item = { ...item, id: key.itemId, atomId: key.atomId, itemId: key.itemId, atomStage: 1 };\n      const _nodeBaseBean = ctx.bean._newBean('a-flowtask.flow.node.startEventAtom');\n      const flowInstance = await _nodeBaseBean._match({ atom: item, userId: item.userIdUpdated });\n      if (flowInstance) {\n        // set atom flow\n        const atomFlowId = flowInstance.context._flowId;\n        await ctx.bean.atom.flow({ key, atom: { atomFlowId } });\n        result = {\n          flow: { id: atomFlowId },\n          formal: result.formal,\n        };\n      }\n      // ok\n      return result;\n    }\n\n    async _submitDirect_formal({ key, item, options, user }) {\n      // atomClass\n      const atomClass = await ctx.bean.atomClass.getByAtomId({ atomId: key.atomId });\n      if (!atomClass) ctx.throw.module(moduleInfo.relativeName, 1002);\n      const atomClassBase = await ctx.bean.atomClass.atomClass(atomClass);\n      // formal -> history\n      if (item.atomIdFormal) {\n        if (atomClassBase.history !== false) {\n          await this._copy({\n            target: 'history',\n            srcKey: { atomId: item.atomIdFormal },\n            srcItem: null,\n            destKey: null,\n            options,\n            user,\n          });\n        }\n      }\n      // draft -> formal\n      const keyFormal = await this._copy({\n        target: 'formal',\n        srcKey: { atomId: item.atomId },\n        srcItem: item,\n        destKey: item.atomIdFormal ? { atomId: item.atomIdFormal } : null,\n        options,\n        user,\n      });\n      // update draft\n      await this.modelAtom.update({\n        id: item.atomId,\n        atomClosed: 1,\n        atomIdFormal: keyFormal.atomId,\n      });\n      // notify\n      this._notifyDraftsDrafting(user, atomClass);\n      if (item.atomFlowId > 0) {\n        this._notifyDraftsFlowing(user, atomClass);\n      }\n      // get formal atom\n      const atomFormal = await this.modelAtom.get({ id: keyFormal.atomId });\n      atomFormal.atomId = atomFormal.id;\n      atomFormal.module = atomClass.module;\n      atomFormal.atomClassName = atomClass.atomClassName;\n      // ok\n      return { formal: { key: keyFormal, atom: atomFormal } };\n    }\n  }\n  return Atom;\n};\n","const atomAction_base = require('./bean.atomAction/bean.atomAction_base.js');\nconst atomAction_flow = require('./bean.atomAction/bean.atomAction_flow.js');\n\nmodule.exports = ctx => {\n  return ctx.app.meta.util.mixinClasses(\n    atomAction_base,\n    [\n      atomAction_flow, //\n    ],\n    ctx\n  );\n};\n","module.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class AtomAction extends ctx.app.meta.BeanModuleBase {\n    constructor(moduleName) {\n      super(ctx, 'atomAction');\n      this.moduleName = moduleName || ctx.module.info.relativeName;\n    }\n\n    get model() {\n      return ctx.model.module(moduleInfo.relativeName).atomAction;\n    }\n\n    async delete({ atomClassId, code }) {\n      // delete roleRight\n      await ctx.bean.role.deleteRoleRightByAction({\n        atomClassId,\n        action: code,\n      });\n      // delete\n      await this.model.delete({ atomClassId, code });\n    }\n\n    async update(data) {\n      await this.model.update(data);\n    }\n\n    async get({ id, atomClassId, code }) {\n      const data = id ? { id } : { atomClassId, code };\n      const res = await this.model.get(data);\n      if (res) return res;\n      // lock\n      return await ctx.meta.util.lock({\n        resource: `${moduleInfo.relativeName}.atomAction.register`,\n        fn: async () => {\n          return await ctx.meta.util.executeBeanIsolate({\n            beanModule: moduleInfo.relativeName,\n            beanFullName: 'atomAction',\n            context: { atomClassId, code },\n            fn: '_registerLock',\n          });\n        },\n      });\n    }\n\n    parseActionCode({ action, atomClass }) {\n      // is number\n      if (!isNaN(action)) return parseInt(action);\n      // add role right\n      const actionCode = ctx.constant.module('a-base').atom.action[action];\n      if (actionCode) return actionCode;\n      // atomClass\n      if (!atomClass) throw new Error(`should specify the atomClass of action: ${action}`);\n      const actions = ctx.bean.base.actions();\n      const _action = actions[atomClass.module][atomClass.atomClassName][action];\n      if (!_action) throw new Error(`atom action not found: ${atomClass.module}:${atomClass.atomClassName}.${action}`);\n      return _action.code;\n    }\n\n    async _registerLock({ atomClassId, code }) {\n      return await this._registerLock_inner({ atomClassId, code });\n    }\n\n    async _registerLock_inner({ atomClassId, code }) {\n      // get\n      const res = await this.model.get({ atomClassId, code });\n      if (res) return res;\n      const atomClass = await ctx.bean.atomClass.get({ id: atomClassId });\n      const action = ctx.bean.base.action({ module: atomClass.module, atomClassName: atomClass.atomClassName, code });\n      const data = {\n        atomClassId,\n        code,\n        name: action.name,\n        bulk: action.bulk || 0,\n      };\n      // insert\n      const res2 = await this.model.insert(data);\n      data.id = res2.insertId;\n      return data;\n    }\n  }\n\n  return AtomAction;\n};\n","module.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class AtomAction {\n    async selectFlowActions({ atomClass, flowKey }) {\n      atomClass = await ctx.bean.atomClass.get(atomClass);\n      return await this.model.select({\n        where: {\n          atomClassId: atomClass.id,\n          flowKey,\n        },\n      });\n    }\n\n    async getByModeFlow({ id, atomClassId, flowKey, nodeDefId, nodeDefName }) {\n      const data = id ? { id } : { atomClassId, flowKey, nodeDefId };\n      const res = await this.model.get(data);\n      if (res) return res;\n      // lock\n      return await ctx.meta.util.lock({\n        resource: `${moduleInfo.relativeName}.atomAction.register`,\n        fn: async () => {\n          return await ctx.meta.util.executeBeanIsolate({\n            beanModule: moduleInfo.relativeName,\n            beanFullName: 'atomAction',\n            context: { atomClassId, flowKey, nodeDefId, nodeDefName },\n            fn: '_registerLockByModeFlow',\n          });\n        },\n      });\n    }\n\n    async _registerLockByModeFlow({ atomClassId, flowKey, nodeDefId, nodeDefName }) {\n      return await this._registerLockByModeFlow_inner({ atomClassId, flowKey, nodeDefId, nodeDefName });\n    }\n\n    async _registerLockByModeFlow_inner({ atomClassId, flowKey, nodeDefId, nodeDefName }) {\n      // get\n      const res = await this.model.get({ atomClassId, flowKey, nodeDefId });\n      if (res) return res;\n      // code\n      const sequence = ctx.bean.sequence.module(moduleInfo.relativeName);\n      const flowActionCode = await sequence.next('flowAction');\n      const data = {\n        atomClassId,\n        code: flowActionCode,\n        name: nodeDefName,\n        bulk: 0,\n        actionMode: 1,\n        flowKey,\n        nodeDefId,\n      };\n      // insert\n      const res2 = await this.model.insert(data);\n      data.id = res2.insertId;\n      // role right\n      const roleRights = [\n        {\n          roleName: 'template.system',\n          flowKey,\n          nodeDefId,\n          nodeDefName,\n          scopeNames: [],\n        },\n      ];\n      await ctx.bean.role.addRoleRightBatchByModeFlow({\n        atomClassId,\n        roleRights,\n      });\n      // ok\n      return data;\n    }\n  }\n\n  return AtomAction;\n};\n","const atomBase_0 = require('./bean.atomBase/bean.atomBase_0.js');\nconst atomBase_1 = require('./bean.atomBase/bean.atomBase_1.js');\nconst atomBase_read = require('./bean.atomBase/bean.atomBase_read.js');\nconst atomBase_write = require('./bean.atomBase/bean.atomBase_write.js');\n\nmodule.exports = app => {\n  return app.meta.util.mixinClasses(\n    atomBase_0,\n    [\n      //\n      atomBase_1,\n      atomBase_read,\n      atomBase_write,\n    ],\n    app\n  );\n};\n","const require3 = require('require3');\nconst ExcelJS = require3('exceljs');\n\nmodule.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class AtomBase extends app.meta.BeanBase {\n    async create({ atomClass, item, options, user }) {\n      // atomClass\n      const atomClassBase = await this.ctx.bean.atomClass.atomClass(atomClass);\n      // atomName\n      if (!item.atomName) {\n        // draftId\n        const sequence = this.ctx.bean.sequence.module(moduleInfo.relativeName);\n        const draftId = await sequence.next('draft');\n        if (atomClass.module === 'a-base' && atomClass.atomClassName === 'user') {\n          item.atomName = `${this.ctx.text('User')}__${draftId}`;\n        } else {\n          item.atomName = `${this.ctx.text('Draft')}-${draftId}`;\n        }\n      }\n      // atomStaticKey\n      if (!item.atomStaticKey) {\n        item.atomStaticKey = this.ctx.bean.util.uuidv4();\n      }\n      // atomSimple\n      if (atomClassBase.simple) {\n        item.atomSimple = 1;\n        item.atomStage = 1;\n      } else {\n        item.atomSimple = 0;\n        item.atomStage = 0;\n      }\n      // roleIdOwner\n      const bAtomClassRole = atomClass && atomClass.module === 'a-base' && atomClass.atomClassName === 'role';\n      if (!item.roleIdOwner && !bAtomClassRole) {\n        let roleId;\n        if (options.preferredRole) {\n          roleId = await this.ctx.bean.atom.preferredRoleId({ atomClass, user });\n          if (!roleId) this.ctx.throw(403);\n        } else {\n          const roleName = 'authenticated.builtIn';\n          const role = await this.ctx.bean.role.parseRoleName({ roleName });\n          roleId = role.id;\n        }\n        item.roleIdOwner = roleId;\n      }\n      // atomCategoryId\n      if (item.atomCategoryId && typeof item.atomCategoryId === 'string') {\n        const category = await this.ctx.bean.category.parseCategoryName({\n          atomClass,\n          language: item.atomLanguage,\n          categoryName: item.atomCategoryId,\n          force: false, // not force, because this api maybe called by normal user\n        });\n        if (!category) {\n          throw new Error(`Category not found: ${item.atomCategoryId}`);\n        }\n        item.atomCategoryId = category.id;\n      }\n      // add\n      const atomId = await this.ctx.bean.atom._add({ atomClass, atom: item, user });\n      return { atomId };\n    }\n\n    async selectBefore(/* { atomClass, options, user }*/) {\n      // donothing\n    }\n\n    async select({ atomClass, options, items, user }) {\n      if (items.length === 0) return;\n      // atomClass\n      const atomClassBase = atomClass ? await this.ctx.bean.atomClass.atomClass(atomClass) : null;\n      // dict translate\n      if (atomClassBase) {\n        for (const item of items) {\n          await this._dictTranslate({ item, atomClassBase });\n        }\n      }\n      // revision\n      if (options.stage === 'history') {\n        for (const item of items) {\n          this._appendRevisionToHistory({ item });\n        }\n      }\n      // flow\n      if (options.stage === 'draft') {\n        for (const item of items) {\n          if (item.flowNodeNameCurrent) {\n            item.flowNodeNameCurrentLocale = this.ctx.text(item.flowNodeNameCurrent);\n          }\n        }\n      }\n      // atomLanguage/atomDisabled\n      for (const item of items) {\n        if (item.atomLanguage) {\n          item.atomLanguageLocale = this.ctx.text(item.atomLanguage);\n        }\n        await this._atomDisabledTranslate({ atomClass, item });\n      }\n      // atomState\n      for (const item of items) {\n        const atomState = item.atomState;\n        if (atomState !== undefined && atomState !== null) {\n          await this._atomStateTranslate({ item });\n        }\n      }\n      // userIds\n      if (atomClassBase) {\n        await this._userIdsTranslate({ items, atomClassBase });\n      }\n    }\n\n    async delete({ atomClass, key, options, user }) {\n      // atomClass\n      const atomClassBase = await this.ctx.bean.atomClass.atomClass(atomClass);\n      if (atomClassBase.tag) {\n        const _atomOld = await this.ctx.bean.atom.modelAtom.get({ id: key.atomId });\n        if (_atomOld.atomTags) {\n          // stage\n          const atomStage = _atomOld.atomStage;\n          await this.ctx.bean.tag.deleteTagRefs({ atomId: key.atomId });\n          if (atomStage === 1) {\n            await this.ctx.bean.tag.setTagAtomCount({ tagsNew: null, tagsOld: _atomOld.atomTags });\n          }\n        }\n      }\n      // delete\n      await this.ctx.bean.atom._delete({\n        atomClass,\n        atom: { id: key.atomId },\n        user,\n      });\n    }\n\n    async submit({ atomClass, key, options, user }) {\n      return await this.ctx.bean.atom._submitBase({ atomClass, key, options, user });\n    }\n\n    async enable({ /* atomClass,*/ key /* , user*/ }) {\n      await this.ctx.bean.atom.modelAtom.update({\n        id: key.atomId,\n        atomDisabled: 0,\n      });\n    }\n\n    async disable({ /* atomClass,*/ key /* , user*/ }) {\n      await this.ctx.bean.atom.modelAtom.update({\n        id: key.atomId,\n        atomDisabled: 1,\n      });\n    }\n\n    async copy(/* { atomClass, target, srcKey, srcItem, destKey, destItem, user }*/) {\n      // do nothing\n    }\n\n    async exportBulk({ /* atomClass, options,*/ fields, items /* , user*/ }) {\n      // workbook\n      const workbook = new ExcelJS.Workbook();\n      workbook.creator = 'CabloyJS';\n      workbook.created = new Date();\n      // worksheet\n      const worksheet = workbook.addWorksheet('Sheet');\n      // columns\n      const columns = [];\n      for (const field of fields) {\n        columns.push({\n          header: this.ctx.text(field.title),\n          key: field.name,\n        });\n      }\n      worksheet.columns = columns;\n      // rows\n      const rows = [];\n      for (const item of items) {\n        const row = {};\n        for (const field of fields) {\n          row[field.name] = item[field.name];\n        }\n        rows.push(row);\n      }\n      worksheet.addRows(rows);\n      // write\n      const buffer = await workbook.xlsx.writeBuffer();\n      // meta\n      const meta = {\n        filename: `${this.ctx.bean.util.now()}.xlsx`,\n        encoding: '7bit',\n        mime: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n        fields: {\n          mode: 2,\n          flag: 'atom-bulk-export',\n        },\n      };\n      // ok\n      return { type: 'buffer', data: buffer, meta };\n    }\n\n    async importBulk(/* {  atomClass, options, file , user }*/) {\n      // do nothing\n    }\n\n    async checkRightAction({ atom, atomClass, action, stage, user, checkFlow }) {\n      return await this.ctx.bean.atom._checkRightAction({ atom, atomClass, action, stage, user, checkFlow });\n    }\n\n    async translateAreaScopeValue({ /* atomClass,*/ areaScopeMeta, atomAreaKey, atomAreaValue }) {\n      const count = atomAreaKey.length;\n      const title = [];\n      const titleLocale = [];\n      for (let i = 0; i < count; i++) {\n        const key = atomAreaKey[i];\n        const code = atomAreaValue[i];\n        const schema = areaScopeMeta.schemas[key];\n        const dictItem = await this.ctx.bean.dict.findItem({\n          dictKey: schema.ebParams.dictKey,\n          code,\n          options: { separator: schema.ebParams.separator },\n        });\n        title.push(dictItem ? dictItem.titleFull : '');\n        titleLocale.push(dictItem ? dictItem.titleLocaleFull : '');\n      }\n      // ok\n      return { title, titleLocale };\n      // return { error: this.ctx.text('NotImplemented') };\n    }\n\n    async prepareStaticItem({ moduleName, atomClass, item, register }) {\n      return await this.ctx.bean.atomStatic._adjustItem_base({ moduleName, atomClass, item, register });\n    }\n  }\n  return AtomBase;\n};\n","module.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class AtomBase {\n    get modelResourceRole() {\n      return this.ctx.model.module(moduleInfo.relativeName).resourceRole;\n    }\n\n    _ensureItemMeta(item) {\n      if (!item) return null;\n      if (!item._meta) item._meta = {};\n      if (!item._meta.flags) item._meta.flags = [];\n      return item._meta;\n    }\n\n    _appendRevisionToHistory({ item }) {\n      if (!item) return;\n      if (!item.atomRevision || item.atomStage !== 2) return;\n      const meta = this._ensureItemMeta(item);\n      meta.flags.push(`Rev.${item.atomRevision}`);\n    }\n\n    async _atomStateTranslate({ item }) {\n      // atomState\n      const atomState = item.atomState;\n      if (atomState === undefined || atomState === null) return;\n      // atomClass\n      const atomClassBase = this.ctx.bean.base.atomClass({\n        module: item.module,\n        atomClassName: item.atomClassName,\n      });\n      // dictKey\n      const atomStage = item.atomStage === 0 ? 'draft' : item.atomStage === 1 ? 'formal' : null;\n      if (!atomStage) return;\n      const dictKey = this.ctx.bean.util.getProperty(atomClassBase, `dict.states.${atomStage}.dictKey`);\n      if (!dictKey) return;\n      // dictItem\n      const dictItem = await this.ctx.bean.dict.findItem({\n        dictKey,\n        code: atomState,\n      });\n      if (!dictItem) return;\n      // res\n      item._atomStateTitle = dictItem.titleFull;\n      item._atomStateTitleLocale = dictItem.titleLocaleFull;\n    }\n\n    async _dictTranslate({ item, atomClassBase }) {\n      const fields = atomClassBase.dict && atomClassBase.dict.fields;\n      for (const fieldName in fields) {\n        const field = fields[fieldName];\n        const code = item[fieldName];\n        const _item = await this._dictTranslateField({ fieldName, code, field });\n        if (_item) {\n          Object.assign(item, _item);\n        }\n      }\n    }\n\n    async _dictTranslateField({ fieldName, code, field }) {\n      if (field.translate === false) return null;\n      if (code === undefined) return null;\n      //\n      const dictItem = await this.ctx.bean.dict.findItem({\n        dictKey: field.dictKey,\n        code,\n        options: {\n          separator: field.separator,\n        },\n      });\n      if (!dictItem) return null;\n      // res\n      const _item = {};\n      _item[`_${fieldName}Title`] = dictItem.titleFull;\n      _item[`_${fieldName}TitleLocale`] = dictItem.titleLocaleFull;\n      if (dictItem.options && dictItem.options.icon) {\n        _item[`_${fieldName}Options`] = {\n          icon: dictItem.options.icon,\n        };\n      }\n      return _item;\n    }\n\n    async _atomDisabledTranslate({ atomClass, item }) {\n      //\n      if (!item.atomDisabled) return;\n      //\n      if (!atomClass) {\n        atomClass = await this.ctx.bean.atomClass.get({ id: item.atomClassId });\n      }\n      //\n      const actionBase = this.ctx.bean.base.action({\n        module: atomClass.module,\n        atomClassName: atomClass.atomClassName,\n        name: 'disable',\n      });\n      const title = this.ctx.bean.util.getProperty(actionBase, 'params.atomDisabled.title') || 'Disabled';\n      const meta = this._ensureItemMeta(item);\n      meta.flags.push(this.ctx.text(title));\n    }\n\n    async _userIdsTranslate({ items, item, atomClassBase }) {\n      // userIds\n      if (!atomClassBase.userIds) return;\n      let userIdsKey = atomClassBase.userIds;\n      if (!Array.isArray(userIdsKey)) {\n        userIdsKey = userIdsKey.split(',');\n      }\n      // items\n      if (item) {\n        items = [item];\n      }\n      // userIdsWant\n      const userIdsWantMap = {};\n      for (item of items) {\n        for (const userIdKey of userIdsKey) {\n          const userId = item[userIdKey];\n          if (userId) {\n            userIdsWantMap[userId] = true;\n          }\n        }\n      }\n      const userIdsWant = Object.keys(userIdsWantMap).map(userId => parseInt(userId));\n      if (userIdsWant.length === 0) return;\n      // select\n      const users = await this.ctx.bean.user.model.select({\n        where: {\n          id: userIdsWant,\n        },\n      });\n      // set\n      for (item of items) {\n        for (const userIdKey of userIdsKey) {\n          const userId = item[userIdKey];\n          if (!userId) continue;\n          const user = users.find(item => item.id === userId);\n          if (!user) continue;\n          item[`_${userIdKey}Name`] = user.userName;\n          item[`_${userIdKey}Avatar`] = user.avatar;\n        }\n      }\n    }\n  }\n\n  return AtomBase;\n};\n","const __itemBasicFields = ['id', 'iid', 'atomId', 'itemId', 'atomStage'];\n\nmodule.exports = app => {\n  // const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class AtomBase {\n    async read({ atomClass, options, key, user }) {\n      // get\n      let item = await this.ctx.bean.atom._get({ atomClass, options, key, mode: 'full', user });\n      if (!item) return item;\n      // validate\n      item = await this._readValidate({ atomClass, item, options, user });\n      // atomClass\n      const atomClassBase = await this.ctx.bean.atomClass.atomClass(atomClass);\n      // dict translate\n      await this._dictTranslate({ item, atomClassBase });\n      // revision\n      this._appendRevisionToHistory({ item });\n      // flow\n      if (item.flowNodeNameCurrent) {\n        item.flowNodeNameCurrentLocale = this.ctx.text(item.flowNodeNameCurrent);\n      }\n      // atomLanguage\n      if (item.atomLanguage) {\n        item.atomLanguageLocale = this.ctx.text(item.atomLanguage);\n      }\n      // atomDisabled\n      await this._atomDisabledTranslate({ atomClass, item });\n      // atomState\n      const atomState = item.atomState;\n      if (atomState !== undefined && atomState !== null) {\n        await this._atomStateTranslate({ item });\n      }\n      // userIds\n      await this._userIdsTranslate({ item, atomClassBase });\n      // ok\n      return item;\n    }\n\n    async _readValidate({ atomClass, item, options, user }) {\n      // schema\n      const schema = options && options.schema;\n      if (!schema) return item;\n      // itemHold\n      const itemHold = {};\n      for (const field of __itemBasicFields) {\n        if (item[field] !== undefined) {\n          itemHold[field] = item[field];\n        }\n      }\n      // itemBusiness\n      const itemBusiness = {};\n      for (const field of Object.keys(item)) {\n        if (field === 'itemId') break;\n        itemBusiness[field] = item[field];\n        delete item[field];\n      }\n      // filterOptions\n      const filterOptions = {\n        ignoreRules: true,\n      };\n      await this.ctx.bean.validation._validate({ atomClass, data: itemBusiness, options, filterOptions });\n      // assign\n      item = Object.assign({}, itemHold, itemBusiness, item);\n      return item;\n    }\n  }\n\n  return AtomBase;\n};\n","// maybe modified by user\nconst __atomBasicFields = [\n  'atomName', //\n  'atomLanguage',\n  'atomCategoryId',\n  'atomTags',\n  'allowComment',\n  // 'atomStatic',\n  // 'atomStaticKey',\n  // 'atomRevision',\n];\nconst __itemBasicFields = ['id', 'iid', 'atomId', 'itemId', 'atomStage'];\n\nmodule.exports = app => {\n  // const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class AtomBase {\n    async write({ atomClass, target, key, item, options, user }) {\n      if (!item) return;\n      // force delete atomDisabled\n      delete item.atomDisabled;\n      // simple/stage\n      const atomSimple = item.atomSimple;\n      const atomStage = item.atomStage;\n      // atomClass\n      const atomClassBase = await this.ctx.bean.atomClass.atomClass(atomClass);\n      let _atomOld;\n      if (atomClassBase.tag && item.atomTags !== undefined && atomStage === 1) {\n        _atomOld = await this.ctx.bean.atom.modelAtom.get({ id: key.atomId });\n      }\n      // validate\n      await this._writeValidate({ atomClass, target, key, item, options, user });\n      // --- item is filtered by validation\n      // write atom\n      await this._writeAtom({ key, item, user, atomSimple, atomStage });\n      // tag\n      if (atomClassBase.tag && item.atomTags !== undefined) {\n        await this.ctx.bean.tag.updateTagRefs({ atomId: key.atomId, atomTags: item.atomTags });\n        if (atomStage === 1) {\n          await this.ctx.bean.tag.setTagAtomCount({ tagsNew: item.atomTags, tagsOld: _atomOld.atomTags });\n        }\n      }\n      // handle resource\n      await this._writeHandleResource({ atomClass, atomClassBase, key, item });\n    }\n\n    async _writeValidate({ atomClass, target, key, item, options, user }) {\n      // options\n      const ignoreValidate = options && options.ignoreValidate;\n      if (!ignoreValidate) {\n        // itemHold\n        const itemHold = {};\n        for (const field of __itemBasicFields) {\n          if (item[field] !== undefined) {\n            itemHold[field] = item[field];\n          }\n        }\n        // filterOptions\n        const filterOptions = this._writeValidate_prepareFilterOptions({ target });\n        // validate\n        this.ctx.bean.util.setProperty(this.ctx, 'meta.validateHost', {\n          atomClass,\n          key,\n          options,\n          user,\n        });\n        await this.ctx.bean.validation._validate({ atomClass, data: item, options, filterOptions });\n        this.ctx.bean.util.setProperty(this.ctx, 'meta.validateHost', null);\n        // itemHold\n        for (const field of __itemBasicFields) {\n          if (item[field] === undefined && itemHold[field] !== undefined) {\n            item[field] = itemHold[field];\n          }\n        }\n      }\n      // append itemId\n      //   why always set value here: resource, data.id!==key.itemId\n      item.id = key.itemId;\n    }\n\n    _writeValidate_prepareFilterOptions({ target }) {\n      const filterOptions = {};\n      if (!target) {\n        // just save\n        filterOptions.type = true;\n        filterOptions.ebReadOnly = true;\n      } else if (target === 'clone') {\n        // clone\n        filterOptions.type = true;\n        filterOptions.ebReadOnly = true;\n        filterOptions.ignoreRules = true;\n      } else {\n        // other target\n        filterOptions.type = true;\n        // filterOptions.ebReadOnly = true; // not set ebReadOnly\n        filterOptions.ignoreRules = true;\n      }\n      return filterOptions;\n    }\n\n    async _writeAtom({ key, item, user, atomSimple, atomStage }) {\n      // write atom\n      const atom = {};\n      for (const field of __atomBasicFields) {\n        if (item[field] !== undefined) atom[field] = item[field];\n      }\n      if ((atomSimple === 0 && atomStage === 0) || (atomSimple === 1 && atomStage === 1)) {\n        atom.updatedAt = new Date();\n      }\n      if (atom.atomName) {\n        atom.atomName = atom.atomName.trim();\n      }\n      // update\n      atom.id = key.atomId;\n      await this.ctx.bean.atom._update({ atom, user });\n    }\n\n    async _writeHandleResource({ atomClass, atomClassBase, key, item }) {\n      // atomId/stage\n      const atomId = key.atomId;\n      const atomStage = item.atomStage;\n      if (atomClassBase.resource && atomStage === 1) {\n        // update locales\n        if (item.atomName) {\n          await this.ctx.bean.resource.setLocales({\n            atomId,\n            atomName: item.atomName,\n          });\n        }\n        // role\n        const isAtomClassRole = atomClass.module === 'a-base' && atomClass.atomClassName === 'role';\n        if (!isAtomClassRole) {\n          //   check if any role exists\n          const right = await this.modelResourceRole.get({\n            atomId,\n          });\n          if (!right) {\n            // always add role of template.system when no records\n            const roleSystem = await this.ctx.bean.role.parseRoleName({ roleName: 'template.system' });\n            await this.ctx.bean.resource.addResourceRole({\n              atomId,\n              roleId: roleSystem.id,\n            });\n          }\n        }\n      }\n    }\n  }\n\n  return AtomBase;\n};\n","module.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class AtomClass extends ctx.app.meta.BeanModuleBase {\n    constructor(moduleName) {\n      super(ctx, 'atomClass');\n      this.moduleName = moduleName || ctx.module.info.relativeName;\n    }\n\n    get model() {\n      return ctx.model.module(moduleInfo.relativeName).atomClass;\n    }\n\n    async atomClass(atomClass) {\n      atomClass = await this.top(atomClass);\n      return ctx.bean.base.atomClass({ module: atomClass.module, atomClassName: atomClass.atomClassName });\n    }\n\n    async top(atomClass) {\n      while (true) {\n        if (!atomClass.atomClassIdParent) break;\n        atomClass = await this.get({ id: atomClass.atomClassIdParent });\n      }\n      return atomClass;\n    }\n\n    async get({ id, module, atomClassName, atomClassIdParent = 0 }) {\n      module = module || this.moduleName;\n      const data = id ? { id } : { module, atomClassName, atomClassIdParent };\n      const res = await this.model.get(data);\n      if (res) return res;\n      if (!module || !atomClassName) ctx.throw.module(moduleInfo.relativeName, 1011);\n      // lock\n      return await ctx.meta.util.lock({\n        resource: `${moduleInfo.relativeName}.atomClass.register`,\n        fn: async () => {\n          return await ctx.meta.util.executeBeanIsolate({\n            beanModule: moduleInfo.relativeName,\n            beanFullName: 'atomClass',\n            context: { module, atomClassName, atomClassIdParent },\n            fn: '_registerLock',\n          });\n        },\n      });\n    }\n\n    async _registerLock({ module, atomClassName, atomClassIdParent }) {\n      // atom class\n      const data = await this._registerLock_inner({ module, atomClassName, atomClassIdParent });\n      // atom action: basics\n      for (const code of [1, 2, 3, 4]) {\n        await ctx.bean.atomAction._registerLock_inner({ atomClassId: data.id, code });\n      }\n      // ok\n      return data;\n    }\n\n    async _registerLock_inner({ module, atomClassName, atomClassIdParent }) {\n      // get\n      const res = await this.model.get({ module, atomClassName, atomClassIdParent });\n      if (res) return res;\n      // data\n      const atomClass = ctx.bean.base.atomClass({ module, atomClassName });\n      if (!atomClass) throw new Error(`atomClass ${module}:${atomClassName} not found!`);\n      const data = {\n        module,\n        atomClassName,\n        atomClassIdParent,\n        atomClassInner: atomClass.inner ? 1 : 0,\n      };\n      // insert\n      const res2 = await this.model.insert(data);\n      data.id = res2.insertId;\n      return data;\n    }\n\n    async getAtomClassId(atomClass) {\n      if (atomClass.id) return atomClass.id;\n      const res = await this.get(atomClass);\n      return res.id;\n    }\n\n    async getByAtomId({ atomId }) {\n      const res = await this.model.query(\n        `\n        select a.*,b.id as atomId,b.itemId from aAtomClass a\n          left join aAtom b on a.id=b.atomClassId\n            where b.iid=? and b.id=?\n        `,\n        [ctx.instance.id, atomId]\n      );\n      return res[0];\n    }\n\n    async getTopByAtomId({ atomId }) {\n      const atomClass = await this.getByAtomId({ atomId });\n      return await this.top(atomClass);\n    }\n\n    async validator({ atomClass }) {\n      // default\n      const _module = ctx.app.meta.modules[atomClass.module];\n      const validator = _module.main.meta.base.atoms[atomClass.atomClassName].validator;\n      return validator ? { module: atomClass.module, validator } : null;\n    }\n\n    async validatorSearch({ atomClass }) {\n      const _module = ctx.app.meta.modules[atomClass.module];\n      const validator = _module.main.meta.base.atoms[atomClass.atomClassName].search.validator;\n      return validator ? { module: atomClass.module, validator } : null;\n    }\n\n    async atomClassesUser({ user }) {\n      // items\n      const items = await ctx.model.query(\n        `\n        select distinct a.atomClassId,b.module,b.atomClassName from aViewUserRightAtomClass a\n          inner join aAtomClass b on a.atomClassId=b.id\n            where a.iid=? and a.userIdWho=?\n      `,\n        [ctx.instance.id, user.id]\n      );\n      const itemsMap = {};\n      for (const item of items) {\n        itemsMap[`${item.module}:${item.atomClassName}`] = item.atomClassId;\n      }\n      // atomClasses\n      const _atomClasses = ctx.bean.base.atomClasses();\n      // atomClassesNew\n      const atomClassesNew = {};\n      for (const _moduleName in _atomClasses) {\n        const atomClassesModuleNew = {};\n        const _atomClassesModule = _atomClasses[_moduleName];\n        for (const _atomClassName in _atomClassesModule) {\n          const _atomClass = _atomClassesModule[_atomClassName];\n          const _atomClassId = itemsMap[`${_moduleName}:${_atomClassName}`];\n          if (_atomClassId) {\n            atomClassesModuleNew[_atomClassName] = {\n              id: _atomClassId,\n              ..._atomClass,\n            };\n          }\n        }\n        if (Object.keys(atomClassesModuleNew).length > 0) {\n          atomClassesNew[_moduleName] = atomClassesModuleNew;\n        }\n      }\n      // ok\n      return atomClassesNew;\n    }\n\n    async actionsUser({ atomClass, user }) {\n      const atomClassId = await this.getAtomClassId(atomClass);\n      // items\n      const items = await ctx.model.query(\n        `\n          select distinct a.atomClassId,a.action,b.id as actionId,b.name,b.bulk,b.actionMode,c.atomName as flowDefName from aViewUserRightAtomClass a\n            inner join aAtomAction b on a.atomClassId=b.atomClassId and a.action=b.code\n            left join aAtom c on b.flowKey=c.atomStaticKey and c.atomStage=1\n              where a.iid=? and a.atomClassId=? and a.userIdWho=?\n        `,\n        [ctx.instance.id, atomClassId, user.id]\n      );\n      // locale\n      await ctx.bean.role._adjustFlowActionsLocale({ items, actionNameKey: 'name' });\n      // ok\n      return items;\n    }\n\n    async checkRightAtomClassAction({ atomClassId, action, user }) {\n      if (!user || user.id === 0) return true;\n      const res = await ctx.model.queryOne(\n        `\n        select * from aViewUserRightAtomClass \n          where iid=? and atomClassId=? and action=? and userIdWho=?\n      `,\n        [ctx.instance.id, atomClassId, action, user.id]\n      );\n      return !!res;\n    }\n  }\n\n  return AtomClass;\n};\n","const require3 = require('require3');\nconst mparse = require3('egg-born-mparse').default;\n\nmodule.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class AtomStatic extends ctx.app.meta.BeanModuleBase {\n    constructor(moduleName) {\n      super(ctx, 'atomStatic');\n      this.moduleName = moduleName || ctx.module.info.relativeName;\n    }\n\n    async loadAllAtomStatics() {\n      for (const module of ctx.app.meta.modulesArray) {\n        const moduleName = module.info.relativeName;\n        const statics = module.main.meta && module.main.meta.base && module.main.meta.base.statics;\n        if (!statics) continue;\n        for (const atomClassKey in statics) {\n          const [atomClassModule, atomClassName] = atomClassKey.split('.');\n          const atomClass = { module: atomClassModule, atomClassName };\n          const items = statics[atomClassKey].items;\n          if (!items) continue;\n          await this.loadAtomStatics({ moduleName, atomClass, items });\n        }\n      }\n    }\n\n    async loadAtomStatics({ moduleName, atomClass, items }) {\n      for (const item of items) {\n        await this.loadAtomStatic({ moduleName, atomClass, item });\n      }\n    }\n\n    async preloadAtomStatic({ atomStaticKey }) {\n      const data = this._findAtomStatic({ atomStaticKey });\n      if (!data) return null;\n      const atomKey = await this.loadAtomStatic(data);\n      return atomKey;\n    }\n\n    async loadAtomStatic({ moduleName, atomClass, item }) {\n      moduleName = moduleName || this.moduleName;\n      // key not empty\n      if (!item.atomStaticKey) {\n        throw new Error(`atomStaticKey cannot be empty for atom: ${moduleName}:${item.atomName}`);\n      }\n      const atomStaticKey = `${moduleName}:${item.atomStaticKey}`;\n      const atomRevision = item.atomRevision || 0;\n      // atomClassBase\n      atomClass = await ctx.bean.atomClass.get(atomClass);\n      const atomClassBase = await ctx.bean.atomClass.atomClass(atomClass);\n      // get by key\n      const atom = await ctx.bean.atom.readByStaticKey({\n        atomClass,\n        atomStaticKey,\n        atomStage: 'formal',\n      });\n      // exists\n      if (atom) {\n        if (atomRevision === -1) {\n          // delete\n          await ctx.bean.atom.delete({ key: { atomId: atom.atomId } });\n          return null;\n        }\n        // check revision: not use !==\n        const changed = this._ifChanged({\n          atomClassBase,\n          atomRevisionWill: atomRevision,\n          atomRevisionCurrent: atom.atomRevision,\n        });\n        if (changed) {\n          item = await this._adjustItem({ moduleName, atomClass, atomClassBase, item, register: false });\n          await this._updateRevision({\n            atomClassBase,\n            atomClass,\n            atomIdFormal: atom.atomId,\n            atomIdDraft: atom.atomIdDraft,\n            item,\n          });\n          await this._addResourceRoles({ atomId: atom.atomId, roles: item.resourceRoles });\n        }\n        return { atomId: atom.atomId, itemId: atom.itemId };\n      }\n      // not exists\n      if (atomRevision === -1) {\n        // do nothing\n        return null;\n      }\n      // register\n      item = await this._adjustItem({ moduleName, atomClass, atomClassBase, item, register: true });\n      const atomKey = await this._register({ atomClass, item });\n      await this._addResourceRoles({ atomId: atomKey.atomId, roles: item.resourceRoles });\n      return atomKey;\n    }\n\n    _ifChanged({ atomClassBase, atomRevisionWill, atomRevisionCurrent }) {\n      let changed;\n      if (atomClassBase.simple) {\n        changed = atomRevisionWill >= atomRevisionCurrent;\n      } else {\n        changed = atomRevisionWill > atomRevisionCurrent;\n      }\n      return changed;\n    }\n\n    async _addResourceRoles({ atomId, roles }) {\n      if (!roles || !roles.length) return;\n      for (const role of roles) {\n        if (!role) continue;\n        await ctx.bean.resource.addResourceRole({\n          atomId,\n          roleId: role.id,\n        });\n      }\n    }\n\n    // ctx.text is not good for resource\n    //   so, support only for atomLanguage\n    _getAtomFieldValueByLocale(item, field) {\n      const value = item[field];\n      if (value && item.atomLanguage) {\n        return ctx.text.locale(item.atomLanguage, value);\n      }\n      return value;\n    }\n\n    _adjustItem_atomCategoryId({ atomClass, item }) {\n      if (\n        atomClass.module === 'a-base' &&\n        atomClass.atomClassName === 'resource' &&\n        ['a-base:menu', 'a-base:mine'].includes(item.resourceType)\n      ) {\n        const parts = item.atomCategoryId.split('.');\n        if (parts[0] !== item.resourceType) {\n          parts.unshift(item.resourceType);\n        }\n        parts.splice(1, 0, item.appKey || 'a-appbooster:appUnclassified');\n        item.atomCategoryId = parts.join('.');\n      }\n    }\n\n    async _adjustItem({ moduleName, atomClass, atomClassBase, item, register }) {\n      // atom bean\n      const _moduleInfo = mparse.parseInfo(atomClass.module);\n      const beanFullName = `${_moduleInfo.relativeName}.atom.${atomClassBase.bean}`;\n      item = await ctx.meta.util.executeBean({\n        beanModule: _moduleInfo.relativeName,\n        beanFullName,\n        context: { moduleName, atomClass, item, register },\n        fn: 'prepareStaticItem',\n      });\n      return item;\n    }\n    async _adjustItem_base({ moduleName, atomClass, item, register }) {\n      // item\n      item = {\n        ...item,\n        atomStatic: 1,\n        atomStaticKey: `${moduleName}:${item.atomStaticKey}`,\n        atomRevision: item.atomRevision || 0,\n        atomName: this._getAtomFieldValueByLocale(item, 'atomName'),\n      };\n      if (item.description !== undefined) {\n        item.description = this._getAtomFieldValueByLocale(item, 'description');\n      }\n      // atomLanguage,atomCategoryId,atomTags\n      if (typeof item.atomCategoryId === 'string') {\n        this._adjustItem_atomCategoryId({ atomClass, item });\n        const category = await ctx.bean.category.parseCategoryName({\n          atomClass,\n          language: item.atomLanguage,\n          categoryName: item.atomCategoryId,\n          force: true,\n        });\n        item.atomCategoryId = category.id;\n      }\n      if (typeof item.atomTags === 'string') {\n        const tagIds = await ctx.bean.tag.parseTags({\n          atomClass,\n          language: item.atomLanguage,\n          tagName: item.atomTags,\n          force: true,\n        });\n        item.atomTags = JSON.stringify(tagIds);\n      }\n      // only valid for register\n      if (register) {\n        // roleIdOwner\n        const roleName = item.roleIdOwner || 'authenticated.builtIn';\n        const role = await ctx.bean.role.parseRoleName({ roleName });\n        item.roleIdOwner = role.id;\n      }\n      // resourceRoles\n      if (item.resourceRoles) {\n        item.resourceRoles = await ctx.bean.role.parseRoleNames({ roleNames: item.resourceRoles, force: true });\n      }\n      // ok\n      return item;\n    }\n\n    _findAtomStatic({ atomStaticKey }) {\n      const [_moduleName, _atomStaticKey] = atomStaticKey.split(':');\n      for (const module of ctx.app.meta.modulesArray) {\n        const moduleName = module.info.relativeName;\n        if (moduleName !== _moduleName) continue;\n        const statics = module.main.meta && module.main.meta.base && module.main.meta.base.statics;\n        if (!statics) continue;\n        for (const atomClassKey in statics) {\n          const [atomClassModule, atomClassName] = atomClassKey.split('.');\n          const atomClass = { module: atomClassModule, atomClassName };\n          const items = statics[atomClassKey].items;\n          if (!items) continue;\n          for (const item of items) {\n            if (item.atomStaticKey === _atomStaticKey) {\n              return { moduleName, atomClass, item };\n            }\n          }\n        }\n      }\n      return null;\n    }\n\n    async _updateRevision({ atomClassBase, atomClass, atomIdFormal, atomIdDraft, item }) {\n      return await ctx.meta.util.lock({\n        resource: `${moduleInfo.relativeName}.atomStatic.register.${item.atomStaticKey}`,\n        fn: async () => {\n          return await ctx.meta.util.executeBeanIsolate({\n            beanModule: moduleInfo.relativeName,\n            beanFullName: 'atomStatic',\n            context: { atomClassBase, atomClass, atomIdFormal, atomIdDraft, item },\n            fn: '_updateRevisionLock',\n          });\n        },\n      });\n    }\n\n    async _updateRevisionLock({ atomClassBase, atomIdFormal, atomIdDraft, item }) {\n      // get atom/atomKey\n      const atomKey = {\n        atomId: atomClassBase.simple ? atomIdFormal : atomIdDraft,\n      };\n      const atom = await ctx.bean.atom.modelAtom.get({ id: atomKey.atomId });\n      atomKey.itemId = atom.itemId;\n      // check changed again\n      const changed = this._ifChanged({\n        atomClassBase,\n        atomRevisionWill: item.atomRevision,\n        atomRevisionCurrent: atom.atomRevision,\n      });\n      if (!changed) return;\n      // simple/normal\n      if (atomClassBase.simple) {\n        // write\n        await ctx.bean.atom.write({\n          key: atomKey,\n          item,\n          user: { id: 0 },\n        });\n        // submit\n        await ctx.bean.atom.submit({\n          key: atomKey,\n          options: { ignoreFlow: true },\n          user: { id: 0 },\n        });\n        // update\n        await ctx.bean.atom.modelAtom.update({\n          id: atomKey.atomId,\n          atomName: item.atomName,\n          atomRevision: item.atomRevision + 1,\n        });\n      } else {\n        // update\n        await ctx.bean.atom.modelAtom.update({\n          id: atomKey.atomId,\n          atomName: item.atomName,\n          atomRevision: item.atomRevision,\n        });\n        // write\n        await ctx.bean.atom.write({\n          key: atomKey,\n          item,\n          user: { id: 0 },\n        });\n        // submit\n        await ctx.bean.atom.submit({\n          key: atomKey,\n          options: { ignoreFlow: true },\n          user: { id: 0 },\n        });\n      }\n    }\n\n    async _register({ atomClass, item }) {\n      return await ctx.meta.util.lock({\n        resource: `${moduleInfo.relativeName}.atomStatic.register.${item.atomStaticKey}`,\n        fn: async () => {\n          return await ctx.meta.util.executeBeanIsolate({\n            beanModule: moduleInfo.relativeName,\n            beanFullName: 'atomStatic',\n            context: { atomClass, item },\n            fn: '_registerLock',\n          });\n        },\n      });\n    }\n\n    async _registerLock({ atomClass, item }) {\n      // get again\n      const atom = await ctx.bean.atom.readByStaticKey({\n        atomClass,\n        atomStaticKey: item.atomStaticKey,\n        atomStage: 'formal',\n      });\n      if (atom) {\n        return { atomId: atom.atomId, itemId: atom.itemId };\n      }\n      // add atom\n      const atomKey = await ctx.bean.atom.create({\n        atomClass,\n        roleIdOwner: item.roleIdOwner,\n        item,\n        user: { id: 0 },\n      });\n      // write\n      await ctx.bean.atom.write({\n        key: atomKey,\n        item,\n        user: { id: 0 },\n      });\n      // submit\n      const res = await ctx.bean.atom.submit({\n        key: atomKey,\n        options: { ignoreFlow: true },\n        user: { id: 0 },\n      });\n      return res.formal.key;\n    }\n  }\n\n  return AtomStatic;\n};\n","module.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n\n  class Auth {\n    constructor() {\n      this._redisAuth = null;\n    }\n\n    get redisAuth() {\n      if (!this._redisAuth) {\n        this._redisAuth = ctx.app.redis.get('auth') || ctx.app.redis.get('cache');\n      }\n      return this._redisAuth;\n    }\n\n    // return current user auth info\n    //   { op:{id},agent:{id},provider}\n    async echo() {\n      try {\n        // check\n        await ctx.bean.user.check();\n        // logined\n        return await this.getLoginInfo({ clientId: true });\n      } catch (e) {\n        // deleted,disabled\n        return await this._logout_inner();\n      }\n    }\n\n    async check() {\n      return await this.getLoginInfo();\n    }\n\n    async logout() {\n      const user = ctx.state.user;\n      await this._sendMessageSystemLogout({ user });\n      await this._clearRedisAuth({ user });\n      await this._logout_inner();\n    }\n\n    async _logout_inner() {\n      await ctx.logout();\n      await ctx.bean.user.loginAsAnonymous();\n      return await this.getLoginInfo();\n    }\n\n    async getLoginInfo(options) {\n      options = options || {};\n      const needClientId = options.clientId === true;\n      const isAuthOpen = ctx.bean.authOpen.isAuthOpen();\n      // info\n      const info = {\n        user: ctx.state.user,\n        instance: this._getInstance(),\n        locales: ctx.bean.base.locales(),\n      };\n      // config\n      if (!isAuthOpen) {\n        info.config = await this._getConfig();\n      }\n      // clientId\n      if (needClientId) {\n        info.clientId = ctx.bean.util.uuidv4();\n      }\n      // login info event\n      if (!isAuthOpen) {\n        await ctx.bean.event.invoke({\n          name: 'loginInfo',\n          data: { info },\n        });\n      }\n      // ok\n      return info;\n    }\n\n    _getInstance() {\n      return {\n        name: ctx.instance.name,\n        title: ctx.instance.title,\n      };\n    }\n\n    async _getConfig() {\n      // instanceConfigsFront\n      const instanceConfigsFront = ctx.bean.instance.getInstanceConfigsFront();\n      // config\n      let config = {\n        modules: instanceConfigsFront,\n      };\n      // config base\n      config = ctx.bean.util.extend(config, {\n        modules: {\n          'a-base': {\n            account: this._getAccount(),\n          },\n        },\n      });\n      // // theme\n      // const themeStatus = `user-theme:${ctx.state.user.agent.id}`;\n      // const theme = await ctx.bean.status.module('a-user').get(themeStatus);\n      // if (theme) {\n      //   config.theme = theme;\n      // }\n      // localeModules\n      config.localeModules = ctx.bean.base.localeModules();\n      // ok\n      return config;\n    }\n\n    _getAccount() {\n      // account\n      const account = ctx.bean.util.extend({}, ctx.config.module(moduleInfo.relativeName).account);\n      account.activatedRoles = undefined;\n      // url\n      for (const key in account.activationProviders) {\n        const relativeName = account.activationProviders[key];\n        if (relativeName) {\n          const moduleConfig = ctx.config.module(relativeName);\n          ctx.bean.util.extend(account.url, moduleConfig.account.url);\n        }\n      }\n      return account;\n    }\n\n    _getAuthRedisKey({ user }) {\n      const userAgent = user.agent || user.op;\n      if (!ctx.instance || !user.provider || !userAgent) return null;\n      return `authToken:${ctx.instance.id}:${userAgent.id}:${user.provider.scene || ''}:${user.provider.id}`;\n    }\n\n    _getAuthRedisKeyPattern({ user, keyPrefix }) {\n      return `${keyPrefix}authToken:${ctx.instance.id}:${user.id}:*`;\n    }\n\n    _pruneUser({ user }) {\n      const _user = {\n        op: { id: user.op.id, iid: user.op.iid, anonymous: user.op.anonymous },\n      };\n      if (user.agent && user.agent.id !== user.op.id) {\n        _user.agent = { id: user.agent.id, iid: user.agent.iid, anonymous: user.agent.anonymous };\n      }\n      if (user.provider) {\n        _user.provider = user.provider;\n      }\n      return _user;\n    }\n\n    async serializeUser({ user }) {\n      // _user\n      const _user = this._pruneUser({ user });\n      // anonymous\n      if (user.op.anonymous) {\n        // not use redis\n        return _user;\n      }\n      // save to redis\n      const key = this._getAuthRedisKey({ user });\n      if (!ctx.bean.util.checkDemo(false)) {\n        // demo, allowed to auth more times\n        _user.token = await this.redisAuth.get(key);\n      } else {\n        // create a new one\n        _user.token = null;\n      }\n      if (!_user.token) {\n        _user.token = ctx.bean.util.uuidv4();\n      }\n      await this.redisAuth.set(key, _user.token, 'PX', ctx.session.maxAge);\n      // register user online\n      await ctx.bean.userOnline.register({ user, isLogin: true });\n      // ok\n      return _user;\n    }\n\n    async deserializeUser({ user }) {\n      if (user.op.anonymous) return user;\n      // not throw 401: ctx.throw(401);\n      if (!user.token) return null;\n      // check token\n      const key = this._getAuthRedisKey({ user });\n      if (!key) return null;\n      const token = await this.redisAuth.get(key);\n      if (token !== user.token) return null;\n      // ready\n      return user;\n    }\n\n    async _sendMessageSystemLogout({ user }) {\n      if (!user || user.op.anonymous) return;\n      // send message-system\n      await ctx.bean.userOnline.sendMessageSystemLogout({\n        user: user.op, // should use user.op\n        type: 'provider',\n        provider: user.provider,\n      });\n    }\n\n    async _clearRedisAuth({ user }) {\n      if (!user || user.agent.anonymous) return;\n      // redis auth\n      const key = this._getAuthRedisKey({ user });\n      if (key) {\n        await this.redisAuth.del(key);\n      }\n    }\n\n    async _clearRedisAuthAll({ user }) {\n      const keyPrefix = this.redisAuth.options.keyPrefix;\n      const keyPattern = this._getAuthRedisKeyPattern({ user, keyPrefix });\n      const keys = await this.redisAuth.keys(keyPattern);\n      for (const fullKey of keys) {\n        const key = keyPrefix ? fullKey.substr(keyPrefix.length) : fullKey;\n        await this.redisAuth.del(key);\n      }\n    }\n  }\n\n  return Auth;\n};\n","const path = require('path');\nconst require3 = require('require3');\nconst fse = require3('fs-extra');\n\nconst _modulesLocales = {};\nconst _themesLocales = {};\nconst _locales = {};\nconst _localeModules = {};\nconst _resourceTypes = {};\nconst _atomClasses = {};\nconst _actions = {};\nconst _authProvidersLocales = {};\n\nlet _hostText = null;\n\nmodule.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Base extends ctx.app.meta.BeanModuleBase {\n    constructor(moduleName) {\n      super(ctx, 'base');\n      this.moduleName = moduleName || ctx.module.info.relativeName;\n    }\n\n    get host() {\n      // test\n      if (ctx.app.meta.isTest) {\n        if (_hostText) return _hostText;\n        const buildConfig = require3(path.join(process.cwd(), 'build/config.js'));\n        const hostname = buildConfig.front.dev.hostname || 'localhost';\n        const port = buildConfig.front.dev.port;\n        _hostText = `${hostname}:${port}`;\n        return _hostText;\n      }\n      // others\n      const config = ctx.config.module(moduleInfo.relativeName);\n      return config.host || ctx.host;\n    }\n\n    get protocol() {\n      const config = ctx.config.module(moduleInfo.relativeName);\n      return config.protocol || ctx.protocol;\n    }\n\n    getAbsoluteUrl(path) {\n      const prefix = this.host ? `${this.protocol}://${this.host}` : '';\n      return `${prefix}${path || ''}`;\n    }\n\n    // get forward url\n    getForwardUrl(path) {\n      const prefix =\n        ctx.app.meta.isTest || ctx.app.meta.isLocal ? ctx.app.config.static.prefix + 'public/' : '/public/';\n      return `${prefix}${ctx.instance.id}/${path}`;\n    }\n\n    // get root path\n    async getRootPath() {\n      if (ctx.app.meta.isTest || ctx.app.meta.isLocal) {\n        return ctx.app.config.static.dir;\n      }\n      const dir =\n        ctx.config.module(moduleInfo.relativeName).publicDir ||\n        path.join(require('os').homedir(), 'cabloy', ctx.app.name, 'public');\n      await fse.ensureDir(dir);\n      return dir;\n    }\n\n    // get path\n    async getPath(subdir, ensure) {\n      const rootPath = await this.getRootPath();\n      // use instance.id, not subdomain\n      const dir = path.join(rootPath, ctx.instance.id.toString(), subdir || '');\n      if (ensure) {\n        await fse.ensureDir(dir);\n      }\n      return dir;\n    }\n\n    // static\n    getStaticUrl(path) {\n      return this.getAbsoluteUrl(`/api/static${path}`);\n    }\n\n    // alert\n    getAlertUrl({ data }) {\n      return this.getAbsoluteUrl(`/#!/a/basefront/base/alert?data=${encodeURIComponent(JSON.stringify(data))}`);\n    }\n\n    modules() {\n      if (!_modulesLocales[ctx.locale]) {\n        _modulesLocales[ctx.locale] = this._prepareModules();\n      }\n      return _modulesLocales[ctx.locale];\n    }\n\n    themes() {\n      if (!_themesLocales[ctx.locale]) {\n        _themesLocales[ctx.locale] = this._prepareThemes();\n      }\n      return _themesLocales[ctx.locale];\n    }\n\n    locales() {\n      if (!_locales[ctx.locale]) {\n        _locales[ctx.locale] = this._prepareLocales();\n      }\n      return _locales[ctx.locale];\n    }\n\n    localeModules() {\n      if (!_localeModules[ctx.locale]) {\n        _localeModules[ctx.locale] = this._prepareLocaleModules();\n      }\n      return _localeModules[ctx.locale];\n    }\n\n    resourceTypes() {\n      if (!_resourceTypes[ctx.locale]) {\n        _resourceTypes[ctx.locale] = this._prepareResourceTypes();\n      }\n      return _resourceTypes[ctx.locale];\n    }\n\n    atomClasses() {\n      if (!_atomClasses[ctx.locale]) {\n        // prepare\n        const atomClassesAll = this._prepareAtomClasses();\n        // hold\n        _atomClasses[ctx.locale] = atomClassesAll;\n        // patch\n        this._patchAtomClassesAreaScope(atomClassesAll);\n      }\n      return _atomClasses[ctx.locale];\n    }\n\n    atomClass({ module, atomClassName }) {\n      const _atomClasses = this.atomClasses();\n      return _atomClasses[module] && _atomClasses[module][atomClassName];\n    }\n\n    actions() {\n      if (!_actions[ctx.locale]) {\n        _actions[ctx.locale] = this._prepareActions();\n      }\n      return _actions[ctx.locale];\n    }\n\n    action({ module, atomClassName, code, name }) {\n      const _actions = this.actions();\n      const actions = _actions[module][atomClassName];\n      if (name) return actions[name];\n      const key = Object.keys(actions).find(key => actions[key].code === code);\n      return actions[key];\n    }\n\n    authProviders() {\n      if (!_authProvidersLocales[ctx.locale]) {\n        _authProvidersLocales[ctx.locale] = this._prepareAuthProviders();\n      }\n      return _authProvidersLocales[ctx.locale];\n    }\n\n    // inner methods\n\n    _prepareModules() {\n      const modules = {};\n      for (const relativeName in ctx.app.meta.modules) {\n        const module = ctx.app.meta.modules[relativeName];\n        const _module = {\n          name: relativeName,\n          title: module.package.title || module.info.name,\n          description: ctx.text(module.package.description),\n          info: module.info,\n        };\n        const icon = module.package.eggBornModule && module.package.eggBornModule.icon;\n        if (icon) {\n          _module.icon = icon;\n        }\n        _module.titleLocale = ctx.text(_module.title);\n        modules[relativeName] = _module;\n      }\n      return modules;\n    }\n\n    _prepareThemes() {\n      const modules = {};\n      for (const relativeName in ctx.app.meta.modules) {\n        const module = ctx.app.meta.modules[relativeName];\n        if (module.package.eggBornModule && module.package.eggBornModule.theme) {\n          const _module = {\n            name: relativeName,\n            title: module.package.title || module.info.name,\n            description: ctx.text(module.package.description),\n            info: module.info,\n          };\n          _module.titleLocale = ctx.text(_module.title);\n          modules[relativeName] = _module;\n        }\n      }\n      return modules;\n    }\n\n    _prepareLocales() {\n      const locales = [];\n      const config = ctx.config.module(moduleInfo.relativeName);\n      for (const locale in config.locales) {\n        locales.push({\n          title: ctx.text(config.locales[locale]),\n          value: locale,\n        });\n      }\n      return locales;\n    }\n\n    _prepareLocaleModules() {\n      const localeModules = [];\n      for (const module of ctx.app.meta.modulesArray) {\n        const locale = module.package.eggBornModule && module.package.eggBornModule.locale;\n        if (!locale) continue;\n        const locales = locale.split(',');\n        if (locales.findIndex(item => item === ctx.locale) > -1) {\n          localeModules.push(module.info.relativeName);\n        }\n      }\n      return localeModules;\n    }\n\n    _prepareResourceTypes() {\n      const resourceTypes = {};\n      for (const module of ctx.app.meta.modulesArray) {\n        const moduleName = module.info.relativeName;\n        const resources = module.main.meta && module.main.meta.base && module.main.meta.base.resources;\n        if (!resources) continue;\n        for (const key in resources) {\n          const resource = resources[key];\n          const fullKey = `${moduleName}:${key}`;\n          resourceTypes[fullKey] = {\n            ...resource,\n            titleLocale: ctx.text(resource.title),\n          };\n        }\n      }\n      return resourceTypes;\n    }\n\n    _prepareAtomClasses() {\n      const atomClasses = {};\n      for (const relativeName in ctx.app.meta.modules) {\n        const module = ctx.app.meta.modules[relativeName];\n        if (module.main.meta && module.main.meta.base && module.main.meta.base.atoms) {\n          const res = this._prepareAtomClassesModule(module, module.main.meta.base.atoms);\n          if (Object.keys(res).length > 0) {\n            atomClasses[relativeName] = res;\n          }\n        }\n      }\n      return atomClasses;\n    }\n\n    _patchAtomClassesAreaScope(atomClassesAll) {\n      for (const relativeName in atomClassesAll) {\n        const atomClasses = atomClassesAll[relativeName];\n        this._patchAtomClassesAreaScopeModule(relativeName, atomClasses);\n      }\n    }\n\n    _patchAtomClassesAreaScopeModule(relativeName, atomClasses) {\n      for (const atomClassName in atomClasses) {\n        const atomClassInfo = atomClasses[atomClassName];\n        const atomClass = { module: relativeName, atomClassName };\n        const areaScopeMeta = ctx.bean.areaScope.getAreaScopeMeta({ atomClass, escape: true });\n        if (areaScopeMeta) {\n          atomClassInfo.areaScope = Object.assign({}, atomClassInfo.areaScope, areaScopeMeta, {\n            sameAs: undefined,\n            atomClass,\n          });\n        }\n      }\n    }\n\n    _prepareAtomClassesModule(module, _atoms) {\n      const atomClasses = {};\n      for (const key in _atoms) {\n        // info\n        const atomClass = {\n          name: key,\n          ..._atoms[key].info,\n        };\n        // titleLocale\n        atomClass.titleLocale = ctx.text(atomClass.title);\n        // ok\n        atomClasses[key] = atomClass;\n      }\n      return atomClasses;\n    }\n\n    _prepareActions() {\n      const actions = {};\n      for (const relativeName in ctx.app.meta.modules) {\n        const module = ctx.app.meta.modules[relativeName];\n        if (module.main.meta && module.main.meta.base && module.main.meta.base.atoms) {\n          const res = {};\n          for (const atomClassName in module.main.meta.base.atoms) {\n            const res2 = this._prepareActionsAtomClass(module, module.main.meta.base.atoms[atomClassName]);\n            if (Object.keys(res2).length > 0) {\n              res[atomClassName] = res2;\n            }\n          }\n          if (Object.keys(res).length > 0) {\n            actions[relativeName] = res;\n          }\n        }\n      }\n      return actions;\n    }\n\n    _prepareActionsAtomClass(module, atomClass) {\n      const actions = {};\n      const _actions = atomClass.actions;\n      const _actionsSystem = ctx.constant.module(moduleInfo.relativeName).atom.action;\n      const _actionsSystemMeta = ctx.constant.module(moduleInfo.relativeName).atom.actionMeta;\n      const _actionsAll = ctx.bean.util.extend({}, _actionsSystemMeta, _actions);\n      for (const key in _actionsAll) {\n        if (key === 'custom') continue;\n        const action = _actionsAll[key];\n        if (!action.code) action.code = _actionsSystem[key];\n        action.name = key;\n        action.titleLocale = ctx.text(action.title);\n        actions[key] = action;\n      }\n      return actions;\n    }\n\n    _prepareAuthProviders() {\n      const authProviders = {};\n      for (const module of ctx.app.meta.modulesArray) {\n        const relativeName = module.info.relativeName;\n        let metaAuth = module.main.meta && module.main.meta.auth;\n        if (!metaAuth) continue;\n        if (typeof metaAuth === 'function') {\n          metaAuth = metaAuth(ctx.app);\n        }\n        if (!metaAuth.providers) continue;\n        // loop\n        for (const providerName in metaAuth.providers) {\n          const _authProvider = metaAuth.providers[providerName];\n          const providerFullName = `${relativeName}:${providerName}`;\n          if (!_authProvider.meta.title) {\n            throw new Error(`should specify the title of auth provider: ${providerFullName}`);\n          }\n          const authProvider = ctx.bean.util.extend({}, _authProvider);\n          this._prepareAuthProvider(relativeName, providerName, authProvider);\n          authProviders[providerFullName] = authProvider;\n        }\n      }\n      return authProviders;\n    }\n\n    _prepareAuthProvider(relativeName, providerName, authProvider) {\n      const meta = authProvider.meta;\n      meta.titleLocale = ctx.text(meta.title);\n      // meta\n      this._prepareAuthProvider_meta(relativeName, meta);\n      // scenes\n      const scenes = authProvider.scenes;\n      if (scenes) {\n        for (const sceneName in scenes) {\n          const scene = scenes[sceneName];\n          this._prepareAuthProvider_meta(relativeName, scene.meta);\n          scene.meta = this._prepareAuthProvider_mergeMetaScene(scene.meta, meta);\n        }\n      }\n    }\n\n    _prepareAuthProvider_mergeMetaScene(metaScene, metaConfig) {\n      const _meta = {};\n      for (const key of ['mode', 'inner', 'inline', 'disableAssociate', 'render', 'validator']) {\n        if (metaConfig[key] !== undefined) {\n          _meta[key] = metaConfig[key];\n        }\n      }\n      return ctx.bean.util.extend({}, _meta, metaScene);\n    }\n\n    _prepareAuthProvider_meta(relativeName, meta) {\n      if (typeof meta.bean === 'string') {\n        meta.bean = { module: relativeName, name: meta.bean };\n      }\n      if (typeof meta.render === 'string') {\n        meta.render = { module: relativeName, name: meta.render };\n      }\n      if (typeof meta.validator === 'string') {\n        meta.validator = { module: relativeName, validator: meta.validator };\n      }\n    }\n  }\n\n  return Base;\n};\n","const path = require('path');\nconst require3 = require('require3');\nconst mparse = require3('egg-born-mparse').default;\n\nlet __bodyCryptoInstance = null;\n\nmodule.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class BodyCrypto {\n    get configModule() {\n      return ctx.config.module(moduleInfo.relativeName);\n    }\n\n    async ensureBodyCrypto() {\n      if (!__bodyCryptoInstance) {\n        const configCryptoJS = this.configModule.securityLevelProtection.body.cryptojs;\n        const moduleInfo = mparse.parseInfo(configCryptoJS);\n        if (!moduleInfo) throw new Error(`Invalid BodyCrypto JS: ${configCryptoJS}`);\n        const _module = ctx.app.meta.modules[moduleInfo.relativeName];\n        if (!_module) throw new Error(`Module Not Found: ${module}`);\n        let jsFile = path.join(_module.static.backend, configCryptoJS.substring(moduleInfo.url.length + 2));\n        if (ctx.app.meta.isProd) {\n          jsFile += '.min';\n        }\n        jsFile += '.js';\n        const Loader = require3(jsFile);\n        __bodyCryptoInstance = await Loader.createBodyCrypto();\n      }\n      return __bodyCryptoInstance;\n    }\n\n    async decrypt() {\n      const body = ctx.request && ctx.request.body;\n      if (!body || typeof body !== 'object' || !body.crypto) return;\n      // ensure\n      const bodyCryptoInstance = await this.ensureBodyCrypto();\n      ctx.request.body = bodyCryptoInstance.decrypt(body);\n    }\n\n    async encrypt() {\n      const configCrypto = this.configModule.securityLevelProtection.body.crypto;\n      if (!configCrypto) return;\n      if (ctx.ctxCaller) return;\n      if (ctx.headers['x-open-auth-client']) return;\n      const contentType = ctx.response.headers && ctx.response.headers['content-type'];\n      if (!contentType || contentType.indexOf('application/json') === -1) return;\n      const body = ctx.response && ctx.response.body;\n      if (!body || typeof body !== 'object') return;\n      // ensure\n      const bodyCryptoInstance = await this.ensureBodyCrypto();\n      ctx.response.body = bodyCryptoInstance.encrypt(body);\n    }\n  }\n  return BodyCrypto;\n};\n","module.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Category {\n    get modelCategory() {\n      return ctx.model.module(moduleInfo.relativeName).category;\n    }\n\n    async get({ categoryId, setLocale }) {\n      const category = await this.modelCategory.get({ id: categoryId });\n      if (category && setLocale) {\n        category.categoryNameLocale = ctx.text(category.categoryName);\n      }\n      return category;\n    }\n\n    async save({ categoryId, data }) {\n      await this.modelCategory.update({\n        id: categoryId,\n        categoryName: data.categoryName,\n        categoryHidden: data.categoryHidden,\n        categorySorting: data.categorySorting,\n        categoryFlag: data.categoryFlag,\n        categoryUrl: data.categoryUrl,\n      });\n    }\n\n    async count({ atomClass, language, categoryId, categoryHidden, categoryFlag, user }) {\n      return await this.children({ atomClass, language, categoryId, categoryHidden, categoryFlag, user, count: 1 });\n    }\n\n    async child({ atomClass, language, categoryId, categoryName, categoryHidden, categoryFlag, setLocale, user }) {\n      const list = await this.children({\n        atomClass,\n        language,\n        categoryId,\n        categoryName,\n        categoryHidden,\n        categoryFlag,\n        setLocale,\n        user,\n      });\n      return list[0];\n    }\n\n    async children({\n      atomClass,\n      language,\n      categoryId,\n      categoryName,\n      categoryHidden,\n      categoryFlag,\n      setLocale,\n      count = 0,\n      user,\n    }) {\n      // categoryHidden\n      categoryHidden = await this._checkRightForCategoryHidden({ categoryHidden, user });\n      // where\n      const where = {};\n      if (categoryId !== undefined) where.categoryIdParent = categoryId;\n      // atomClassId\n      if (!where.categoryIdParent) {\n        // atomClass\n        atomClass = await ctx.bean.atomClass.get(atomClass);\n        where.atomClassId = atomClass.id;\n      }\n      //\n      if (language) where.language = language; // not check !== undefined\n      if (categoryName !== undefined) where.categoryName = categoryName;\n      if (categoryHidden !== undefined) where.categoryHidden = categoryHidden;\n      if (categoryFlag !== undefined) where.categoryFlag = categoryFlag;\n      //\n      if (count) {\n        return await this.modelCategory.count(where);\n      }\n      const list = await this.modelCategory.select({\n        where,\n        orders: [\n          ['categorySorting', 'asc'],\n          ['createdAt', 'asc'],\n        ],\n      });\n      if (setLocale) {\n        for (const category of list) {\n          category.categoryNameLocale = ctx.text(category.categoryName);\n        }\n      }\n      return list;\n    }\n\n    async add({ atomClass, data }) {\n      atomClass = await ctx.bean.atomClass.get(atomClass);\n      // add\n      const res = await this.modelCategory.insert({\n        atomClassId: atomClass.id,\n        language: data.language,\n        categoryName: data.categoryName,\n        categoryHidden: data.categoryHidden || 0,\n        categorySorting: data.categorySorting || 0,\n        categoryFlag: data.categoryFlag,\n        categoryUrl: data.categoryUrl,\n        categoryIdParent: data.categoryIdParent,\n        categoryCatalog: 0,\n      });\n      // adjust catalog\n      await this.adjustCatalog(data.categoryIdParent);\n      return res.insertId;\n    }\n\n    async delete({ categoryId }) {\n      // check atoms\n      const count = await ctx.bean.atom.modelAtom.count({ atomCategoryId: categoryId });\n      if (count > 0) {\n        ctx.throw.module(moduleInfo.relativeName, 1012);\n      }\n      // check children\n      const children = await this.children({ categoryId });\n      if (children.length > 0) {\n        ctx.throw.module(moduleInfo.relativeName, 1013);\n      }\n\n      // category\n      const category = await this.modelCategory.get({ id: categoryId });\n      // parent\n      const categoryIdParent = category.categoryIdParent;\n\n      // delete\n      await this.modelCategory.delete({ id: categoryId });\n      // adjust catalog\n      await this.adjustCatalog(categoryIdParent);\n    }\n\n    async move({ categoryId, categoryIdParent }) {\n      // category\n      const category = await this.modelCategory.get({ id: categoryId });\n      // categoryIdParentOld\n      const categoryIdParentOld = category.categoryIdParent;\n      if (categoryIdParentOld === categoryIdParent) return;\n      // move\n      await this.modelCategory.update({\n        id: categoryId,\n        categoryIdParent,\n      });\n      // adjust catalog\n      await this.adjustCatalog(categoryIdParentOld);\n      await this.adjustCatalog(categoryIdParent);\n    }\n\n    // for donothing on categoryId === 0, so need not input param:atomClass\n    async adjustCatalog(categoryId) {\n      if (categoryId === 0) return;\n      const children = await this.children({ categoryId });\n      await this.modelCategory.update({\n        id: categoryId,\n        categoryCatalog: children.length === 0 ? 0 : 1,\n      });\n    }\n\n    async tree({ atomClass, language, categoryId, categoryHidden, categoryFlag, setLocale, user }) {\n      // categoryHidden\n      categoryHidden = await this._checkRightForCategoryHidden({ categoryHidden, user });\n      // categoryId\n      if (categoryId === undefined) categoryId = 0;\n      return await this._treeChildren({ atomClass, language, categoryId, categoryHidden, categoryFlag, setLocale });\n    }\n\n    async _treeChildren({ atomClass, language, categoryId, categoryHidden, categoryFlag, setLocale }) {\n      const list = await this.children({ atomClass, language, categoryId, categoryHidden, categoryFlag, setLocale });\n      for (const item of list) {\n        if (item.categoryCatalog) {\n          // only categoryId\n          item.children = await this._treeChildren({\n            atomClass,\n            language,\n            categoryId: item.id,\n            categoryHidden,\n            categoryFlag,\n            setLocale,\n          });\n        }\n      }\n      return list;\n    }\n\n    async relativeTop({ categoryId, setLocale }) {\n      return await this._relativeTop({ categoryId, setLocale });\n    }\n\n    async _relativeTop({ categoryId, setLocale }) {\n      if (categoryId === 0) return null;\n      const category = await this.get({ categoryId, setLocale });\n      if (!category) return null;\n      if (category.categoryUrl) return category;\n      return await this._relativeTop({ categoryId: category.categoryIdParent, setLocale });\n    }\n\n    // categoryA.categoryB\n    async parseCategoryName({ atomClass, language, categoryName, categoryIdParent = 0, force = false }) {\n      const categoryNames = categoryName.split('.');\n      let category;\n      for (const _categoryName of categoryNames) {\n        category = await this.child({\n          atomClass,\n          language,\n          categoryId: categoryIdParent,\n          categoryName: _categoryName,\n        });\n        // next\n        if (category) {\n          categoryIdParent = category.id;\n          continue;\n        }\n        // null\n        if (!force) return null;\n        // create\n        const categoryId = await this._register({\n          atomClass,\n          language,\n          categoryName: _categoryName,\n          categoryIdParent,\n        });\n        category = await this.get({ categoryId });\n        // next\n        categoryIdParent = categoryId;\n      }\n      return category;\n    }\n\n    async _register({ atomClass, language, categoryName, categoryIdParent }) {\n      atomClass = await ctx.bean.atomClass.get(atomClass);\n      return await ctx.meta.util.lock({\n        resource: `${moduleInfo.relativeName}.category.register.${atomClass.id}`,\n        fn: async () => {\n          return await ctx.meta.util.executeBeanIsolate({\n            beanModule: moduleInfo.relativeName,\n            beanFullName: 'category',\n            context: { atomClass, language, categoryName, categoryIdParent },\n            fn: '_registerLock',\n          });\n        },\n      });\n    }\n\n    async _registerLock({ atomClass, language, categoryName, categoryIdParent }) {\n      // get again\n      const category = await this.child({\n        atomClass,\n        language,\n        categoryId: categoryIdParent,\n        categoryName,\n      });\n      if (category) return category.id;\n      // add\n      return await this.add({\n        atomClass,\n        data: {\n          language,\n          categoryName,\n          categoryIdParent,\n        },\n      });\n    }\n\n    async _checkRightForCategoryHidden({ categoryHidden, user }) {\n      if (!user || user.id === 0) return categoryHidden;\n      if (categoryHidden === 0) return categoryHidden;\n      const res = await ctx.bean.resource.checkRightResource({\n        atomStaticKey: 'a-settings:settings',\n        user,\n      });\n      return res ? categoryHidden : 0;\n    }\n  }\n  return Category;\n};\n","module.exports = ctx => {\n  class Local extends ctx.app.meta.BeanModuleBase {\n    constructor(moduleName) {\n      super(ctx, 'local');\n      this.moduleName = moduleName || ctx.module.info.relativeName;\n    }\n  }\n\n  return Local;\n};\n","let __atomClassesResource = null;\n\nmodule.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n\n  const __atomClass = {\n    module: moduleInfo.relativeName,\n    atomClassName: 'resource',\n  };\n\n  class Resource extends ctx.app.meta.BeanModuleBase {\n    constructor(moduleName) {\n      super(ctx, 'resource');\n      this.moduleName = moduleName || ctx.module.info.relativeName;\n    }\n\n    get model() {\n      return ctx.model.module(moduleInfo.relativeName).resource;\n    }\n\n    get modelResourceLocale() {\n      return ctx.model.module(moduleInfo.relativeName).resourceLocale;\n    }\n\n    get modelResourceRole() {\n      return ctx.model.module(moduleInfo.relativeName).resourceRole;\n    }\n\n    get sqlProcedure() {\n      return ctx.bean._getBean(moduleInfo.relativeName, 'local.procedure');\n    }\n\n    // count\n    async count({ options, user }) {\n      return await this.select({ options, user, count: 1 });\n    }\n\n    // select\n    //   donot set atomDisabled\n    async select({\n      atomClass,\n      options: {\n        where,\n        orders,\n        page,\n        resourceType,\n        appKey,\n        star = 0,\n        label = 0,\n        stage = 'formal',\n        category = 0,\n        tag = 0,\n        locale,\n      },\n      user,\n      pageForce = false,\n      count = 0,\n    }) {\n      // atomClass\n      atomClass = atomClass || __atomClass;\n      // locale\n      if (locale !== false) {\n        locale = locale || ctx.locale;\n      }\n      // where\n      if (!where) where = {};\n      if (resourceType) {\n        where['f.resourceType'] = resourceType;\n      }\n      if (appKey === 'a-appbooster:appUnclassified') {\n        appKey = null;\n      }\n      if (appKey !== undefined) {\n        // appKey maybe null/empty string\n        where['f.appKey'] = appKey ? appKey : null;\n      }\n      // options\n      const options = {\n        where,\n        orders,\n        page,\n        star,\n        label,\n        stage,\n        category,\n        tag,\n        resource: 1,\n        resourceLocale: locale,\n      };\n      return await ctx.bean.atom.select({\n        atomClass,\n        options,\n        user,\n        pageForce,\n        count,\n      });\n    }\n\n    async readByStaticKey({ atomStaticKey, options, user }) {\n      if (!atomStaticKey) return ctx.throw.module('a-base', 1002);\n      // get atomId\n      const atom = await ctx.bean.atom.modelAtom.get({\n        atomStaticKey,\n        atomStage: 1,\n      });\n      if (!atom) return ctx.throw.module('a-base', 1016, atomStaticKey);\n      const atomId = atom.id;\n      // check resource right\n      const res = await this.checkRightResource({ resourceAtomId: atomId, user });\n      if (!res) ctx.throw(403);\n      // read\n      return await this.read({ key: { atomId }, options, user });\n    }\n\n    // read\n    async read({ key, options, user }) {\n      options = Object.assign({ resource: 1 }, options);\n      // locale\n      let locale = options.locale;\n      if (locale !== false) {\n        locale = locale || ctx.locale;\n      }\n      options.resourceLocale = locale;\n      return await ctx.bean.atom.read({ key, options, user });\n    }\n\n    async setLocales({ atomId, atomName }) {\n      // delete\n      await this.modelResourceLocale.delete({ atomId });\n      // setLocales\n      const locales = ctx.config.module(moduleInfo.relativeName).locales;\n      for (const locale in locales) {\n        await this.modelResourceLocale.insert({\n          atomId,\n          locale,\n          atomNameLocale: ctx.text.locale(locale, atomName),\n        });\n      }\n    }\n\n    async checkLocales() {\n      // setLocales\n      const locales = ctx.config.module(moduleInfo.relativeName).locales;\n      for (const locale in locales) {\n        await this._checkLocale({ locale });\n      }\n    }\n\n    async _checkLocale({ locale }) {\n      const resources = await this._checkResourceLocales({ locale });\n      if (resources.length === 0) return;\n      // insert locales\n      for (const resource of resources) {\n        await this.modelResourceLocale.insert({\n          atomId: resource.atomId,\n          locale,\n          atomNameLocale: ctx.text.locale(locale, resource.atomName),\n        });\n      }\n    }\n\n    async _checkResourceLocales({ locale }) {\n      const atomClasses = await this._getAtomClassesResource();\n      const atomClassIds = atomClasses.map(item => item.id);\n      const sql = this.sqlProcedure._checkResourceLocales({\n        iid: ctx.instance.id,\n        locale,\n        atomClassIds,\n      });\n      return await ctx.model.query(sql);\n    }\n\n    // check\n    async check({ atomStaticKeys, user }) {\n      const output = [];\n      for (const atomStaticKey of atomStaticKeys) {\n        const res = await this.checkRightResource({ atomStaticKey, user });\n        if (res) {\n          output.push({\n            passed: true,\n            atomId: res.atomId,\n            atomStaticKey,\n          });\n        } else {\n          output.push({\n            passed: false,\n            atomStaticKey,\n          });\n        }\n      }\n      return output;\n    }\n\n    async checkRightResource({ resourceAtomId, atomStaticKey, user }) {\n      // normal check\n      const res = await this._checkRightResource_normal({ resourceAtomId, atomStaticKey, user });\n      if (!res) return res;\n      // auth open check\n      const resAuthOpenCheck = await ctx.bean.authOpen.checkRightResource({ resourceAtomId: res.atomId });\n      if (!resAuthOpenCheck) return null;\n      // ok\n      return res;\n    }\n\n    async _checkRightResource_normal({ resourceAtomId, atomStaticKey, user }) {\n      if (!resourceAtomId) {\n        const atom = await ctx.bean.atom.modelAtom.get({ atomStaticKey, atomDisabled: 0, atomStage: 1 });\n        if (!atom) return null;\n        resourceAtomId = atom.id;\n      }\n      const sql = this.sqlProcedure.checkRightResource({\n        iid: ctx.instance.id,\n        userIdWho: user && user.id,\n        resourceAtomId,\n      });\n      return await ctx.model.queryOne(sql);\n    }\n\n    async resourceRoles({ key /* , user */ }) {\n      const items = await ctx.model.query(\n        `\n        select a.*,b.roleName from aResourceRole a\n          left join aRole b on a.roleId=b.id\n            where a.iid=? and a.atomId=?\n            order by b.roleName\n        `,\n        [ctx.instance.id, key.atomId]\n      );\n      // locale\n      for (const item of items) {\n        item.roleNameLocale = ctx.text(item.roleName);\n      }\n      // ok\n      return items;\n    }\n\n    // add resource role\n    async addResourceRole({ roleAtomId, roleId, atomId, atomStaticKey, user }) {\n      if (!atomId && !atomStaticKey) return null;\n      // atomId\n      atomId = await this._forceResourceAtomIdAndCheckRight({ atomId, atomStaticKey, user });\n      // role\n      const _role = await ctx.bean.role._forceRoleAndCheckRightRead({ roleAtomId, roleId, user });\n      roleId = _role.id;\n      // check if exists\n      const item = await this.modelResourceRole.get({\n        atomId,\n        roleId,\n      });\n      if (item) return item.id;\n      // insert\n      const res = await this.modelResourceRole.insert({\n        atomId,\n        roleId,\n      });\n      return res.insertId;\n    }\n\n    // delete resource role\n    async deleteResourceRole({ roleAtomId, roleId, atomId, atomStaticKey, user }) {\n      if (!atomId && !atomStaticKey) return null;\n      // atomId\n      atomId = await this._forceResourceAtomIdAndCheckRight({ atomId, atomStaticKey, user });\n      // role\n      const _role = await ctx.bean.role._forceRoleAndCheckRightRead({ roleAtomId, roleId, user });\n      roleId = _role.id;\n      // delete\n      await this.modelResourceRole.delete({\n        atomId,\n        roleId,\n      });\n    }\n\n    // const roleResources = [\n    //   { roleName: 'root', atomStaticKey: 'a-base:listComment' },\n    //   { roleName: 'root', name: 'listComment' },\n    // ];\n    async addRoleResourceBatch({ module, roleResources }) {\n      // module\n      module = module || this.moduleName;\n      // roleResources\n      if (!roleResources || !roleResources.length) return;\n      for (const roleResource of roleResources) {\n        // role\n        const role = await ctx.bean.role.parseRoleName({ roleName: roleResource.roleName, force: true });\n        // atomStaticKey\n        const atomStaticKey = roleResource.atomStaticKey || `${module}:${roleResource.name}`;\n        await this.addResourceRole({ atomStaticKey, roleId: role.id });\n      }\n    }\n\n    // add resource roles\n    async addResourceRoles({ roleAtomId, roleId, atomIds, user }) {\n      for (const atomId of atomIds) {\n        await this.addResourceRole({ roleAtomId, roleId, atomId, atomStaticKey: null, user });\n      }\n    }\n\n    async _getAtomClassesResource() {\n      if (__atomClassesResource) return __atomClassesResource;\n      const atomClassesResource = [];\n      const atomClasses = ctx.bean.base.atomClasses();\n      for (const module in atomClasses) {\n        const atomClassesModule = atomClasses[module];\n        for (const atomClassName in atomClassesModule) {\n          const atomClass = atomClassesModule[atomClassName];\n          if (atomClass.resource) {\n            const item = await ctx.bean.atomClass.get({ module, atomClassName });\n            atomClassesResource.push(item);\n          }\n        }\n      }\n      __atomClassesResource = atomClassesResource;\n      return __atomClassesResource;\n    }\n\n    // admin\n\n    async resourceRights({ roleAtomId, roleId, page }) {\n      // check locale\n      const locale = ctx.locale;\n      // items\n      roleId = await ctx.bean.role._forceRoleId({ roleAtomId, roleId });\n      page = ctx.bean.util.page(page, false);\n      const _limit = ctx.model._limit(page.size, page.index);\n      const items = await ctx.model.query(\n        `\n        select a.*,\n               b.atomName,b.atomDisabled,b.atomCategoryId,\n               f.categoryName as atomCategoryName,\n               c.module,c.atomClassName,\n               d.atomNameLocale,e.resourceType\n          from aResourceRole a\n            inner join aAtom b on a.atomId=b.id\n            inner join aAtomClass c on b.atomClassId=c.id\n            left join aResourceLocale d on a.atomId=d.atomId and d.locale=?\n            left join aResource e on a.atomId=e.atomId\n            left join aCategory f on b.atomCategoryId=f.id\n          where a.iid=? and a.deleted=0 and a.roleId=? and b.deleted=0 and b.atomStage=1\n            order by c.module,b.atomClassId,e.resourceType,b.atomCategoryId\n            ${_limit}\n        `,\n        [locale, ctx.instance.id, roleId]\n      );\n      // locale\n      this._resourceRightsLocale({ items });\n      // ok\n      return items;\n    }\n\n    async resourceSpreads({ roleAtomId, roleId, page }) {\n      // check locale\n      const locale = ctx.locale;\n      // items\n      roleId = await ctx.bean.role._forceRoleId({ roleAtomId, roleId });\n      page = ctx.bean.util.page(page, false);\n      const _limit = ctx.model._limit(page.size, page.index);\n      const items = await ctx.model.query(\n        `\n        select g.*,g.id as roleExpandId, a.id as resourceRoleId,\n               b.atomName,b.atomDisabled,b.atomCategoryId,\n               f.categoryName as atomCategoryName,\n               c.module,c.atomClassName,\n               d.atomNameLocale,e.resourceType,\n               h.roleName as roleNameBase\n          from aResourceRole a\n            inner join aAtom b on a.atomId=b.id\n            inner join aAtomClass c on b.atomClassId=c.id\n            left join aResourceLocale d on a.atomId=d.atomId and d.locale=?\n            left join aResource e on a.atomId=e.atomId\n            left join aCategory f on b.atomCategoryId=f.id\n            left join aRoleExpand g on a.roleId=g.roleIdBase\n            left join aRole h on g.roleIdBase=h.id\n          where g.iid=? and g.deleted=0 and g.roleId=? and b.deleted=0 and b.atomStage=1\n            order by c.module,b.atomClassId,e.resourceType,b.atomCategoryId\n            ${_limit}\n        `,\n        [locale, ctx.instance.id, roleId]\n      );\n      // locale\n      this._resourceRightsLocale({ items });\n      // ok\n      return items;\n    }\n\n    async resourceRightsOfUser({ userAtomId, userId, page }) {\n      userId = await ctx.bean.user._forceUserId({ userAtomId, userId });\n      // check locale\n      const locale = ctx.locale;\n      // items\n      page = ctx.bean.util.page(page, false);\n      const _limit = ctx.model._limit(page.size, page.index);\n      const items = await ctx.model.query(\n        `\n        select a.*,\n               b.atomName,b.atomDisabled,b.atomCategoryId,\n               f.categoryName as atomCategoryName,\n               c.module,c.atomClassName,\n               d.atomNameLocale,e.resourceType,\n               h.roleName as roleNameBase\n          from aViewUserRightResource a\n            inner join aAtom b on a.resourceAtomId=b.id\n            inner join aAtomClass c on b.atomClassId=c.id\n            left join aResourceLocale d on a.resourceAtomId=d.atomId and d.locale=?\n            left join aResource e on a.resourceAtomId=e.atomId\n            left join aCategory f on b.atomCategoryId=f.id\n            left join aRole h on a.roleIdBase=h.id\n          where a.iid=? and a.userIdWho=? and b.deleted=0 and b.atomStage=1\n            order by c.module,b.atomClassId,e.resourceType,b.atomCategoryId\n            ${_limit}\n        `,\n        [locale, ctx.instance.id, userId]\n      );\n      // locale\n      this._resourceRightsLocale({ items });\n      // ok\n      return items;\n    }\n\n    _resourceRightsLocale({ items }) {\n      // resourceTypes for a-base:resource\n      const resourceTypes = ctx.bean.base.resourceTypes();\n      // locale\n      for (const item of items) {\n        // resource type\n        const resourceType = resourceTypes[item.resourceType];\n        if (resourceType) {\n          item.resourceTypeLocale = resourceType.titleLocale;\n        }\n        // category name\n        item.atomCategoryNameLocale = ctx.text(item.atomCategoryName);\n        // roleNameBase\n        if (item.roleNameBase) {\n          item.roleNameBaseLocale = ctx.text(item.roleNameBase);\n        }\n      }\n    }\n\n    async _forceResourceAtomId({ atomId, atomStaticKey }) {\n      if (!atomId) {\n        const atom = await ctx.bean.atom.modelAtom.get({\n          atomStaticKey,\n          atomStage: 1, // formal\n        });\n        if (!atom) {\n          throw new Error(`resource not found: ${atomStaticKey}`);\n        }\n        atomId = atom.id;\n      }\n      return atomId;\n    }\n\n    async _forceResourceAtomIdAndCheckRight({ atomId, atomStaticKey, user }) {\n      atomId = await this._forceResourceAtomId({ atomId, atomStaticKey });\n      if (!user || user.id === 0) return atomId;\n      // check\n      const res = await this.checkRightResource({ resourceAtomId: atomId, user });\n      if (!res) ctx.throw(403);\n      return atomId;\n    }\n\n    // /* backup */\n\n    // // function rights\n    // async functionRights({ menu, roleId, page }) {\n    //   // check locale\n    //   const locale = ctx.locale;\n    //   // list\n    //   page = ctx.bean.util.page(page, false);\n    //   const _limit = ctx.model._limit(page.size, page.index);\n    //   const list = await ctx.model.query(`\n    //     select a.*,b.module,b.name,b.title,b.sceneId,g.sceneName,b.sorting,f.titleLocale from aRoleFunction a\n    //       left join aFunction b on a.functionId=b.id\n    //       left join aFunctionLocale f on a.functionId=f.functionId\n    //       left join aFunctionScene g on g.id=b.sceneId\n    //         where a.iid=? and a.roleId=? and b.menu=? and f.locale=?\n    //         order by b.module,g.sceneSorting,b.sorting\n    //         ${_limit}\n    //     `, [ ctx.instance.id, roleId, menu, locale ]);\n    //   return list;\n    // }\n\n    // // function spreads\n    // async functionSpreads({ menu, roleId, page }) {\n    //   // check locale\n    //   const locale = ctx.locale;\n    //   // list\n    //   page = ctx.bean.util.page(page, false);\n    //   const _limit = ctx.model._limit(page.size, page.index);\n    //   const list = await ctx.model.query(`\n    //     select d.*,d.id as roleExpandId,a.id as roleFunctionId,b.module,b.name,b.title,b.sceneId,g.sceneName,e.roleName,f.titleLocale from aRoleFunction a\n    //       left join aFunction b on a.functionId=b.id\n    //       left join aRoleExpand d on a.roleId=d.roleIdBase\n    //       left join aRole e on d.roleIdBase=e.id\n    //       left join aFunctionLocale f on a.functionId=f.functionId\n    //       left join aFunctionScene g on g.id=b.sceneId\n    //         where d.iid=? and d.roleId=? and b.menu=? and f.locale=?\n    //         order by b.module,g.sceneSorting,b.sorting\n    //         ${_limit}\n    //     `, [ ctx.instance.id, roleId, menu, locale ]);\n    //   return list;\n    // }\n\n    // // function rights of user\n    // async functionRightsOfUser({ menu, userId, page }) {\n    //   // check locale\n    //   const locale = ctx.locale;\n    //   // list\n    //   page = ctx.bean.util.page(page, false);\n    //   const _limit = ctx.model._limit(page.size, page.index);\n    //   const list = await ctx.model.query(`\n    //     select a.*,b.module,b.name,b.title,b.sceneId,g.sceneName,b.sorting,f.titleLocale,e.roleName from aViewUserRightFunction a\n    //       left join aFunction b on a.functionId=b.id\n    //       left join aFunctionLocale f on a.functionId=f.functionId\n    //       left join aFunctionScene g on g.id=b.sceneId\n    //       left join aRole e on a.roleIdBase=e.id\n    //         where a.iid=? and a.userIdWho=? and b.menu=? and f.locale=?\n    //         order by b.module,g.sceneSorting,b.sorting\n    //         ${_limit}\n    //     `, [ ctx.instance.id, userId, menu, locale ]);\n\n    //   return list;\n    // }\n  }\n\n  return Resource;\n};\n","const role_base = require('./bean.role/bean.role_base.js');\nconst role_atomRights = require('./bean.role/bean.role_atomRights.js');\nconst role_build = require('./bean.role/bean.role_build.js');\nconst role_includes = require('./bean.role/bean.role_includes.js');\nconst role_others = require('./bean.role/bean.role_others.js');\nconst role_resourceRights = require('./bean.role/bean.role_resourceRights.js');\nconst role_users = require('./bean.role/bean.role_users.js');\nconst role_flow = require('./bean.role/bean.role_flow.js');\n\nmodule.exports = ctx => {\n  return ctx.app.meta.util.mixinClasses(\n    role_base,\n    [\n      role_atomRights, //\n      role_build,\n      role_includes,\n      role_others,\n      role_resourceRights,\n      role_users,\n      role_flow,\n    ],\n    ctx\n  );\n};\n","module.exports = ctx => {\n  // const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Role {\n    // add role right\n    async addRoleRight({ roleAtomId, roleId, atomClassId, action, scope, areaKey, areaScope, user }) {\n      // check atomClass/action\n      const _check = await ctx.bean.atomClass.checkRightAtomClassAction({ atomClassId, action, user });\n      if (!_check) ctx.throw(403);\n      // area scope\n      const adjustRes = ctx.bean.areaScope.adjustKeyAndValue({ atomAreaKey: areaKey, atomAreaValue: areaScope });\n      areaKey = adjustRes.atomAreaKey;\n      areaScope = adjustRes.atomAreaValue;\n      // check role\n      const _role = await this._forceRoleAndCheckRightRead({ roleAtomId, roleId, user });\n      roleId = _role.id;\n      // scope: allowed []\n      if (scope) {\n        if (typeof scope === 'string') {\n          scope = scope.split(',');\n        } else if (!Array.isArray(scope)) {\n          scope = [scope];\n        }\n        // check right\n        for (const roleIdScope of scope) {\n          await this._forceRoleAndCheckRightRead({ roleAtomId: null, roleId: roleIdScope, user });\n        }\n      }\n\n      // force action exists in db\n      await ctx.bean.atomAction.get({ atomClassId, code: action });\n\n      // roleRight\n      const res = await this.modelRoleRight.insert({\n        roleId,\n        atomClassId,\n        action,\n        scope: JSON.stringify(scope),\n        areaKey,\n        areaScope,\n      });\n      const roleRightId = res.insertId;\n      // roleRightRef\n      if (scope) {\n        for (const roleIdScope of scope) {\n          await this.modelRoleRightRef.insert({\n            roleRightId,\n            roleId,\n            atomClassId,\n            action,\n            roleIdScope,\n            areaKey,\n            areaScope,\n          });\n        }\n      }\n      return roleRightId;\n    }\n\n    // delete role right\n    async deleteRoleRight({ roleAtomId, roleId, roleRightId, user }) {\n      // role\n      const _role = await this._forceRoleAndCheckRightRead({ roleAtomId, roleId, user });\n      roleId = _role.id;\n      // scope\n      const item = await this.modelRoleRight.get({ id: roleRightId });\n      const scope = JSON.parse(item.scope);\n      if (scope) {\n        // check right\n        for (const roleIdScope of scope) {\n          await this._forceRoleAndCheckRightRead({ roleAtomId: null, roleId: roleIdScope, user });\n        }\n      }\n      // id + roleId for safety\n      await this.modelRoleRight.delete({ id: roleRightId, roleId });\n      await this.modelRoleRightRef.delete({ roleRightId, roleId });\n    }\n\n    async deleteRoleRightByAction({ atomClassId, action }) {\n      await this.modelRoleRight.delete({ atomClassId, action });\n      await this.modelRoleRightRef.delete({ atomClassId, action });\n    }\n\n    // const roleRights = [\n    //   { roleName: 'cms-writer', action: 'create' },\n    //   { roleName: 'cms-writer', action: 'write', scopeNames: 0 },\n    //   { roleName: 'cms-writer', action: 'delete', scopeNames: 0 },\n    //   { roleName: 'cms-writer', action: 'read', scopeNames: 'authenticated' },\n    //   { roleName: 'root', action: 'read', scopeNames: 'authenticated', areaKey: null, areaScope: null },\n    // ];\n    async addRoleRightBatch({ module, atomClassName, atomClassIdParent = 0, roleRights }) {\n      // module\n      module = module || this.moduleName;\n      // const _module = ctx.app.meta.modules[module];\n      // atomClass\n      const atomClass = await ctx.bean.atomClass.get({ module, atomClassName, atomClassIdParent });\n      // roleRights\n      if (!roleRights || !roleRights.length) return;\n      for (const roleRight of roleRights) {\n        // role\n        let role;\n        if (roleRight.roleAtomId || roleRight.roleId) {\n          role = await this._forceRole({ roleAtomId: roleRight.roleAtomId, roleId: roleRight.roleId });\n        } else {\n          role = await this.parseRoleName({ roleName: roleRight.roleName, force: true });\n        }\n        // scope\n        const scope = await this._parseScopeNames({ scopeNames: roleRight.scopeNames });\n        // add role right\n        const actionCode = ctx.bean.atomAction.parseActionCode({\n          action: roleRight.action,\n          atomClass: {\n            module,\n            atomClassName,\n          },\n        });\n        await this.addRoleRight({\n          roleId: role.id,\n          atomClassId: atomClass.id,\n          action: actionCode,\n          scope,\n          areaKey: roleRight.areaKey,\n          areaScope: roleRight.areaScope,\n        });\n      }\n    }\n\n    async _parseScopeNames({ scopeNames }) {\n      let scope;\n      if (!scopeNames) {\n        scope = 0;\n      } else {\n        scope = [];\n        const _scopeNames = Array.isArray(scopeNames) ? scopeNames : scopeNames.split(',');\n        for (const scopeName of _scopeNames) {\n          let roleScopeId;\n          if (typeof scopeName === 'number') {\n            roleScopeId = scopeName;\n          } else {\n            const roleScope = await this.parseRoleName({ roleName: scopeName, force: false });\n            roleScopeId = roleScope.id;\n          }\n          scope.push(roleScopeId);\n        }\n      }\n      return scope;\n    }\n\n    // role rights\n    async roleRights({ roleAtomId, roleId, page }) {\n      roleId = await this._forceRoleId({ roleAtomId, roleId });\n      page = ctx.bean.util.page(page, false);\n      const _limit = ctx.model._limit(page.size, page.index);\n      const items = await ctx.model.query(\n        `\n        select a.*,b.module,b.atomClassName,c.name as actionName,c.bulk as actionBulk,c.actionMode,d.atomName as flowDefName from aRoleRight a\n          inner join aAtomClass b on a.atomClassId=b.id\n          inner join aAtomAction c on a.atomClassId=c.atomClassId and a.action=c.code\n          left join aAtom d on c.flowKey=d.atomStaticKey and d.atomStage=1\n            where a.iid=? and a.roleId=?\n            order by b.module,a.atomClassId,a.action\n            ${_limit}\n        `,\n        [ctx.instance.id, roleId]\n      );\n      // scope\n      await this._adjustAtomRightsScopeRoles({ items });\n      // area scope\n      await this._translateAreaScopeValue({ items });\n      // actionFlows\n      await this._adjustFlowActionsLocale({ items, actionNameKey: 'actionName' });\n      // ok\n      return items;\n    }\n\n    // role spreads\n    async roleSpreads({ roleAtomId, roleId, page }) {\n      roleId = await this._forceRoleId({ roleAtomId, roleId });\n      page = ctx.bean.util.page(page, false);\n      const _limit = ctx.model._limit(page.size, page.index);\n      const items = await ctx.model.query(\n        `\n        select d.*,d.id as roleExpandId,a.id as roleRightId,a.scope,a.areaKey,a.areaScope,b.module,b.atomClassName,c.code as actionCode,c.name as actionName,c.bulk as actionBulk,c.actionMode,e.roleName as roleNameBase,f.atomName as flowDefName from aRoleRight a\n          inner join aAtomClass b on a.atomClassId=b.id\n          inner join aAtomAction c on a.atomClassId=c.atomClassId and a.action=c.code\n          inner join aRoleExpand d on a.roleId=d.roleIdBase\n          inner join aRole e on d.roleIdBase=e.id\n          left join aAtom f on c.flowKey=f.atomStaticKey and f.atomStage=1\n            where d.iid=? and d.roleId=?\n            order by b.module,a.atomClassId,a.action\n            ${_limit}\n        `,\n        [ctx.instance.id, roleId]\n      );\n      // scope\n      await this._adjustAtomRightsScopeRoles({ items });\n      // area scope\n      await this._translateAreaScopeValue({ items });\n      // locale\n      await this._adjustAtomRightsLocale({ items });\n      // actionFlows\n      await this._adjustFlowActionsLocale({ items, actionNameKey: 'actionName' });\n      // ok\n      return items;\n    }\n\n    // atom rights of user\n    async atomRightsOfUser({ userAtomId, userId, page }) {\n      userId = await ctx.bean.user._forceUserId({ userAtomId, userId });\n      page = ctx.bean.util.page(page, false);\n      const _limit = ctx.model._limit(page.size, page.index);\n      const items = await ctx.model.query(\n        `\n        select a.*,b.module,b.atomClassName,c.code as actionCode,c.name as actionName,c.bulk as actionBulk,c.actionMode,e.roleName as roleNameBase,f.atomName as flowDefName from aViewUserRightAtomClass a\n          inner join aAtomClass b on a.atomClassId=b.id\n          inner join aAtomAction c on a.atomClassId=c.atomClassId and a.action=c.code\n          inner join aRole e on a.roleIdBase=e.id\n          left join aAtom f on c.flowKey=f.atomStaticKey and f.atomStage=1 \n            where a.iid=? and a.userIdWho=?\n            order by b.module,a.atomClassId,a.action\n            ${_limit}\n        `,\n        [ctx.instance.id, userId]\n      );\n      // scope\n      await this._adjustAtomRightsScopeRoles({ items });\n      // area scope\n      await this._translateAreaScopeValue({ items });\n      // locale\n      await this._adjustAtomRightsLocale({ items });\n      // actionFlows\n      await this._adjustFlowActionsLocale({ items, actionNameKey: 'actionName' });\n      // ok\n      return items;\n    }\n\n    async _adjustAtomRightsScopeRoles({ items }) {\n      for (const item of items) {\n        const scope = JSON.parse(item.scope);\n        item.scopeRoles = await this._scopeRoles({ scope });\n      }\n    }\n\n    async _adjustAtomRightsLocale({ items }) {\n      for (const item of items) {\n        // roleNameBase\n        if (item.roleNameBase) {\n          item.roleNameBaseLocale = ctx.text(item.roleNameBase);\n        }\n      }\n    }\n\n    async _scopeRoles({ scope }) {\n      if (!scope || scope.length === 0) return null;\n      const items = await ctx.model.query(\n        `\n            select a.* from aRole a\n              where a.iid=? and a.id in (${scope.join(',')})\n            `,\n        [ctx.instance.id]\n      );\n      return this._translateRoleNamesLocale({ items });\n    }\n\n    _translateRoleNamesLocale({ items }) {\n      for (const item of items) {\n        item.roleNameLocale = ctx.text(item.roleName);\n      }\n      return items;\n    }\n\n    async _translateAreaScopeValue({ items }) {\n      for (const item of items) {\n        // area scope\n        const res = await ctx.bean.atom.translateAreaScopeValue({\n          atomClass: { module: item.module, atomClassName: item.atomClassName },\n          atomAreaKey: item.areaKey,\n          atomAreaValue: item.areaScope,\n        });\n        if (res) {\n          item.areaScopeInfo = res;\n        }\n      }\n    }\n\n    // actionFlows\n    async _adjustFlowActionsLocale({ items, actionNameKey }) {\n      for (const item of items) {\n        if (item.actionMode === 1) {\n          item[`${actionNameKey}Locale`] = ctx.text(item[actionNameKey] || 'Unnamed');\n          item.flowDefNameLocale = ctx.text(item.flowDefName);\n        }\n      }\n    }\n  }\n\n  return Role;\n};\n","const initData15 = require('../version/initData15.js');\n\nmodule.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  const __atomClassRole = {\n    module: moduleInfo.relativeName,\n    atomClassName: 'role',\n  };\n\n  class Role extends ctx.app.meta.BeanModuleBase {\n    constructor(moduleName) {\n      super(ctx, 'role');\n      this.moduleName = moduleName || ctx.module.info.relativeName;\n    }\n\n    get model() {\n      return ctx.model.module(moduleInfo.relativeName).role;\n    }\n\n    get modelRoleInc() {\n      return ctx.model.module(moduleInfo.relativeName).roleInc;\n    }\n\n    get modelUserRole() {\n      return ctx.model.module(moduleInfo.relativeName).userRole;\n    }\n\n    get modelRoleRight() {\n      return ctx.model.module(moduleInfo.relativeName).roleRight;\n    }\n\n    get modelRoleRightRef() {\n      return ctx.model.module(moduleInfo.relativeName).roleRightRef;\n    }\n\n    get modelAtom() {\n      return ctx.model.module(moduleInfo.relativeName).atom;\n    }\n\n    async get(where) {\n      return await this.model.get(where);\n    }\n\n    async getSystemRole({ roleName }) {\n      return await this.get({\n        roleName,\n        system: 1,\n      });\n    }\n\n    // add role\n    //  { module,roleName,...}\n    async add(data, user, returnKey) {\n      if (!user) {\n        user = { id: 0 };\n      }\n      // create\n      const itemCreate = {\n        catalog: 0,\n        system: data.system,\n        roleIdParent: data.roleIdParent,\n      };\n      if (data.module && data.roleName) {\n        itemCreate.atomStaticKey = `${data.module}:role_${data.roleName}`;\n      }\n      const roleKey = await ctx.bean.atom.create({\n        atomClass: __atomClassRole,\n        item: itemCreate,\n        user,\n      });\n      // write\n      const item = { ...data };\n      if (data.roleName) {\n        item.atomName = data.roleName;\n      }\n      await ctx.bean.atom.write({\n        key: roleKey,\n        item,\n        user,\n      });\n      // submit\n      await ctx.bean.atom.submit({\n        key: roleKey,\n        options: { ignoreFlow: true },\n        user,\n      });\n      // ok\n      return returnKey ? roleKey : roleKey.itemId;\n    }\n\n    async addChild({ roleAtomId, roleId, user }) {\n      roleId = await this._forceRoleId({ roleAtomId, roleId });\n      const key = await this.add({ roleIdParent: roleId }, user, true);\n      const atom = await ctx.bean.atom.read({ key, user });\n      return { key, atom };\n    }\n\n    async move({ roleAtomId, roleId, roleIdParent }) {\n      // role\n      const role = await this._forceRole({ roleAtomId, roleId });\n      // roleIdParentOld\n      const roleIdParentOld = role.roleIdParent;\n      if (roleIdParentOld === roleIdParent) return;\n      // update\n      await this.model.update({ id: role.id, roleIdParent });\n\n      // adjust catalog\n      await this.adjustCatalog(roleIdParentOld);\n      await this.adjustCatalog(roleIdParent);\n\n      // set dirty\n      await this.setDirty(true);\n    }\n\n    async delete({ roleAtomId, roleId, force = false }) {\n      roleAtomId = await this._forceRoleAtomId({ roleAtomId, roleId });\n      // delete this\n      await ctx.bean.atom.delete({ key: { atomId: roleAtomId }, options: { force } });\n    }\n\n    async clone({ roleAtomId, roleId, user }) {\n      roleAtomId = await this._forceRoleAtomId({ roleAtomId, roleId });\n      // clone\n      return await ctx.bean.atom.clone({ key: { atomId: roleAtomId }, user });\n    }\n\n    // for donothing on roleId === 0\n    async adjustCatalog(roleId) {\n      if (roleId === 0) return;\n      const children = await this.children({ roleId, page: false });\n      await this.model.update({\n        id: roleId,\n        catalog: children.length === 0 ? 0 : 1,\n      });\n    }\n\n    async parseRoleNames({ roleNames, force = false }) {\n      const arr = roleNames.split(',');\n      const res = [];\n      for (const roleName of arr) {\n        const role = await this.parseRoleName({ roleName, force });\n        res.push(role); // not check if null\n      }\n      return res;\n    }\n\n    // roleA.roleB\n    async parseRoleName({ roleName, roleIdParent, force = false }) {\n      // parse\n      const role = await this._parseRoleName_general({ roleName, roleIdParent, force });\n      // special check 'authenticated.builtIn'\n      if (!role && roleName === 'authenticated.builtIn') {\n        await this._initSystemRoles({\n          module: moduleInfo.relativeName,\n          rolesData: initData15.roles,\n        });\n        return await this._parseRoleName_general({ roleName });\n      }\n      // ok\n      return role;\n    }\n\n    async _parseRoleName_general({ roleName, roleIdParent, force = false }) {\n      if (!roleName) throw new Error('roleName should not be empty');\n      const roleNames = roleName.split('.');\n      let role;\n      for (const _roleName of roleNames) {\n        if (roleIdParent === undefined) {\n          role = await this.get({ roleName: _roleName });\n        } else {\n          role = await this.child({\n            roleId: roleIdParent,\n            roleName: _roleName,\n          });\n        }\n        // next\n        if (role) {\n          roleIdParent = role.id;\n          continue;\n        }\n        // null\n        if (!roleIdParent || !force) return null;\n        // create\n        const roleId = await this._register({\n          roleName: _roleName,\n          roleIdParent,\n        });\n        role = await this.get({ id: roleId });\n        // next\n        roleIdParent = roleId;\n      }\n      // ok\n      return role;\n    }\n\n    async item({ roleAtomId, roleId }) {\n      roleAtomId = await this._forceRoleAtomId({ roleAtomId, roleId });\n      return await ctx.bean.atom.read({ key: { atomId: roleAtomId } });\n    }\n\n    // child\n    async child({ roleId, roleName }) {\n      const list = await this.children({ roleId, roleName, page: false });\n      return list[0];\n    }\n\n    // childrenTop\n    async childrenTop({ roleTypes, page, user }) {\n      if (!user) user = { id: 0 };\n      // page\n      page = ctx.bean.util.page(page, false);\n      // atomClass\n      const atomClass = await ctx.bean.atomClass.get(__atomClassRole);\n      // roles by auth\n      let roleIds = await this._childrenTop_byAuth({ roleTypes, atomClass, user });\n      if (roleIds.length === 0) return [];\n      // filter\n      roleIds = await this._childrenTop_filter({ roleIds });\n      if (roleIds.length === 0) return [];\n      // select\n      const list = await this._childrenTop_select({ roleIds, atomClass, page, user });\n      return list;\n    }\n\n    async _childrenTop_byAuth({ roleTypes, atomClass, user }) {\n      let roleIds;\n      if (user.id === 0) {\n        const roleRoot = await this.parseRoleName({ roleName: 'root' });\n        roleIds = [roleRoot.id];\n      } else {\n        let sql;\n        if (!roleTypes || roleTypes.length === 0) {\n          sql = `\n            select * from aViewUserRightRefAtomClass a\n              where a.iid=? and a.userIdWho=? and a.atomClassId=? and a.action=2\n          `;\n        } else {\n          sql = `\n            select * from aViewUserRightRefAtomClass a\n              inner join aRole b on a.roleIdWhom=b.id\n              where a.iid=? and a.userIdWho=? and a.atomClassId=? and a.action=2\n                    and b.roleTypeCode in (${roleTypes.join(',')})\n          `;\n        }\n        const roles = await ctx.model.query(sql, [ctx.instance.id, user.id, atomClass.id]);\n        roleIds = roles.map(item => item.roleIdWhom);\n      }\n      return roleIds;\n    }\n\n    async _childrenTop_filter({ roleIds }) {\n      if (roleIds.length <= 1) return roleIds;\n      const items = await ctx.model.query(\n        `\n          select * from aRoleRef a \n            where a.iid=? and a.roleId in (${roleIds.join(',')})\n        `,\n        [ctx.instance.id]\n      );\n      const res = [];\n      for (const roleId of roleIds) {\n        const exists = items.some(item => {\n          return item.roleId === roleId && item.level > 0 && roleIds.includes(item.roleIdParent);\n        });\n        if (!exists) {\n          res.push(roleId);\n        }\n      }\n      return res;\n    }\n\n    async _childrenTop_select({ roleIds, atomClass, page, user }) {\n      // select\n      return await ctx.bean.atom.select({\n        atomClass,\n        options: {\n          orders: [['a.id', 'asc']],\n          page,\n          stage: 'formal',\n          where: {\n            'f.id': {\n              op: 'in',\n              val: roleIds,\n            },\n          },\n        },\n        user,\n        pageForce: false,\n      });\n    }\n\n    // children\n    async children({ roleTypes, roleId, roleName, page, user }) {\n      if (!user) user = { id: 0 };\n      // page\n      page = ctx.bean.util.page(page, false);\n      // roleId\n      if (!roleId || roleId === 'root') {\n        roleId = 0;\n      }\n      // where\n      const where = { 'f.roleIdParent': roleId };\n      if (roleName !== undefined) {\n        where['f.roleName'] = roleName;\n      }\n      if (roleTypes && roleTypes.length > 0) {\n        where['f.roleTypeCode'] = {\n          op: 'in',\n          val: roleTypes,\n        };\n      }\n      // select\n      const list = await ctx.bean.atom.select({\n        atomClass: __atomClassRole,\n        options: {\n          orders: [\n            ['f.sorting', 'asc'],\n            ['f.roleName', 'asc'],\n          ],\n          page,\n          stage: 'formal',\n          where,\n        },\n        user,\n        pageForce: false,\n      });\n      return list;\n    }\n\n    // save\n    async save({ roleId, data: { roleName, leader, sorting, catalog } }) {\n      const role = await this.get({ id: roleId });\n      if (roleName !== undefined) role.roleName = roleName;\n      if (leader !== undefined) role.leader = leader;\n      if (sorting !== undefined) role.sorting = sorting;\n      if (catalog !== undefined) role.catalog = catalog;\n      await this.model.update(role);\n      // atomName\n      if (roleName !== undefined && role.roleName !== roleName) {\n        await this.modelAtom.update({ id: role.atomId, atomName: roleName });\n      }\n    }\n\n    async _register({ roleName, roleIdParent }) {\n      return await ctx.meta.util.lock({\n        resource: `${moduleInfo.relativeName}.role.register`,\n        fn: async () => {\n          return await ctx.meta.util.executeBeanIsolate({\n            beanModule: moduleInfo.relativeName,\n            beanFullName: 'role',\n            context: { roleName, roleIdParent },\n            fn: '_registerLock',\n          });\n        },\n      });\n    }\n\n    async _registerLock({ roleName, roleIdParent }) {\n      // get again\n      const role = await this.child({\n        roleId: roleIdParent,\n        roleName,\n      });\n      if (role) return role.id;\n      // add\n      return await this.add({ roleName, roleIdParent });\n    }\n\n    async _initSystemRoles({ module, rolesData }) {\n      const roleIds = {};\n      // system roles\n      for (const roleName in rolesData) {\n        let role = rolesData[roleName];\n        const exists = await this.getSystemRole({ roleName });\n        if (!exists) {\n          // parent\n          let roleIdParent;\n          if (role.roleIdParent === '__system__') {\n            roleIdParent = 0;\n          } else {\n            roleIdParent = roleIds[role.roleIdParent];\n            if (!roleIdParent) {\n              // parent\n              const roleParent = await this.getSystemRole({ roleName: role.roleIdParent });\n              roleIdParent = roleParent.id;\n            }\n          }\n          // add\n          role = ctx.bean.util.extend({ module }, role, { roleIdParent });\n          roleIds[roleName] = await this.add(role);\n        }\n      }\n      return roleIds;\n    }\n  }\n\n  return Role;\n};\n","module.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Role {\n    // set dirty\n    async setDirty(dirty) {\n      await ctx.bean.status.module(moduleInfo.relativeName).set('roleDirty', dirty);\n    }\n\n    async getDirty() {\n      return await ctx.bean.status.module(moduleInfo.relativeName).get('roleDirty');\n    }\n\n    // build roles\n    async build(options) {\n      options = options || {};\n      const progressId = options.progressId;\n      // check dirty\n      const dirty = await this.getDirty();\n      if (!dirty) {\n        // done\n        if (progressId) {\n          await ctx.bean.progress.done({ progressId });\n        }\n        return;\n      }\n      // queue\n      await ctx.meta.util.queuePushAsync({\n        module: moduleInfo.relativeName,\n        queueName: 'roleBuild',\n        data: { options },\n      });\n    }\n\n    async _buildQueue(options) {\n      options = options || {};\n      const progressId = options.progressId;\n      // check dirty again\n      const dirty = await this.getDirty();\n      if (!dirty) {\n        // done\n        if (progressId) {\n          await ctx.bean.progress.done({ progressId });\n        }\n        return;\n      }\n      // total\n      let total;\n      if (progressId) {\n        total = await this.model.count();\n      }\n      // progress\n      const progress = { progressId, total, progress: 0 };\n      try {\n        // iid\n        const iid = ctx.instance.id;\n        // remove\n        await this._buildRolesRemove({ iid });\n        // add\n        await this._buildRolesAdd({ iid, roleIdParent: 0 }, progress);\n        // setDirty\n        await this.setDirty(false);\n        // done\n        if (progressId) {\n          await ctx.bean.progress.done({ progressId });\n        }\n      } catch (err) {\n        // error\n        if (progressId) {\n          await ctx.bean.progress.error({ progressId, message: err.message });\n        }\n        throw err;\n      }\n    }\n\n    async _buildRolesRemove({ iid }) {\n      await ctx.model.query(`delete from aRoleRef where aRoleRef.iid=${iid}`);\n      await ctx.model.query(`delete from aRoleIncRef where aRoleIncRef.iid=${iid}`);\n      await ctx.model.query(`delete from aRoleExpand where aRoleExpand.iid=${iid}`);\n    }\n\n    async _buildRolesAdd({ iid, roleIdParent }, progress) {\n      const list = await ctx.model.query(\n        `select a.id,a.roleName,a.catalog from aRole a where a.iid=${iid} and a.roleIdParent=${roleIdParent}`\n      );\n      for (const item of list) {\n        // info\n        const roleId = item.id;\n        const catalog = item.catalog;\n        // build\n        await this._buildRoleRef({ iid, roleId });\n        await this._buildRoleIncRef({ iid, roleId });\n        await this._buildRoleExpand({ iid, roleId });\n        // catalog\n        if (catalog === 1) {\n          await this._buildRolesAdd({ iid, roleIdParent: roleId }, progress);\n        }\n        // progress\n        if (progress.progressId) {\n          await ctx.bean.progress.update({\n            progressId: progress.progressId,\n            progressNo: 0,\n            total: progress.total,\n            progress: progress.progress++,\n            text: item.roleName,\n          });\n        }\n      }\n    }\n\n    async _buildRoleRef({ iid, roleId }) {\n      let level = 0;\n      let roleIdParent = roleId;\n      // loop\n      while (level !== -1) {\n        await ctx.model.query(\n          `insert into aRoleRef(iid,roleId,roleIdParent,level)\n             values(${iid},${roleId},${roleIdParent},${level})\n          `\n        );\n        const item = await ctx.model.queryOne(\n          `select a.roleIdParent from aRole a where a.iid=${iid} and a.id=${roleIdParent}`\n        );\n        if (!item || !item.roleIdParent) {\n          level = -1;\n        } else {\n          roleIdParent = item.roleIdParent;\n          level++;\n        }\n      }\n    }\n\n    async _buildRoleIncRef({ iid, roleId }) {\n      await ctx.model.query(\n        `insert into aRoleIncRef(iid,roleId,roleIdInc,roleIdSrc)\n            select ${iid},${roleId},a.roleIdInc,a.roleId from aRoleInc a\n              where a.iid=${iid} and a.roleId in (select b.roleIdParent from aRoleRef b where b.iid=${iid} and b.roleId=${roleId})\n        `\n      );\n    }\n\n    async _buildRoleExpand({ iid, roleId }) {\n      await ctx.model.query(\n        `insert into aRoleExpand(iid,roleId,roleIdBase)\n            select a.iid,a.roleId,a.roleIdParent from aRoleRef a\n              where a.iid=${iid} and a.roleId=${roleId}\n        `\n      );\n      await ctx.model.query(\n        `insert into aRoleExpand(iid,roleId,roleIdBase)\n            select a.iid,a.roleId,a.roleIdInc from aRoleIncRef a\n              where a.iid=${iid} and a.roleId=${roleId}\n        `\n      );\n    }\n  }\n\n  return Role;\n};\n","module.exports = ctx => {\n  class Role {\n    // const roleRights = [\n    //   {\n    //     roleName: 'family.father',\n    //     flowKey: 'test-flow:set03_atomStateDraft',\n    //     nodeDefId: 'activity_1',\n    //     scopeNames: 'family',\n    //   },\n    // ];\n    async addRoleRightBatchByModeFlow({ atomClassId, module, atomClassName, atomClassIdParent = 0, roleRights }) {\n      // module\n      module = module || this.moduleName;\n      // const _module = ctx.app.meta.modules[module];\n      // atomClass\n      const atomClass = await ctx.bean.atomClass.get({ id: atomClassId, module, atomClassName, atomClassIdParent });\n      // write back, for use atomClassId\n      module = atomClass.module;\n      atomClassName = atomClass.atomClassName;\n      // roleRights\n      if (!roleRights || !roleRights.length) return;\n      for (const roleRight of roleRights) {\n        // role\n        let role;\n        if (roleRight.roleAtomId || roleRight.roleId) {\n          role = await this._forceRole({ roleAtomId: roleRight.roleAtomId, roleId: roleRight.roleId });\n        } else {\n          role = await this.parseRoleName({ roleName: roleRight.roleName, force: true });\n        }\n        // scope\n        const scope = await this._parseScopeNames({ scopeNames: roleRight.scopeNames });\n        // add role right\n        const action = await ctx.bean.atomAction.getByModeFlow({\n          atomClassId: atomClass.id,\n          flowKey: roleRight.flowKey,\n          nodeDefId: roleRight.nodeDefId,\n          nodeDefName: roleRight.nodeDefName,\n        });\n        await this.addRoleRight({\n          roleId: role.id,\n          atomClassId: atomClass.id,\n          action: action.code,\n          scope,\n          areaKey: roleRight.areaKey,\n          areaScope: roleRight.areaScope,\n        });\n      }\n    }\n  }\n  return Role;\n};\n","module.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  const __atomClassRole = {\n    module: moduleInfo.relativeName,\n    atomClassName: 'role',\n  };\n\n  class Role {\n    // includes\n    async includes({ roleAtomId, roleId, page, user }) {\n      // user, should check user right scope\n      // user = { id: 0 };\n      //\n      roleId = await this._forceRoleId({ roleAtomId, roleId });\n      page = ctx.bean.util.page(page, false);\n      // where\n      const where = { 'f.roleIdWho': roleId };\n      // select\n      const list = await ctx.bean.atom.select({\n        atomClass: __atomClassRole,\n        options: {\n          orders: [['f.roleName', 'asc']],\n          page,\n          stage: 'formal',\n          where,\n          mode: 'includes',\n        },\n        user,\n      });\n      return list;\n    }\n\n    // add role include\n    async addRoleInc({ roleAtomId, roleId, roleIdInc, user }) {\n      // role\n      const _role = await this._forceRoleAndCheckRightRead({ roleAtomId, roleId, user });\n      roleId = _role.id;\n      // role inc\n      const _roleInc = await this._forceRoleAndCheckRightRead({ roleAtomId: null, roleId: roleIdInc, user });\n      roleIdInc = _roleInc.id;\n      // check if exists\n      const item = await this.modelRoleInc.get({\n        roleId,\n        roleIdInc,\n      });\n      if (item) return item.id;\n      // insert\n      const res = await this.modelRoleInc.insert({\n        roleId,\n        roleIdInc,\n      });\n      const id = res.insertId;\n\n      // set dirty\n      await this.setDirty(true);\n\n      return id;\n    }\n\n    // remove role include\n    async removeRoleInc({ roleAtomId, roleId, roleIdInc, user }) {\n      // role\n      const _role = await this._forceRoleAndCheckRightRead({ roleAtomId, roleId, user });\n      roleId = _role.id;\n      // role inc\n      const _roleInc = await this._forceRoleAndCheckRightRead({ roleAtomId: null, roleId: roleIdInc, user });\n      roleIdInc = _roleInc.id;\n\n      // delete\n      await this.modelRoleInc.delete({ roleId, roleIdInc });\n\n      // set dirty\n      await this.setDirty(true);\n    }\n  }\n\n  return Role;\n};\n\n// // includes\n// async includes({ roleAtomId, roleId, page, user }) {\n//   roleId = await this._forceRoleId({ roleAtomId, roleId });\n//   page = ctx.bean.util.page(page, false);\n//   const _limit = ctx.model._limit(page.size, page.index);\n//   const list = await ctx.model.query(\n//     `\n//     select a.*,b.roleName from aRoleInc a\n//       left join aRole b on a.roleIdInc=b.id\n//         where a.iid=? and a.roleId=?\n//         ${_limit}\n//     `,\n//     [ctx.instance.id, roleId]\n//   );\n//   return list;\n// }\n","module.exports = ctx => {\n  //  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Role {\n    async getUserRolesDirect({ userId }) {\n      const list = await ctx.model.query(\n        `\n        select a.* from aRole a\n          left join aUserRole b on a.id=b.roleId\n            where a.iid=? and b.userId=?\n        `,\n        [ctx.instance.id, userId]\n      );\n      return list;\n    }\n\n    async getUserRolesParent({ userId }) {\n      const list = await ctx.model.query(\n        `\n        select a.* from aRole a\n          left join aViewUserRoleRef b on a.id=b.roleIdParent\n            where a.iid=? and b.userId=?\n        `,\n        [ctx.instance.id, userId]\n      );\n      return list;\n    }\n\n    async getUserRolesExpand({ userId }) {\n      const list = await ctx.model.query(\n        `\n        select a.* from aRole a\n          left join aViewUserRoleExpand b on a.id=b.roleIdBase\n            where a.iid=? and b.userId=?\n        `,\n        [ctx.instance.id, userId]\n      );\n      return list;\n    }\n\n    async userInRoleDirect({ userId, roleId }) {\n      const list = await ctx.model.query(\n        `\n        select count(*) as count from aUserRole a\n          where a.iid=? and a.userId=? and a.roleId=?\n        `,\n        [ctx.instance.id, userId, roleId]\n      );\n      return list[0].count > 0;\n    }\n\n    async userInRoleParent({ userId, roleId }) {\n      const list = await ctx.model.query(\n        `\n        select count(*) as count from aViewUserRoleRef a\n          where a.iid=? and a.userId=? and a.roleIdParent=?\n        `,\n        [ctx.instance.id, userId, roleId]\n      );\n      return list[0].count > 0;\n    }\n\n    async userInRoleExpand({ userId, roleId }) {\n      const list = await ctx.model.query(\n        `\n        select count(*) as count from aViewUserRoleExpand a\n          where a.iid=? and a.userId=? and a.roleIdBase=?\n        `,\n        [ctx.instance.id, userId, roleId]\n      );\n      return list[0].count > 0;\n    }\n\n    async usersOfRoleDirect({ roleId, disabled, page, removePrivacy }) {\n      // disabled\n      let _disabled = '';\n      if (disabled !== undefined) {\n        _disabled = `and disabled=${parseInt(disabled)}`;\n      }\n      // page\n      page = ctx.bean.util.page(page, false);\n      const _limit = ctx.model._limit(page.size, page.index);\n      // fields\n      const fields = await ctx.bean.user.getFieldsSelect({ removePrivacy, alias: 'a' });\n      // query\n      const list = await ctx.model.query(\n        `\n        select ${fields} from aUser a\n          inner join aUserRole b on a.id=b.userId\n            where a.iid=? and a.deleted=0 ${_disabled} and b.roleId=?\n            order by a.userName\n            ${_limit}\n        `,\n        [ctx.instance.id, roleId]\n      );\n      return list;\n    }\n\n    async usersOfRoleParent({ roleId, disabled, page, removePrivacy, query }) {\n      // disabled\n      let _disabled = '';\n      if (disabled !== undefined) {\n        _disabled = `and disabled=${parseInt(disabled)}`;\n      }\n      // page\n      page = ctx.bean.util.page(page, false);\n      const _limit = ctx.model._limit(page.size, page.index);\n      // fields\n      const fields = await ctx.bean.user.getFieldsSelect({ removePrivacy, alias: 'a' });\n      // query\n      let where;\n      if (query) {\n        const clause = {};\n        clause.__or__ = [\n          { 'a.userName': { op: 'like', val: query } },\n          { 'a.realName': { op: 'like', val: query } },\n          { 'a.mobile': { op: 'like', val: query } },\n        ];\n        where = ctx.model._where(clause);\n      }\n      where = where ? `${where} AND` : ' WHERE';\n      // select\n      const list = await ctx.model.query(\n        `\n        select ${fields} from aUser a\n          inner join aViewUserRoleRef b on a.id=b.userId\n            ${where} a.iid=? and a.deleted=0 ${_disabled} and b.roleIdParent=?\n            order by a.userName\n            ${_limit}\n        `,\n        [ctx.instance.id, roleId]\n      );\n      return list;\n    }\n\n    async usersOfRoleExpand({ roleId, disabled, page, removePrivacy }) {\n      // disabled\n      let _disabled = '';\n      if (disabled !== undefined) {\n        _disabled = `and disabled=${parseInt(disabled)}`;\n      }\n      // page\n      page = ctx.bean.util.page(page, false);\n      const _limit = ctx.model._limit(page.size, page.index);\n      // fields\n      const fields = await ctx.bean.user.getFieldsSelect({ removePrivacy, alias: 'a' });\n      // query\n      const list = await ctx.model.query(\n        `\n        select ${fields} from aUser a\n          inner join aViewUserRoleExpand b on a.id=b.userId\n            where a.iid=? and a.deleted=0 ${_disabled} and b.roleIdBase=?\n            order by a.userName\n            ${_limit}\n        `,\n        [ctx.instance.id, roleId]\n      );\n      return list;\n    }\n\n    async _forceRoleAtomId({ roleAtomId, roleId }) {\n      if (!roleAtomId) {\n        const item = await this.get({ id: roleId });\n        roleAtomId = item.atomId;\n      }\n      return roleAtomId;\n    }\n\n    async _forceRoleId({ roleAtomId, roleId }) {\n      if (!roleId) {\n        const item = await this.get({ atomId: roleAtomId });\n        roleId = item.id;\n      }\n      return roleId;\n    }\n\n    async _forceRole({ roleAtomId, roleId }) {\n      if (roleAtomId) {\n        return await this.get({ atomId: roleAtomId });\n      }\n      return await this.get({ id: roleId });\n    }\n\n    async _forceRoleAndCheckRightRead({ roleAtomId, roleId, user }) {\n      const role = await this._forceRole({ roleAtomId, roleId });\n      if (!user || user.id === 0) return role;\n      // check\n      const res = await ctx.bean.atom.checkRightRead({\n        atom: { id: role.atomId },\n        user,\n      });\n      if (!res) ctx.throw(403);\n      return role;\n    }\n\n    async _checkRightActionOfRole({ roleAtomId, roleId, action, user }) {\n      if (!user || user.id === 0) return true;\n      // roleId\n      roleAtomId = await this._forceRoleAtomId({ roleAtomId, roleId });\n      // check\n      const res = await ctx.bean.atom.checkRightAction({\n        atom: { id: roleAtomId },\n        action,\n        user,\n      });\n      return !!res;\n    }\n  }\n\n  return Role;\n};\n","module.exports = ctx => {\n  class Role {}\n  return Role;\n};\n","module.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  const __atomClassRole = {\n    module: moduleInfo.relativeName,\n    atomClassName: 'role',\n  };\n  const __atomClassUser = {\n    module: moduleInfo.relativeName,\n    atomClassName: 'user',\n  };\n\n  class Role {\n    async roleUsers({ roleAtomId, roleId, page, user }) {\n      // user, should check user right scope\n      // user = { id: 0 };\n      // roleId\n      roleId = await this._forceRoleId({ roleAtomId, roleId });\n      page = ctx.bean.util.page(page, false);\n      // select\n      const list = await ctx.bean.atom.select({\n        atomClass: __atomClassUser,\n        options: {\n          orders: [['f.userName', 'asc']],\n          page,\n          stage: 'formal',\n          role: roleId,\n          // where,\n        },\n        user,\n      });\n      return list;\n    }\n\n    async userRoles({ userAtomId, userId, page, user }) {\n      // user, should check user right scope\n      // user = { id: 0 };\n      userId = await ctx.bean.user._forceUserId({ userAtomId, userId });\n      page = ctx.bean.util.page(page, false);\n      // where\n      const where = { 'f.userIdWho': userId };\n      // select\n      const list = await ctx.bean.atom.select({\n        atomClass: __atomClassRole,\n        options: {\n          orders: [['f.roleName', 'asc']],\n          page,\n          stage: 'formal',\n          where,\n          mode: 'userRoles',\n        },\n        user,\n      });\n      return list;\n    }\n\n    // add user role\n    async addUserRole({ roleAtomId, roleId, userAtomId, userId, user }) {\n      // role\n      const _role = await this._forceRoleAndCheckRightRead({ roleAtomId, roleId, user });\n      roleId = _role.id;\n      // user\n      const _user = await ctx.bean.user._forceUserAndCheckRightRead({ userAtomId, userId, user });\n      userId = _user.id;\n      // check if exists\n      const item = await this.modelUserRole.get({\n        userId,\n        roleId,\n      });\n      if (item) return item.id;\n      // insert\n      const res = await this.modelUserRole.insert({\n        userId,\n        roleId,\n      });\n      return res.insertId;\n    }\n\n    async deleteUserRole({ roleAtomId, roleId, userAtomId, userId, user }) {\n      // role\n      const _role = await this._forceRoleAndCheckRightRead({ roleAtomId, roleId, user });\n      roleId = _role.id;\n      // user\n      const _user = await ctx.bean.user._forceUserAndCheckRightRead({ userAtomId, userId, user });\n      userId = _user.id;\n      // delete\n      await this.modelUserRole.delete({\n        userId,\n        roleId,\n      });\n    }\n\n    async deleteAllUserRoles({ userId }) {\n      await this.modelUserRole.delete({ userId });\n    }\n  }\n\n  return Role;\n};\n","module.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Tag {\n    get modelTag() {\n      return ctx.model.module(moduleInfo.relativeName).tag;\n    }\n\n    get modelTagRef() {\n      return ctx.model.module(moduleInfo.relativeName).tagRef;\n    }\n\n    async count({ atomClass, language }) {\n      atomClass = await ctx.bean.atomClass.get(atomClass);\n      const where = {\n        atomClassId: atomClass.id,\n      };\n      if (language) {\n        where.language = language;\n      }\n      return await this.modelTag.count(where);\n    }\n\n    async get({ tagId }) {\n      return await this.modelTag.get({ id: tagId });\n    }\n\n    async item({ atomClass, language, tagName }) {\n      const where = {\n        tagName,\n      };\n      if (language) {\n        where.language = language;\n      }\n      const options = {\n        where,\n      };\n      const list = await this.list({ atomClass, options });\n      return list[0];\n    }\n\n    async list({ atomClass, options }) {\n      options = options || {};\n      atomClass = await ctx.bean.atomClass.get(atomClass);\n      if (!options.where) options.where = {};\n      options.where.atomClassId = atomClass.id;\n      if (!options.where.language) {\n        delete options.where.language;\n      }\n      return await this.modelTag.select(options);\n    }\n\n    async add({ atomClass, data }) {\n      atomClass = await ctx.bean.atomClass.get(atomClass);\n      // add\n      const res = await this.modelTag.insert({\n        atomClassId: atomClass.id,\n        language: data.language,\n        tagName: data.tagName,\n        tagAtomCount: data.tagAtomCount || 0,\n      });\n      return res.insertId;\n    }\n\n    async save({ tagId, data }) {\n      await this.modelTag.update({\n        id: tagId,\n        tagName: data.tagName,\n      });\n    }\n\n    async delete({ tagId }) {\n      // check atoms\n      const count = await this.modelTagRef.count({ tagId });\n      if (count > 0) ctx.throw.module(moduleInfo.relativeName, 1012);\n\n      // delete\n      await this.modelTag.delete({ id: tagId });\n    }\n\n    async updateTagRefs({ atomId, atomTags }) {\n      // tags\n      if (typeof atomTags === 'string') {\n        atomTags = JSON.parse(atomTags);\n      }\n      // force delete\n      await this.deleteTagRefs({ atomId });\n      // new\n      if (atomTags && atomTags.length > 0) {\n        for (const tagId of atomTags) {\n          await this.modelTagRef.insert({\n            atomId,\n            tagId,\n          });\n        }\n      }\n      // ok\n      return atomTags;\n    }\n\n    async deleteTagRefs({ atomId }) {\n      await this.modelTagRef.delete({\n        atomId,\n      });\n    }\n\n    async setTagAtomCount({ tagsNew, tagsOld }) {\n      // tags\n      const tags = {};\n      if (tagsNew) {\n        const _tags = typeof tagsNew === 'string' ? JSON.parse(tagsNew) : tagsNew;\n        for (const tagId of _tags) {\n          tags[tagId] = true;\n        }\n      }\n      if (tagsOld) {\n        const _tags = typeof tagsOld === 'string' ? JSON.parse(tagsOld) : tagsOld;\n        for (const tagId of _tags) {\n          tags[tagId] = true;\n        }\n      }\n      // loop\n      for (const tagId in tags) {\n        const tagAtomCount = await this.calcAtomCount({ tagId });\n        // update\n        await this.modelTag.update({ id: tagId, tagAtomCount });\n      }\n    }\n\n    async calcAtomCount({ tagId }) {\n      const res = await ctx.model.query(\n        `\n        select count(*) atomCount from aTagRef a\n          inner join aAtom b on a.atomId=b.id\n          where a.iid=? and a.tagId=? and b.iid=? and b.deleted=0 and b.atomStage=1\n        `,\n        [ctx.instance.id, tagId, ctx.instance.id]\n      );\n      return res[0].atomCount;\n    }\n\n    async parseTags({ atomClass, language, tagName, force = false }) {\n      const tagNames = tagName.split(',');\n      const tagIds = [];\n      for (const _tagName of tagNames) {\n        const tag = await this.item({ atomClass, language, tagName: _tagName });\n        // next\n        if (tag) {\n          tagIds.push(tag.id);\n          continue;\n        }\n        // null\n        if (!force) continue;\n        // create\n        const tagId = await this._register({\n          atomClass,\n          language,\n          tagName: _tagName,\n        });\n        tagIds.push(tagId);\n      }\n      return tagIds;\n    }\n\n    async _register({ atomClass, language, tagName }) {\n      atomClass = await ctx.bean.atomClass.get(atomClass);\n      return await ctx.meta.util.lock({\n        resource: `${moduleInfo.relativeName}.tag.register.${atomClass.id}`,\n        fn: async () => {\n          return await ctx.meta.util.executeBeanIsolate({\n            beanModule: moduleInfo.relativeName,\n            beanFullName: 'tag',\n            context: { atomClass, language, tagName },\n            fn: '_registerLock',\n          });\n        },\n      });\n    }\n\n    async _registerLock({ atomClass, language, tagName }) {\n      // get again\n      const tag = await this.item({ atomClass, language, tagName });\n      if (tag) return tag.id;\n      // add\n      return await this.add({\n        atomClass,\n        data: {\n          language,\n          tagName,\n        },\n      });\n    }\n  }\n  return Tag;\n};\n","const user_0 = require('./bean.user/bean.user_0.js');\nconst user_1 = require('./bean.user/bean.user_1.js');\n\nmodule.exports = ctx => {\n  return ctx.app.meta.util.mixinClasses(user_0, user_1, ctx);\n};\n","const _usersAnonymous = {};\n\nmodule.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n\n  class User {\n    constructor() {\n      this._sequence = null;\n      this._config = null;\n    }\n\n    get model() {\n      return ctx.model.module(moduleInfo.relativeName).user;\n    }\n\n    get modelAgent() {\n      return ctx.model.module(moduleInfo.relativeName).userAgent;\n    }\n\n    get modelAuth() {\n      return ctx.model.module(moduleInfo.relativeName).auth;\n    }\n\n    get modelAuthProvider() {\n      return ctx.model.module(moduleInfo.relativeName).authProvider;\n    }\n\n    get sequence() {\n      if (!this._sequence) this._sequence = ctx.bean.sequence.module(moduleInfo.relativeName);\n      return this._sequence;\n    }\n\n    get config() {\n      if (!this._config) this._config = ctx.config.module(moduleInfo.relativeName);\n      return this._config;\n    }\n\n    get sqlProcedure() {\n      return ctx.bean._getBean(moduleInfo.relativeName, 'local.procedure');\n    }\n\n    async anonymous() {\n      // cache\n      let _userAnonymous = _usersAnonymous[ctx.instance.id];\n      if (_userAnonymous) return _userAnonymous;\n      // try get\n      _userAnonymous = await this.get({ anonymous: 1 });\n      if (_userAnonymous) {\n        _usersAnonymous[ctx.instance.id] = _userAnonymous;\n        return _userAnonymous;\n      }\n      // add user\n      const userId = await this.add({ userName: 'anonymous', disabled: 0, anonymous: 1 });\n      // addRole\n      const role = await ctx.bean.role.getSystemRole({ roleName: 'anonymous' });\n      await ctx.bean.role.addUserRole({ userId, roleId: role.id });\n      // ready\n      _userAnonymous = await this.get({ id: userId });\n      _usersAnonymous[ctx.instance.id] = _userAnonymous;\n      return _userAnonymous;\n    }\n\n    async loginAsAnonymous() {\n      const userOp = await this.anonymous();\n      const user = {\n        op: userOp,\n        agent: userOp,\n        provider: null,\n      };\n      // login\n      await ctx.login(user);\n      // maxAge\n      const maxAge = this.config.auth.maxAge.anonymous;\n      ctx.session.maxAge = maxAge;\n      // ok\n      return user;\n    }\n\n    anonymousId() {\n      let _anonymousId = ctx.cookies.get('anonymous', { encrypt: true });\n      if (!_anonymousId) {\n        _anonymousId = ctx.bean.util.uuidv4();\n        const maxAge = this.config.auth.maxAge.anonymous;\n        ctx.cookies.set('anonymous', _anonymousId, { encrypt: true, maxAge });\n      }\n      return _anonymousId;\n    }\n\n    async check(options) {\n      // options\n      const checkUser = options && options.user;\n      // check if has ctx.state.user\n      if (ctx.state.user) {\n        // force set ctx.req.user\n        ctx.req.user = ctx.bean.auth._pruneUser({ user: ctx.state.user });\n      } else {\n        // always has anonymous id\n        ctx.bean.user.anonymousId();\n        // check if has ctx.user\n        if (!ctx.user || !ctx.user.op || ctx.user.op.iid !== ctx.instance.id) {\n          // anonymous\n          await ctx.bean.user.loginAsAnonymous();\n        } else {\n          ctx.state.user = await this._check_getStateUser({ ctxUser: ctx.user });\n        }\n      }\n      // check user\n      if (checkUser && ctx.state.user.op.anonymous) ctx.throw(401);\n    }\n\n    async _check_getStateUser({ ctxUser }) {\n      // state\n      const stateUser = {\n        provider: ctxUser.provider,\n      };\n      // check if deleted,disabled,agent\n      const userOp = await this.get({ id: ctxUser.op.id });\n      // deleted\n      if (!userOp) {\n        // ctx.throw.module(moduleInfo.relativeName, 1004);\n        ctx.throw(401);\n      }\n      // disabled\n      if (userOp.disabled) ctx.throw.module(moduleInfo.relativeName, 1005);\n      // hold user\n      stateUser.op = userOp;\n      // agent\n      let userAgent;\n      if (ctxUser.agent && ctxUser.agent.id !== ctxUser.op.id) {\n        userAgent = await this.agent({ userId: ctxUser.op.id });\n        if (!userAgent) {\n          // ctx.throw.module(moduleInfo.relativeName, 1006);\n          ctx.throw(401);\n        }\n        if (userAgent.id !== ctxUser.agent.id) ctx.throw.module(moduleInfo.relativeName, 1006);\n        if (userAgent.disabled) ctx.throw.module(moduleInfo.relativeName, 1005);\n      } else {\n        userAgent = userOp;\n      }\n      // hold agent\n      stateUser.agent = userAgent;\n      // only check locale for agent\n      // not set locale for test env\n      const checkDemo = ctx.bean.util.checkDemo(false);\n      if (checkDemo && !userAgent.locale && ctx.locale && !ctx.app.meta.isTest) {\n        // set\n        const userData = { id: userAgent.id, locale: ctx.locale };\n        await this.save({ user: userData });\n        userAgent.locale = ctx.locale;\n      } else if (!checkDemo && userAgent.locale) {\n        // clear\n        const userData = { id: userAgent.id, locale: null };\n        await this.save({ user: userData });\n        userAgent.locale = null;\n      }\n      // ok\n      return stateUser;\n    }\n\n    async setActivated({ user, autoActivate }) {\n      // save\n      if (user.activated !== undefined) delete user.activated;\n      await this.save({ user });\n      // tryActivate\n      const tryActivate = autoActivate || user.emailConfirmed || user.mobileVerified;\n      if (tryActivate) {\n        await this.userRoleStageActivate({ userId: user.id });\n      }\n    }\n\n    async userRoleStageAdd({ userId }) {\n      // roleNames\n      let roleNames = this.config.account.needActivation ? 'registered' : this.config.account.activatedRoles;\n      roleNames = roleNames.split(',');\n      for (const roleName of roleNames) {\n        const role = await ctx.bean.role.parseRoleName({ roleName });\n        await ctx.bean.role.addUserRole({ userId, roleId: role.id });\n      }\n    }\n\n    async userRoleStageActivate({ userId }) {\n      // get\n      const user = await this.get({ id: userId });\n      // only once\n      if (user.activated) return;\n      // adjust role\n      if (this.config.account.needActivation) {\n        // userRoles\n        const userRoles = await ctx.bean.role.getUserRolesDirect({ userId });\n        // userRolesMap\n        const map = {};\n        for (const role of userRoles) {\n          map[role.roleName] = role;\n        }\n        // remove from registered\n        if (map.registered) {\n          const roleRegistered = await ctx.bean.role.getSystemRole({ roleName: 'registered' });\n          await ctx.bean.role.deleteUserRole({ userId, roleId: roleRegistered.id });\n        }\n        // add to activated\n        const rolesActivated = await ctx.bean.role.parseRoleNames({ roleNames: this.config.account.activatedRoles });\n        for (const role of rolesActivated) {\n          if (!map[role.roleName]) {\n            await ctx.bean.role.addUserRole({ userId, roleId: role.id });\n          }\n        }\n      }\n      // set activated\n      await this.save({\n        user: { id: userId, activated: 1 },\n      });\n    }\n\n    async agent({ userId }) {\n      const sql = `\n        select a.* from aUser a\n          left join aUserAgent b on a.id=b.userIdAgent\n            where a.iid=? and a.deleted=0 and b.userId=?\n      `;\n      return await ctx.model.queryOne(sql, [ctx.instance.id, userId]);\n    }\n\n    async agentsBy({ userId }) {\n      const sql = `\n        select a.* from aUser a\n          left join aUserAgent b on a.id=b.userId\n            where a.iid=? and a.deleted=0 and b.userIdAgent=?\n      `;\n      return await ctx.model.query(sql, [ctx.instance.id, userId]);\n    }\n\n    async addAgent({ userIdAgent, userId }) {\n      await this.modelAgent.insert({\n        userIdAgent,\n        userId,\n      });\n    }\n\n    async removeAgent({ userIdAgent, userId }) {\n      await this.modelAgent.delete({\n        userIdAgent,\n        userId,\n      });\n    }\n\n    async switchAgent({ userIdAgent }) {\n      const op = ctx.user.op;\n      const _user = await this.get({ id: userIdAgent });\n      ctx.user.op = { id: _user.id, iid: _user.iid, anonymous: _user.anonymous };\n      try {\n        await this.check();\n        await ctx.login(ctx.state.user);\n        return ctx.state.user;\n      } catch (err) {\n        ctx.user.op = op;\n        throw err;\n      }\n    }\n\n    async switchOffAgent() {\n      return await this.switchAgent({ userIdAgent: ctx.state.user.agent.id });\n    }\n\n    // state: login/associate/migrate\n    async verify({ state = 'login', profileUser }) {\n      if (state === 'migrate' || state === 'associate') {\n        ctx.bean.util.checkDemo();\n      }\n\n      // verifyUser\n      const verifyUser = {};\n\n      // provider\n      const providerItem = await ctx.bean.authProvider.getAuthProvider({\n        module: profileUser.module,\n        providerName: profileUser.provider,\n      });\n\n      // check if auth exists\n      const providerId = providerItem.id;\n      const providerScene = profileUser.providerScene || null;\n      const profileId = profileUser.profileId;\n      const authItem = await this.modelAuth.get({\n        providerId,\n        providerScene,\n        profileId,\n      });\n      // avatar\n      await this._prepareAvatar({ authItem, profile: profileUser.profile });\n      // auth\n      let authId;\n      let authUserId;\n      if (authItem) {\n        authId = authItem.id;\n        authUserId = authItem.userId;\n        // update profile\n        const _profile = JSON.stringify(profileUser.profile);\n        if (authItem.profile !== _profile) {\n          await this.modelAuth.update({\n            id: authId,\n            profile: _profile,\n          });\n        }\n      } else {\n        if (state === 'migrate' || profileUser.authShouldExists === true) {\n          ctx.throw.module(moduleInfo.relativeName, 1009);\n        }\n        // add\n        const _profile = JSON.stringify(profileUser.profile);\n        const res = await this.modelAuth.insert({\n          providerId,\n          providerScene,\n          profileId,\n          profile: _profile,\n        });\n        authId = res.insertId;\n      }\n      // provider ready\n      verifyUser.provider = {\n        id: authId,\n        providerId,\n        module: profileUser.module,\n        providerName: profileUser.provider,\n        // profile: profileUser.profile,  // maybe has private info\n      };\n      if (providerScene) {\n        verifyUser.provider.providerScene = providerScene;\n      }\n      const scene = ctx.bean.util.getFrontScene();\n      if (scene) {\n        verifyUser.provider.scene = scene;\n      }\n\n      // columns\n      const columns = ['userName', 'realName', 'email', 'mobile', 'avatar', 'motto', 'locale'];\n\n      //\n      let userId;\n      if (state === 'migrate') {\n        // should check user so as to create ctx.state.user\n        await this.check();\n        // check if ctx.state.user exists\n        if (!ctx.state.user || ctx.state.user.agent.anonymous) return false;\n        userId = ctx.state.user.agent.id;\n        // migrate\n        if (authUserId !== userId) {\n          await this.accountMigration({ userIdFrom: userId, userIdTo: authUserId });\n        }\n        // user\n        const user = await this.model.get({ id: authUserId });\n        // ready\n        verifyUser.op = user;\n        verifyUser.agent = user;\n      } else if (state === 'associate') {\n        // should check user so as to create ctx.state.user\n        await this.check();\n        // check if ctx.state.user exists\n        if (!ctx.state.user || ctx.state.user.agent.anonymous) return false;\n        userId = ctx.state.user.agent.id;\n        // associated\n        // update user\n        await this._updateUserInfo(userId, profileUser.profile, columns);\n        // force update auth's userId, maybe different\n        if (authUserId !== userId) {\n          // accountMigration / update\n          if (authUserId) {\n            await this.accountMigration({ userIdFrom: authUserId, userIdTo: userId });\n          } else {\n            // delete old record\n            await this.modelAuth.delete({\n              providerId,\n              providerScene,\n              userId,\n            });\n            await this.modelAuth.update({\n              id: authId,\n              userId,\n            });\n          }\n        }\n        // ready\n        verifyUser.op = ctx.state.user.op;\n        verifyUser.agent = ctx.state.user.agent;\n      } else if (state === 'login') {\n        // check if user exists\n        let user;\n        if (authUserId) {\n          user = await this.model.get({ id: authUserId });\n        }\n        if (user) {\n          // check if disabled\n          if (user.disabled) return false;\n          // update user\n          await this._updateUserInfo(user.id, profileUser.profile, columns);\n          userId = user.id;\n        } else {\n          // add user\n          userId = await this._addUserInfo(profileUser.profile, columns, profileUser.autoActivate);\n          user = await this.model.get({ id: userId });\n          // update auth's userId\n          await this.modelAuth.update({\n            id: authId,\n            userId,\n          });\n        }\n        // ready\n        verifyUser.op = user;\n        verifyUser.agent = user;\n      }\n\n      // user verify event\n      await ctx.bean.event.invoke({\n        module: moduleInfo.relativeName,\n        name: 'userVerify',\n        data: { verifyUser, profileUser },\n      });\n\n      // restore maxAge\n      //   maxAge: 0,null/undefined,>0\n      if (ctx.session) {\n        if (profileUser.maxAge === 0) {\n          ctx.session.maxAge = this.config.auth.maxAge.default;\n        } else {\n          ctx.session.maxAge = profileUser.maxAge || this.config.auth.maxAge.authenticated;\n        }\n      }\n\n      // ok\n      return verifyUser;\n    }\n\n    async accountMigration({ userIdFrom, userIdTo }) {\n      // accountMigration event\n      await ctx.bean.event.invoke({\n        module: moduleInfo.relativeName,\n        name: 'accountMigration',\n        data: { userIdFrom, userIdTo },\n      });\n      // aAuth: delete old records\n      const list = await ctx.model.query(\n        'select a.id,a.providerId,a.providerScene from aAuth a where a.deleted=0 and a.iid=? and a.userId=?',\n        [ctx.instance.id, userIdFrom]\n      );\n      for (const item of list) {\n        await ctx.model.query(\n          'delete from aAuth where deleted=0 and iid=? and userId=? and providerId=? and providerScene=?',\n          [ctx.instance.id, userIdTo, item.providerId, item.providerScene]\n        );\n      }\n      // aAuth: update records\n      await ctx.model.query('update aAuth a set a.userId=? where a.deleted=0 and a.iid=? and a.userId=?', [\n        userIdTo,\n        ctx.instance.id,\n        userIdFrom,\n      ]);\n      // aUserRole\n      await ctx.model.query('update aUserRole a set a.userId=? where a.iid=? and a.userId=?', [\n        userIdTo,\n        ctx.instance.id,\n        userIdFrom,\n      ]);\n      // delete user\n      await this.delete({ userId: userIdFrom });\n    }\n\n    async _downloadAvatar({ avatar }) {\n      const timeout = this.config.auth.avatar.timeout;\n      let res;\n      try {\n        res = await ctx.curl(avatar, { method: 'GET', timeout });\n      } catch (err) {\n        res = await ctx.curl(this.config.auth.avatar.default, { method: 'GET', timeout });\n      }\n      return res;\n    }\n\n    async _prepareAvatar({ authItem, profile }) {\n      // maybe failed for image format invalid\n      try {\n        // avatar\n        let avatarOld;\n        let _avatarOld;\n        if (authItem) {\n          const _profile = JSON.parse(authItem.profile);\n          avatarOld = _profile.avatar;\n          _avatarOld = _profile._avatar;\n        }\n        if (!profile.avatar || profile.avatar === avatarOld) {\n          profile._avatar2 = _avatarOld;\n          return;\n        }\n        // download image\n        const res = await this._downloadAvatar({ avatar: profile.avatar });\n        // meta\n        const mime = res.headers['content-type'] || '';\n        const ext = mime.split('/')[1] || '';\n        const meta = {\n          filename: `user-avatar.${ext}`,\n          encoding: '7bit',\n          mime,\n          fields: {\n            mode: 1,\n            flag: `user-avatar:${profile.avatar}`,\n          },\n        };\n        // upload\n        try {\n          const res2 = await ctx.bean.file._upload({\n            fileContent: res.data,\n            meta,\n            user: null,\n          });\n          // hold\n          profile._avatar = res2.downloadUrl;\n        } catch (err) {\n          console.log('-------- avatar:', profile.avatar);\n          // console.log(res);\n          // console.log(err);\n        }\n      } catch (err) {\n        // not throw err\n        console.log(err);\n      }\n    }\n\n    async _addUserInfo(profile, columns, autoActivate) {\n      const user = {};\n      for (const column of columns) {\n        // others\n        await this._setUserInfoColumn(user, column, profile);\n      }\n      // add user\n      const userId = await this.add(user);\n      // add role\n      await this.userRoleStageAdd({ userId });\n      // try setActivated\n      const data = { id: userId };\n      // emailConfirmed\n      if (profile.emailConfirmed && profile.email) {\n        data.emailConfirmed = 1;\n      }\n      // mobileVerified\n      if (profile.mobileVerified && profile.mobile) {\n        data.mobileVerified = 1;\n      }\n      // setActivated\n      await this.setActivated({ user: data, autoActivate });\n      // ok\n      return userId;\n    }\n\n    async _updateUserInfo(userId, profile, columns) {\n      const users = await this.model.select({\n        where: { id: userId },\n        columns,\n      });\n      const user = users[0];\n      for (const column of columns) {\n        await this._setUserInfoColumn(user, column, profile);\n      }\n      user.id = userId;\n      await this.save({ user });\n    }\n\n    async _setUserInfoColumn(user, column, profile) {\n      // avatar / only if empty\n      if (column === 'avatar') {\n        const value = profile._avatar || profile._avatar2;\n        if (!user[column] && value) {\n          user[column] = value;\n        }\n        delete profile._avatar2;\n        return;\n      }\n      // // avatar / if empty\n      // if (column === 'avatar' && !user[column] && profile._avatar2) {\n      //   user[column] = profile._avatar2;\n      //   return;\n      // }\n      // // avatar / if changed\n      // if (column === 'avatar' && profile._avatar) {\n      //   user[column] = profile._avatar;\n      //   return;\n      // }\n      // value\n      let value = profile[column];\n      // only set when empty\n      if (user[column] || !value) return;\n      // userName\n      if (column === 'userName') {\n        const res = await this.exists({ [column]: value });\n        if (res) {\n          // sequence\n          const sequence = await this.sequence.next('userName');\n          value = `${value}__${sequence}`;\n        }\n      } else if (column === 'email' || column === 'mobile') {\n        const res = await this.exists({ [column]: value });\n        if (res) {\n          value = null;\n        }\n      }\n      if (value) {\n        user[column] = value;\n      }\n    }\n  }\n\n  return User;\n};\n","module.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  const __atomClassUser = {\n    module: moduleInfo.relativeName,\n    atomClassName: 'user',\n  };\n\n  class User {\n    async get(where) {\n      return await this.model.get(where);\n    }\n\n    async add(\n      { disabled = 0, userName, realName, email, mobile, avatar, motto, locale, anonymous = 0 },\n      user,\n      returnKey\n    ) {\n      // check if incomplete information\n      let needCheck;\n      if (anonymous) {\n        needCheck = false;\n      } else if (this.config.checkUserName === true) {\n        needCheck = userName || email || mobile;\n      } else {\n        needCheck = email || mobile;\n      }\n      // if exists\n      if (needCheck) {\n        const res = await this.exists({ userName, email, mobile });\n        if (res) ctx.throw.module(moduleInfo.relativeName, 1001);\n      }\n      if (!user) {\n        user = { id: 0 };\n      }\n      // create\n      const itemCreate = {\n        disabled,\n        anonymous,\n      };\n      const userKey = await ctx.bean.atom.create({\n        atomClass: __atomClassUser,\n        item: itemCreate,\n        user,\n      });\n      // write\n      const item = {\n        userName,\n        realName,\n        email,\n        mobile,\n        avatar,\n        motto,\n        locale,\n      };\n      if (userName) {\n        item.atomName = userName;\n      }\n      await ctx.bean.atom.write({\n        key: userKey,\n        item,\n        user,\n      });\n      // submit\n      await ctx.bean.atom.submit({\n        key: userKey,\n        options: { ignoreFlow: true },\n        user,\n      });\n      // user verify event\n      item.id = userKey.itemId;\n      item.disabled = disabled;\n      item.anonymous = anonymous;\n      await ctx.bean.event.invoke({\n        module: moduleInfo.relativeName,\n        name: 'userAdd',\n        data: { user: item },\n      });\n      // ok\n      return returnKey ? userKey : userKey.itemId;\n    }\n\n    async exists({ userName, email, mobile }) {\n      userName = userName || '';\n      email = email || '';\n      mobile = mobile || '';\n      if (this.config.checkUserName !== true) {\n        userName = '';\n      }\n      // where\n      const clause = {};\n      clause.__or__ = [];\n      if (userName) clause.__or__.push({ userName });\n      if (email) clause.__or__.push({ email });\n      if (mobile) clause.__or__.push({ mobile });\n      if (clause.__or__.length === 0) return null;\n      const where = ctx.model._where(clause);\n      return await this.model.queryOne(\n        `select * from aUser\n            ${where} and iid=? and deleted=0`,\n        [ctx.instance.id]\n      );\n    }\n\n    async save({ user }) {\n      // not use atom.write\n      const userId = user.id;\n      if (userId && Object.keys(user).length > 1) {\n        await this.model.update(user);\n      }\n      if (user.userName) {\n        const userAtomId = await this._forceUserAtomId({ userAtomId: null, userId });\n        await ctx.bean.atom.modelAtom.update({\n          id: userAtomId,\n          atomName: user.userName,\n        });\n      }\n    }\n\n    async changeUserName({ user }) {\n      // check allowChangeUserName\n      const item = await this.get({ id: user.id });\n      if (item.allowChangeUserName === 0) ctx.throw(403);\n      // change\n      user = {\n        ...user,\n        allowChangeUserName: 0,\n        lastTimeChangeUserName: new Date(),\n      };\n      await this.save({ user });\n    }\n\n    async getFields({ removePrivacy }) {\n      let fields = await this.model.columns();\n      if (removePrivacy) {\n        fields = ctx.bean.util.extend({}, fields);\n        const privacyFields = ctx.config.module(moduleInfo.relativeName).user.privacyFields.split(',');\n        for (const privacyField of privacyFields) {\n          delete fields[privacyField];\n        }\n      }\n      return fields;\n    }\n\n    async getFieldsSelect({ removePrivacy, alias }) {\n      const fields = await this.getFields({ removePrivacy });\n      return Object.keys(fields)\n        .map(item => (alias ? `${alias}.${item}` : item))\n        .join(',');\n    }\n\n    async count({ options, user }) {\n      return await this.select({ options, user, count: 1 });\n    }\n\n    async select({ options, user, pageForce = true, count = 0 }) {\n      return await this._list({ options, user, pageForce, count });\n    }\n\n    async selectGeneral({ params, user, pageForce = true, count = 0 }) {\n      const { query, page } = params;\n      const options = {\n        where: {\n          'f.anonymous': 0,\n          'f.disabled': 0,\n        },\n        orders: [['f.userName', 'asc']],\n        page,\n        removePrivacy: true,\n      };\n      if (query) {\n        options.where.__or__ = [\n          { 'f.userName': { op: 'like', val: query } },\n          { 'f.realName': { op: 'like', val: query } },\n          { 'f.mobile': { op: 'like', val: query } },\n        ];\n      }\n      return await this._list({ options, user, pageForce, count });\n    }\n\n    // options: { where, orders, page, removePrivacy, ... }\n    async _list({ options, user, pageForce = true, count = 0 }) {\n      if (!options) options = {};\n      // select\n      const items = await ctx.bean.atom.select({ atomClass: __atomClassUser, options, user, pageForce, count });\n      // count\n      if (count) return items;\n      // removePrivacy\n      const removePrivacy = options.removePrivacy;\n      if (!removePrivacy) return items;\n      // fields\n      const fields = await this.getFields({ removePrivacy });\n      const fieldNames = Object.keys(fields);\n      const itemsRes = [];\n      for (const item of items) {\n        const itemRes = {};\n        for (const fieldName of fieldNames) {\n          itemRes[fieldName] = item[fieldName];\n        }\n        itemRes.itemId = item.itemId;\n        itemsRes.push(itemRes);\n      }\n      // ok\n      return itemsRes;\n    }\n\n    async disable({ userAtomId, userId, disabled }) {\n      const item = await this._forceUser({ userAtomId, userId });\n      const key = { atomId: item.atomId, itemId: item.id };\n      if (disabled) {\n        await ctx.bean.atom.disable({ key, user: { id: 0 } });\n      } else {\n        await ctx.bean.atom.enable({ key, user: { id: 0 } });\n      }\n    }\n\n    async delete({ userAtomId, userId }) {\n      userAtomId = await this._forceUserAtomId({ userAtomId, userId });\n      // delete this\n      await ctx.bean.atom.delete({ key: { atomId: userAtomId } });\n    }\n\n    async _forceUserAtomId({ userAtomId, userId }) {\n      if (!userAtomId) {\n        const item = await this.get({ id: userId });\n        userAtomId = item.atomId;\n      }\n      return userAtomId;\n    }\n\n    async _forceUserId({ userAtomId, userId }) {\n      if (!userId) {\n        const item = await this.get({ atomId: userAtomId });\n        userId = item.id;\n      }\n      return userId;\n    }\n\n    async _forceUser({ userAtomId, userId }) {\n      if (userAtomId) {\n        return await this.get({ atomId: userAtomId });\n      }\n      return await this.get({ id: userId });\n    }\n\n    async _forceUserAndCheckRightRead({ userAtomId, userId, user }) {\n      const _user = await this._forceUser({ userAtomId, userId });\n      if (!user || user.id === 0) return _user;\n      // check\n      const res = await ctx.bean.atom.checkRightRead({\n        atom: { id: _user.atomId },\n        user,\n      });\n      if (!res) ctx.throw(403);\n      return _user;\n    }\n  }\n  return User;\n};\n\n// async save({ user }) {\n//   // userKey\n//   const userAtomId = await this._forceUserAtomId({ userId: user.id });\n//   const userKey = { atomId: userAtomId };\n//   // item\n//   const item = { ...user };\n//   if (user.userName) {\n//     item.atomName = user.userName;\n//   }\n//   await ctx.bean.atom.write({\n//     key: userKey,\n//     item,\n//     user: { id: 0 },\n//   });\n// }\n\n// async list({ roleId, query, anonymous, page, removePrivacy }) {\n//   const roleJoin = roleId ? 'left join aUserRole b on a.id=b.userId' : '';\n//   const roleWhere = roleId ? `and b.roleId=${ctx.model._format(roleId)}` : '';\n//   const queryLike = query ? ctx.model._format({ op: 'like', val: query }) : '';\n//   const queryWhere = query\n//     ? `and ( a.userName like ${queryLike} or a.realName like ${queryLike} or a.mobile like ${queryLike} )`\n//     : '';\n//   const anonymousWhere = anonymous !== undefined ? `and a.anonymous=${ctx.model._format(anonymous)}` : '';\n//   const _limit = ctx.model._limit(page.size, page.index);\n//   // fields\n//   const fields = await this.getFieldsSelect({ removePrivacy, alias: 'a' });\n//   // sql\n//   const sql = `\n//     select ${fields} from aUser a\n//       ${roleJoin}\n//         where a.iid=? and a.deleted=0\n//               ${anonymousWhere}\n//               ${roleWhere}\n//               ${queryWhere}\n//         order by a.userName asc\n//         ${_limit}\n//   `;\n//   return await ctx.model.query(sql, [ctx.instance.id]);\n// }\n","const require3 = require('require3');\nconst uuid = require3('uuid');\nconst extend = require3('@zhennann/extend');\nconst currency = require3('@zhennann/currency').default;\nconst moment = require3('moment');\nconst mparse = require3('egg-born-mparse').default;\nconst eggBornUtils = require3('egg-born-utils');\nconst utils = require('../common/utils.js');\n\nmodule.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Util extends app.meta.BeanBase {\n    get localConfig() {\n      return this.ctx.config.module(moduleInfo.relativeName);\n    }\n\n    get uuid() {\n      return uuid;\n    }\n\n    uuidv4() {\n      return uuid.v4().replace(/-/g, '');\n    }\n\n    page(_page, force = true) {\n      const pageSize = this.localConfig.pageSize;\n      if (!_page) {\n        _page = force ? { index: 0 } : { index: 0, size: 0 };\n      }\n      if (_page.size === undefined || (force && (_page.size === 0 || _page.size === -1 || _page.size > pageSize))) {\n        _page.size = pageSize;\n      }\n      return _page;\n    }\n\n    user(_user) {\n      return _user || this.ctx.state.user.op;\n    }\n\n    extend(...args) {\n      return extend(true, ...args);\n    }\n\n    currency(options) {\n      return currency(options);\n    }\n\n    moment(date) {\n      return moment(date);\n    }\n\n    now(fmt, locale) {\n      return this.formatDateTime(null, fmt, locale);\n    }\n\n    today(fmt, locale) {\n      return this.formatDate(null, fmt, locale);\n    }\n\n    formatDateTime(date, fmt, locale) {\n      locale = locale || this.ctx.locale;\n      let timezone = this.localConfig.timezones[locale];\n      if (timezone === undefined) {\n        timezone = this.localConfig.timezones[app.config.i18n.defaultLocale];\n      }\n      date = date || new Date();\n      fmt = fmt || 'YYYY-MM-DD HH:mm:ss';\n      if (typeof date !== 'object') date = new Date(date);\n      return moment(date).utcOffset(timezone).format(fmt);\n    }\n\n    formatDate(date, sep, locale) {\n      if (sep === undefined) sep = '-';\n      const fmt = `YYYY${sep}MM${sep}DD`;\n      return this.formatDateTime(date, fmt, locale);\n    }\n\n    formatTime(date, sep, locale) {\n      if (sep === undefined) sep = ':';\n      const fmt = `HH${sep}mm${sep}ss`;\n      return this.formatDateTime(date, fmt, locale);\n    }\n\n    // todo: load locales resources and then format\n    fromNow(date /* , locale*/) {\n      if (typeof date !== 'object') date = new Date(date);\n      return moment(date).fromNow();\n    }\n\n    replaceTemplate(content, scope) {\n      if (!content) return null;\n      return content.toString().replace(/(\\\\)?{{ *([\\w\\.]+) *}}/g, (block, skip, key) => {\n        if (skip) {\n          return block.substring(skip.length);\n        }\n        const value = this.getProperty(scope, key);\n        return value !== undefined ? value : '';\n      });\n    }\n\n    setProperty(obj, name, value) {\n      const names = name.split('.');\n      if (names.length === 1) {\n        obj[name] = value;\n      } else {\n        for (let i = 0; i < names.length - 1; i++) {\n          const _obj = obj[names[i]];\n          if (_obj) {\n            obj = _obj;\n          } else {\n            obj = obj[names[i]] = {};\n          }\n        }\n        obj[names[names.length - 1]] = value;\n      }\n    }\n\n    getProperty(obj, name, sep) {\n      return this._getProperty(obj, name, sep, false);\n    }\n\n    getPropertyObject(obj, name, sep) {\n      return this._getProperty(obj, name, sep, true);\n    }\n\n    _getProperty(obj, name, sep, forceObject) {\n      if (!obj) return undefined;\n      const names = name.split(sep || '.');\n      // loop\n      for (const name of names) {\n        if (obj[name] === undefined || obj[name] === null) {\n          if (forceObject) {\n            obj[name] = {};\n          } else {\n            obj = obj[name];\n            break;\n          }\n        }\n        obj = obj[name];\n      }\n      return obj;\n    }\n\n    sleep(ms) {\n      return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    combinePagePath(moduleName, arg) {\n      if (!arg || typeof arg !== 'string') return arg;\n      const first = arg.charAt(0);\n      if (first === '/' || first === '#') return arg;\n      const moduleInfo = typeof moduleName === 'string' ? mparse.parseInfo(moduleName) : moduleName;\n      return `/${moduleInfo.url}/${arg}`;\n    }\n\n    checkDemo(throwError = true) {\n      const demo = this.ctx.config.module(moduleInfo.relativeName).configFront.demo;\n      if (!demo.enable) return true;\n      const user = this.ctx.state.user;\n      // !user means system operation\n      if (!user || user.op.userName === 'root') return true;\n      if (throwError) {\n        this.ctx.throw.module(moduleInfo.relativeName, 1014);\n      }\n      return false;\n    }\n\n    escapeHtml(str) {\n      return utils.escapeHtml(str);\n    }\n\n    escapeURL(str) {\n      return utils.escapeURL(str);\n    }\n\n    getTitleLocale({ locales, title, locale }) {\n      locale = locale || this.ctx.locale;\n      let titleLocale = this.getProperty(locales, `${locale}.${title}`);\n      if (!titleLocale && locale !== 'en-us') {\n        titleLocale = this.getProperty(locales, `en-us.${title}`);\n      }\n      // not use system locale\n      // if (!titleLocale) {\n      //   titleLocale = this.ctx.text(title);\n      // }\n      return titleLocale || title;\n    }\n\n    getFrontScene() {\n      return (\n        (this.ctx.request.query && this.ctx.request.query['x-scene']) ||\n        (this.ctx.headers && this.ctx.headers['x-scene']) ||\n        (this.ctx.session && this.ctx.session['x-scene'])\n      );\n    }\n\n    getFrontClientId() {\n      return (\n        (this.ctx.request.query && this.ctx.request.query['x-clientid']) ||\n        (this.ctx.headers && this.ctx.headers['x-clientid']) ||\n        (this.ctx.session && this.ctx.session['x-clientid']) ||\n        ''\n      );\n    }\n\n    evaluateExpression({ expression, globals, wrapper }) {\n      return eggBornUtils.tools.evaluateExpression({ expression, scope: globals, wrapper });\n      // return vm.runInContext(expression, vm.createContext(globals || {}));\n    }\n\n    normalizeResourceKey(key, module, sep = ':') {\n      if (!key) return key;\n      let _sep, _parts;\n      for (_sep of sep) {\n        _parts = key.split(_sep);\n        if (_parts.length > 1) break;\n      }\n      if (_parts.length === 1 && module) {\n        _parts.unshift(module);\n      }\n      return _parts.join(_sep);\n    }\n\n    hostUtil(options) {\n      const self = this;\n      return {\n        text(...args) {\n          const locale = options && options.locale;\n          return self.ctx.text.locale(locale || self.ctx.app.config.i18n.defaultLocale, ...args);\n        },\n        url(str) {\n          if (str && (str.indexOf('http://') === 0 || str.indexOf('https://') === 0)) return this.escapeURL(str);\n          if (str[0] !== '/') str = '/' + str;\n          return self.ctx.bean.base.getAbsoluteUrl(this.escapeURL(str));\n        },\n        urlFront(str) {\n          return this.url(str);\n        },\n        escapeHtml(str) {\n          return self.escapeHtml(str);\n        },\n        escapeURL(str) {\n          return self.escapeURL(str);\n        },\n        performAction({ method, url, body }) {\n          return self.ctx.meta.util.performAction({ method, url, body });\n        },\n      };\n    }\n\n    // check draft/formal\n    async checkAtomIdExists({ atomId, items }) {\n      if (items.length === 0) return false;\n      const _atomOld = await this.ctx.bean.atom.modelAtom.get({ id: atomId });\n      const atomIds = new Set([atomId]);\n      if (_atomOld.atomIdDraft) {\n        atomIds.add(_atomOld.atomIdDraft);\n      }\n      if (_atomOld.atomIdFormal) {\n        atomIds.add(_atomOld.atomIdFormal);\n      }\n      return items.some(item => {\n        return !atomIds.has(item.id);\n      });\n    }\n  }\n\n  return Util;\n};\n","const procedure_atom = require('./local.procedure/local.procedure_atom.js');\nconst procedure_atom_0 = require('./local.procedure/local.procedure_atom_0.js');\nconst procedure_atom_draft = require('./local.procedure/local.procedure_atom_draft.js');\nconst procedure_atom_formal = require('./local.procedure/local.procedure_atom_formal.js');\nconst procedure_atom_getAtom = require('./local.procedure/local.procedure_atom_getAtom.js');\nconst procedure_atomRight = require('./local.procedure/local.procedure_atomRight.js');\nconst procedure_atomRight_checkRoleRightRead = require('./local.procedure/local.procedure_atomRight_checkRoleRightRead.js');\nconst procedure_atomRight_checkRightRead = require('./local.procedure/local.procedure_atomRight_checkRightRead.js');\nconst procedure_atomRight_checkRightAction = require('./local.procedure/local.procedure_atomRight_checkRightAction.js');\nconst procedure_atomRight_checkRightActionBulk = require('./local.procedure/local.procedure_atomRight_checkRightActionBulk.js');\nconst procedure_atomRight_checkRightCreateRole = require('./local.procedure/local.procedure_atomRight_checkRightCreateRole.js');\nconst procedure_resource = require('./local.procedure/local.procedure_resource.js');\n\nmodule.exports = ctx => {\n  return ctx.app.meta.util.mixinClasses(\n    procedure_atom,\n    [\n      procedure_atom_0,\n      procedure_atom_draft,\n      procedure_atom_formal,\n      procedure_atom_getAtom,\n      procedure_atomRight,\n      procedure_atomRight_checkRoleRightRead,\n      procedure_atomRight_checkRightRead,\n      procedure_atomRight_checkRightAction,\n      procedure_atomRight_checkRightActionBulk,\n      procedure_atomRight_checkRightCreateRole,\n      procedure_resource,\n    ],\n    ctx\n  );\n};\n\n// /* backup */\n\n// selectUsers({ iid, where, orders, page, count, fields }) {\n//   // -- tables\n//   // -- a: aUser\n\n//   // for safe\n//   where = where ? ctx.model._where(where) : null;\n//   orders = orders ? ctx.model._orders(orders) : null;\n//   const limit = page ? ctx.model._limit(page.size, page.index) : null;\n\n//   // vars\n\n//   //\n//   const _where = where ? `${where} AND` : ' WHERE';\n//   const _orders = orders || '';\n//   const _limit = limit || '';\n\n//   // fields\n//   let _selectFields;\n//   if (count) {\n//     _selectFields = 'count(*) as _count';\n//   } else {\n//     _selectFields = fields;\n//   }\n\n//   // sql\n//   const _sql = `select ${_selectFields} from aUser a\n//       ${_where}\n//        (\n//          a.deleted=0 and a.iid=${iid}\n//        )\n\n//       ${count ? '' : _orders}\n//       ${count ? '' : _limit}\n//     `;\n\n//   // ok\n//   return _sql;\n// }\n\n// function selectFunctions({ iid, locale, userIdWho, where, orders, page, star }) {\n//   // -- tables\n//   // -- a: aFunction\n//   // -- b: aFunctionLocale\n//   // -- c: aViewUserRightFunction\n//   // -- d: aFunctionStar\n//   // -- e: aAtomClass\n//   // -- f: aFunctionScene\n\n//   // for safe\n//   where = where ? ctx.model._where(where) : null;\n//   orders = orders ? ctx.model._orders(orders) : null;\n//   const limit = page ? ctx.model._limit(page.size, page.index) : null;\n\n//   iid = parseInt(iid);\n//   userIdWho = parseInt(userIdWho);\n//   star = parseInt(star);\n\n//   locale = locale ? ctx.model.format('?', locale) : null;\n\n//   // vars\n//   let _starField,\n//     _starJoin,\n//     _starWhere;\n//   let _localeField,\n//     _localeJoin,\n//     _localeWhere;\n\n//   //\n//   const _where = where ? `${where} AND` : ' WHERE';\n//   const _orders = orders || '';\n//   const _limit = limit || '';\n\n//   // star\n//   if (star) {\n//     _starField = '';\n//     _starJoin = ' inner join aFunctionStar d on a.id=d.functionId';\n//     _starWhere = ` and d.iid=${iid} and d.userId=${userIdWho} and d.star=1`;\n//   } else {\n//     _starField =\n//         `,(select d.star from aFunctionStar d where d.iid=${iid} and d.functionId=a.id and d.userId=${userIdWho}) as star`;\n//     _starJoin = '';\n//     _starWhere = '';\n//   }\n\n//   // locale\n//   if (locale) {\n//     _localeField = ',b.titleLocale';\n//     _localeJoin = ' inner join aFunctionLocale b on a.id=b.functionId';\n//     _localeWhere = ` and b.iid=${iid} and b.locale=${locale}`;\n//   } else {\n//     _localeField = '';\n//     _localeJoin = '';\n//     _localeWhere = '';\n//   }\n\n//   // sql\n//   const _sql =\n//         `select a.*,\n//                 e.atomClassName,e.atomClassIdParent\n//                 ${_localeField}\n//                 ${_starField}\n//            from aFunction a\n\n//              left join aAtomClass e on a.atomClassId=e.id\n//              left join aFunctionScene f on a.sceneId=f.id\n//              ${_localeJoin}\n//              ${_starJoin}\n\n//              ${_where}\n\n//               (\n//                 a.deleted=0 and a.iid=${iid}\n//                 ${_localeWhere}\n//                 ${_starWhere}\n//                 and (\n//                        a.public=1\n//                        or\n//                        exists(\n//                                select c.functionId from aViewUserRightFunction c where c.iid=${iid} and a.id=c.functionId and c.userIdWho=${userIdWho}\n//                              )\n//                     )\n//               )\n\n//             ${_orders}\n//             ${_limit}\n//        `;\n\n//   // ok\n//   return _sql;\n// }\n\n// function checkRightFunction({ iid, userIdWho, functionId }) {\n//   // for safe\n//   iid = parseInt(iid);\n//   userIdWho = parseInt(userIdWho);\n//   functionId = parseInt(functionId);\n//   // sql\n//   const _sql =\n//         `select a.* from aFunction a\n//             where a.deleted=0 and a.iid=${iid} and a.id=${functionId}\n//               and ( a.public=1 or\n//                     exists(select c.functionId from aViewUserRightFunction c where c.iid=${iid} and c.functionId=${functionId} and c.userIdWho=${userIdWho})\n//                   )\n//         `;\n//   return _sql;\n// }\n","module.exports = ctx => {\n  class Procedure {\n    selectAtoms({\n      iid,\n      userIdWho,\n      tableName,\n      where,\n      orders,\n      page,\n      star,\n      label,\n      comment,\n      file,\n      count,\n      stage,\n      language,\n      category,\n      tag,\n      mine,\n      resource,\n      resourceLocale,\n      mode,\n      cms,\n      forAtomUser,\n      useAreaScope,\n      role,\n    }) {\n      iid = parseInt(iid);\n      userIdWho = parseInt(userIdWho);\n      star = parseInt(star);\n      label = parseInt(label);\n      comment = parseInt(comment);\n      file = parseInt(file);\n      stage = parseInt(stage);\n      category = parseInt(category);\n      tag = parseInt(tag);\n      mine = parseInt(mine);\n      resource = parseInt(resource);\n      role = parseInt(role);\n\n      // draft\n      if (stage === 0) {\n        // userIdWho must be set\n        return this._selectAtoms_draft({\n          iid,\n          userIdWho,\n          tableName,\n          where,\n          orders,\n          page,\n          star,\n          label,\n          comment,\n          file,\n          count,\n          stage,\n          language,\n          category,\n          tag,\n          mode,\n          cms,\n        });\n      }\n      if (userIdWho === 0) {\n        return this._selectAtoms_0({\n          iid,\n          tableName,\n          where,\n          orders,\n          page,\n          comment,\n          file,\n          count,\n          stage,\n          language,\n          category,\n          tag,\n          resource,\n          resourceLocale,\n          mode,\n          cms,\n          forAtomUser,\n          role,\n        });\n      }\n      // formal/history\n      return this._selectAtoms({\n        iid,\n        userIdWho,\n        tableName,\n        where,\n        orders,\n        page,\n        star,\n        label,\n        comment,\n        file,\n        count,\n        stage,\n        language,\n        category,\n        tag,\n        mine,\n        resource,\n        resourceLocale,\n        mode,\n        cms,\n        forAtomUser,\n        useAreaScope,\n        role,\n      });\n    }\n\n    _prepare_cms({ tableName, iid, mode, cms }) {\n      let _cmsField, _cmsJoin, _cmsWhere;\n\n      // cms\n      if (cms) {\n        _cmsField = `${\n          tableName ? '' : 'p.createdAt,p.updatedAt,'\n        }p.sticky,p.keywords,p.description,p.summary,p.url,p.editMode,p.slug,p.sorting,p.flag,p.extra,p.imageCover,p.imageFirst,p.audioFirst,p.audioCoverFirst,p.uuid,p.renderAt,`;\n        _cmsJoin = ' inner join aCmsArticle p on p.atomId=a.id';\n        _cmsWhere = ` and p.iid=${iid} and p.deleted=0`;\n        if (mode && mode !== 'default') {\n          // full/search/others\n          _cmsField += 'q.content,q.html,';\n          _cmsJoin += ' inner join aCmsContent q on q.atomId=a.id';\n          _cmsWhere += ` and q.iid=${iid} and q.deleted=0`;\n        }\n      } else {\n        _cmsField = '';\n        _cmsJoin = '';\n        _cmsWhere = '';\n      }\n\n      return { _cmsField, _cmsJoin, _cmsWhere };\n    }\n  }\n  return Procedure;\n};\n","module.exports = ctx => {\n  class Procedure {\n    // checkRoleRightRead\n    // checkRightRead: check for formal/history\n    // checkRightAction\n    // checkRightActionBulk\n    // checkRightCreateRole\n  }\n  return Procedure;\n};\n","module.exports = ctx => {\n  class Procedure {\n    checkRightAction({ iid, userIdWho, atomId, action, forAtomUser }) {\n      // for safe\n      iid = parseInt(iid);\n      userIdWho = parseInt(userIdWho);\n      atomId = parseInt(atomId);\n      action = parseInt(action);\n      // _rightWhere\n      let _rightWhere;\n      const _mine = `\n        (a.userIdCreated=${userIdWho} and exists(select c.atomClassId from aViewUserRightAtomClass c where c.iid=${iid} and a.atomClassId=c.atomClassId and c.action=${action} and c.scope=0 and c.userIdWho=${userIdWho}))\n      `;\n      let _others;\n      if (forAtomUser) {\n        _others = `\n          exists(\n            select c.userIdWhom from aViewUserRightAtomClassUser c where c.iid=${iid} and a.itemId=c.userIdWhom and c.atomClassId=a.atomClassId and c.action=${action} and c.userIdWho=${userIdWho}\n          )\n        `;\n      } else {\n        _others = `\n          exists(\n            select c.roleIdWhom from aViewUserRightAtomClassRole c \n              where c.iid=${iid} and c.atomClassId=a.atomClassId and c.action=${action} and c.roleIdWhom=a.roleIdOwner and c.userIdWho=${userIdWho}\n          )\n        `;\n      }\n      //\n      _rightWhere = `\n        (\n          ${_mine}\n          or\n          ${_others}\n        )\n      `;\n      if (_rightWhere) {\n        _rightWhere = ` and ( ${_rightWhere} )`;\n      } else {\n        _rightWhere = '';\n      }\n      // sql\n      const _sql = `select a.* from aAtom a\n            where\n            (\n              a.deleted=0 and a.iid=${iid} and a.id=${atomId}\n              and a.atomStage>0\n              ${_rightWhere} \n            )\n        `;\n      return _sql;\n    }\n  }\n  return Procedure;\n};\n","module.exports = ctx => {\n  class Procedure {\n    checkRightActionBulk({ iid, userIdWho, atomClassId, action }) {\n      // for safe\n      iid = parseInt(iid);\n      userIdWho = parseInt(userIdWho);\n      atomClassId = parseInt(atomClassId);\n      action = parseInt(action || 0);\n\n      const _actionWhere = action ? `and a.code=${action}` : '';\n      const _rightWhere = `\n        and exists(\n          select b.atomClassId from aViewUserRightAtomClass b where b.iid=${iid} and a.atomClassId=b.atomClassId and a.code=b.action and b.userIdWho=${userIdWho}\n        )\n      `;\n      // sql\n      const _sql = `select a.*,c.module,c.atomClassName,c.atomClassIdParent from aAtomAction a\n            left join aAtomClass c on a.atomClassId=c.id\n              where a.iid=${iid} and a.bulk=1 and a.atomClassId=${atomClassId} ${_actionWhere} ${_rightWhere}\n        `;\n      return _sql;\n    }\n  }\n  return Procedure;\n};\n","module.exports = ctx => {\n  class Procedure {\n    checkRightCreateRole({ iid, userIdWho, atomClassId, roleIdOwner }) {\n      // for safe\n      iid = parseInt(iid);\n      userIdWho = parseInt(userIdWho);\n      atomClassId = parseInt(atomClassId);\n      roleIdOwner = parseInt(roleIdOwner);\n\n      const _rightWhere = `\n        and exists(\n          select b.atomClassId from aViewUserRightAtomClass b where b.iid=${iid} and a.id=b.atomClassId and b.action=1 and b.userIdWho=${userIdWho} and b.roleId=${roleIdOwner}\n        )\n      `;\n      // sql\n      const _sql = `select a.* from aAtomClass a\n            where a.iid=${iid} and a.id=${atomClassId} ${_rightWhere}\n        `;\n      return _sql;\n    }\n  }\n  return Procedure;\n};\n","module.exports = ctx => {\n  class Procedure {\n    // check for formal/history\n    checkRightRead({ iid, userIdWho, atomId, forAtomUser, useAreaScope }) {\n      // for safe\n      iid = parseInt(iid);\n      userIdWho = parseInt(userIdWho);\n      atomId = parseInt(atomId);\n\n      // useAreaScope\n      let useAreaScopeWhere = '';\n      if (useAreaScope) {\n        useAreaScopeWhere =\n          ' and (c.areaScope is null or a.atomAreaValue is null or (c.areaKey=a.atomAreaKey and POSITION(c.areaScope in a.atomAreaValue)=1) )';\n      }\n\n      // _rightWhere\n      let _rightWhere;\n      const _mine = `\n          (a.userIdCreated=${userIdWho} and exists(select c.atomClassId from aViewUserRightAtomClass c where c.iid=${iid} and a.atomClassId=c.atomClassId and c.action=2 and c.scope=0 and c.userIdWho=${userIdWho}))\n          `;\n      let _others;\n      if (forAtomUser) {\n        _others = `\n          exists(\n            select c.userIdWhom from aViewUserRightAtomClassUser c where c.iid=${iid} and a.itemId=c.userIdWhom and c.atomClassId=a.atomClassId and c.action=2 and c.userIdWho=${userIdWho}\n          )\n        `;\n      } else {\n        _others = `\n            exists(\n              select c.roleIdWhom from aViewUserRightAtomClassRole c \n                where c.iid=${iid} and c.atomClassId=a.atomClassId and c.action=2 and c.roleIdWhom=a.roleIdOwner and c.userIdWho=${userIdWho}\n                  ${useAreaScopeWhere}\n            )\n          `;\n      }\n      //\n      _rightWhere = `\n        (\n          ${_mine}\n          or\n          ${_others}\n        )\n      `;\n      if (_rightWhere) {\n        _rightWhere = ` and ( ${_rightWhere} )`;\n      } else {\n        _rightWhere = '';\n      }\n      // sql\n      const _sql = `select a.* from aAtom a\n           left join aAtomClass b on a.atomClassId=b.id\n             where\n             (\n                 a.deleted=0 and a.iid=${iid} and a.id=${atomId}\n                 and a.atomStage>0 \n                 ${_rightWhere}\n             )\n        `;\n      return _sql;\n    }\n  }\n  return Procedure;\n};\n","module.exports = ctx => {\n  class Procedure {\n    checkRoleRightRead({ iid, roleIdWho, atomId, forAtomUser }) {\n      // for safe\n      iid = parseInt(iid);\n      roleIdWho = parseInt(roleIdWho);\n      atomId = parseInt(atomId);\n      // _rightWhere\n      let _rightWhere;\n      if (forAtomUser) {\n        _rightWhere = `\n          exists(\n            select c.userIdWhom from aViewRoleRightAtomClassUser c where c.iid=${iid} and a.itemId=c.userIdWhom and c.atomClassId=a.atomClassId and c.action=2 and c.roleIdWho=${roleIdWho}\n          )\n        `;\n      } else {\n        _rightWhere = `\n            exists(\n              select c.roleIdWhom from aViewRoleRightAtomClassRole c \n                where c.iid=${iid} and c.atomClassId=a.atomClassId and c.action=2 and c.roleIdWhom=a.roleIdOwner and c.roleIdWho=${roleIdWho}\n            )\n          `;\n      }\n      if (_rightWhere) {\n        _rightWhere = ` and ( ${_rightWhere} )`;\n      } else {\n        _rightWhere = '';\n      }\n      // sql\n      const _sql = `select a.* from aAtom a\n           left join aAtomClass b on a.atomClassId=b.id\n            where\n            (\n               a.deleted=0 and a.iid=${iid} and a.id=${atomId}\n               and a.atomStage>0\n               ${_rightWhere}\n            )\n        `;\n      return _sql;\n    }\n  }\n  return Procedure;\n};\n","module.exports = ctx => {\n  class Procedure {\n    _selectAtoms_0({\n      iid,\n      tableName,\n      where,\n      orders,\n      page,\n      comment,\n      file,\n      count,\n      stage,\n      language,\n      category,\n      tag,\n      resource,\n      resourceLocale,\n      mode,\n      cms,\n      forAtomUser,\n      role,\n    }) {\n      // -- tables\n      // -- a: aAtom\n      // -- b: aAtomClass\n      // -- c: aViewUserRightAtomClassRole\n      // -- d: aAtomStar\n      // -- e: aAtomLabelRef\n      // -- f: {item}\n      // -- g: aUser\n      // -- g2: aUser\n      // -- h: aComment\n      // -- i: aFile\n      // -- j: aCategory\n      // -- k: aTagRef\n      // -- m: aResourceLocale\n      // -- p: aCmsArticle\n      // -- q: aCmsContent\n\n      // for safe\n      // tableName = tableName ? ctx.model.format('??', tableName) : null; // not format tableName\n      where = where ? ctx.model._where(where) : null;\n      orders = orders ? ctx.model._orders(orders) : null;\n      const limit = page ? ctx.model._limit(page.size, page.index) : null;\n\n      // vars\n      let _languageWhere;\n      let _categoryWhere;\n      let _tagJoin, _tagWhere;\n\n      let _commentField, _commentJoin, _commentWhere;\n      let _fileField, _fileJoin, _fileWhere;\n      let _itemField, _itemJoin;\n\n      let _atomClassWhere;\n\n      let _resourceField, _resourceJoin, _resourceWhere;\n\n      let _userField, _userJoin;\n\n      // cms\n      const { _cmsField, _cmsJoin, _cmsWhere } = this._prepare_cms({ tableName, iid, mode, cms });\n\n      //\n      const _where = where ? `${where} AND` : ' WHERE';\n      const _orders = orders || '';\n      const _limit = limit || '';\n\n      // language\n      if (language) {\n        _languageWhere = ctx.model.format(' and a.atomLanguage=?', language);\n      } else {\n        _languageWhere = '';\n      }\n\n      // category\n      if (category) {\n        _categoryWhere = ` and a.atomCategoryId=${category}`;\n      } else {\n        _categoryWhere = '';\n      }\n\n      // tag\n      if (tag) {\n        _tagJoin = ' inner join aTagRef k on k.atomId=a.id';\n        _tagWhere = ` and k.iid=${iid} and k.tagId=${tag}`;\n      } else {\n        _tagJoin = '';\n        _tagWhere = '';\n      }\n\n      // comment\n      if (comment) {\n        _commentField =\n          ',h.id h_id,h.createdAt h_createdAt,h.updatedAt h_updatedAt,h.userId h_userId,h.sorting h_sorting,h.heartCount h_heartCount,h.replyId h_replyId,h.replyUserId h_replyUserId,h.replyContent h_replyContent,h.content h_content,h.summary h_summary,h.html h_html,h.userName h_userName,h.avatar h_avatar,h.replyUserName h_replyUserName';\n        _commentJoin = ' inner join aViewComment h on h.atomId=a.id';\n        _commentWhere = ` and h.iid=${iid} and h.deleted=0`;\n      } else {\n        _commentField = '';\n        _commentJoin = '';\n        _commentWhere = '';\n      }\n\n      // file\n      if (file) {\n        _fileField =\n          ',i.id i_id,i.createdAt i_createdAt,i.updatedAt i_updatedAt,i.userId i_userId,i.downloadId i_downloadId,i.mode i_mode,i.fileSize i_fileSize,i.width i_width,i.height i_height,i.filePath i_filePath,i.fileName i_fileName,i.realName i_realName,i.fileExt i_fileExt,i.encoding i_encoding,i.mime i_mime,i.attachment i_attachment,i.flag i_flag,i.userName i_userName,i.avatar i_avatar';\n        _fileJoin = ' inner join aViewFile i on i.atomId=a.id';\n        _fileWhere = ` and i.iid=${iid} and i.deleted=0`;\n      } else {\n        _fileField = '';\n        _fileJoin = '';\n        _fileWhere = '';\n      }\n\n      // resource\n      if (resource && resourceLocale) {\n        _resourceField = ',m.atomNameLocale';\n        _resourceJoin = ' inner join aResourceLocale m on m.atomId=a.id';\n        _resourceWhere = ctx.model.format(' and a.atomDisabled=0 and m.locale=?', resourceLocale);\n      } else {\n        _resourceField = '';\n        _resourceJoin = '';\n        _resourceWhere = '';\n      }\n\n      // tableName\n      if (tableName) {\n        _itemField = 'f.*,';\n        _itemJoin = ` inner join ${tableName} f on f.atomId=a.id`;\n      } else {\n        _itemField = '';\n        _itemJoin = '';\n      }\n\n      // atomClassInner\n      // atomClassInner\n      if (tableName) {\n        _atomClassWhere = '';\n      } else {\n        _atomClassWhere = ' and b.atomClassInner=0';\n      }\n\n      // aUser\n      if (forAtomUser) {\n        _userField = '';\n        _userJoin = '';\n      } else {\n        _userField = 'g.userName,g.avatar,';\n        _userJoin = ' left join aUser g on a.userIdCreated=g.id';\n      }\n\n      // fields\n      let _selectFields;\n      if (count) {\n        _selectFields = 'count(*) as _count';\n      } else {\n        _selectFields = `${_itemField} ${_cmsField}\n                a.id as atomId,a.itemId,a.atomStage,a.atomFlowId,a.atomClosed,a.atomIdDraft,a.atomIdFormal,a.roleIdOwner,a.atomClassId,a.atomName,\n                a.atomStatic,a.atomStaticKey,a.atomRevision,a.atomLanguage,a.atomCategoryId,j.categoryName as atomCategoryName,a.atomTags,\n                a.atomSimple,a.atomDisabled,a.atomAreaKey,a.atomAreaValue,a.atomState,\n                a.allowComment,a.starCount,a.commentCount,a.attachmentCount,a.readCount,a.userIdCreated,a.userIdUpdated,a.createdAt as atomCreatedAt,a.updatedAt as atomUpdatedAt,\n                b.module,b.atomClassName,b.atomClassIdParent,\n                ${_userField}\n                g2.userName as userNameUpdated,g2.avatar as avatarUpdated\n                ${_commentField} ${_fileField} ${_resourceField}`;\n      }\n\n      // _rightWhere\n      let _rightWhere;\n      if (forAtomUser && role) {\n        _rightWhere = `\n        exists(\n          select c2.userId from aViewUserRoleRef c2 where c2.iid=${iid} and a.itemId=c2.userId and c2.roleIdParent=${role}\n        )\n      `;\n      }\n      if (_rightWhere) {\n        _rightWhere = ` and ( ${_rightWhere} )`;\n      } else {\n        _rightWhere = '';\n      }\n\n      // sql\n      const _sql = `select ${_selectFields} from aAtom a\n            inner join aAtomClass b on a.atomClassId=b.id\n            ${_userJoin}\n            left join aUser g2 on a.userIdUpdated=g2.id\n            left join aCategory j on a.atomCategoryId=j.id\n            ${_itemJoin}\n            ${_tagJoin}\n            ${_commentJoin}\n            ${_fileJoin}\n            ${_resourceJoin}\n            ${_cmsJoin}\n\n          ${_where}\n           (\n             a.deleted=0 and a.iid=${iid} and a.atomStage=${stage}\n             ${_atomClassWhere}\n             ${_languageWhere}\n             ${_categoryWhere}\n             ${_tagWhere}\n             ${_commentWhere}\n             ${_fileWhere}\n             ${_resourceWhere}\n             ${_cmsWhere}\n             ${_rightWhere}\n           )\n\n          ${count ? '' : _orders}\n          ${count ? '' : _limit}\n        `;\n\n      // ok\n      return _sql;\n    }\n  }\n  return Procedure;\n};\n","module.exports = ctx => {\n  class Procedure {\n    _selectAtoms_draft({\n      iid,\n      userIdWho,\n      tableName,\n      where,\n      orders,\n      page,\n      star,\n      label,\n      comment,\n      file,\n      count,\n      stage,\n      language,\n      category,\n      tag,\n      mode,\n      cms,\n    }) {\n      // -- tables\n      // -- a: aAtom\n      // -- b: aAtomClass\n      // -- c: aViewUserRightAtomClassRole\n      // -- d: aAtomStar\n      // -- e: aAtomLabelRef\n      // -- f: {item}\n      // -- g: aUser\n      // -- g2: aUser\n      // -- h: aComment\n      // -- i: aFile\n      // -- j: aCategory\n      // -- k: aTagRef\n      // -- p: aCmsArticle\n      // -- q: aCmsContent\n      // -- r: aFlow\n\n      // for safe\n      // tableName = tableName ? ctx.model.format('??', tableName) : null; // not format tableName\n      where = where ? ctx.model._where(where) : null;\n      orders = orders ? ctx.model._orders(orders) : null;\n      const limit = page ? ctx.model._limit(page.size, page.index) : null;\n\n      // vars\n      let _languageWhere;\n      let _categoryWhere;\n      let _tagJoin, _tagWhere;\n\n      let _starJoin, _starWhere;\n\n      let _labelJoin, _labelWhere;\n      let _commentField, _commentJoin, _commentWhere;\n\n      let _fileField, _fileJoin, _fileWhere;\n\n      let _itemField, _itemJoin;\n\n      let _atomClassWhere;\n\n      // cms\n      const { _cmsField, _cmsJoin, _cmsWhere } = this._prepare_cms({ tableName, iid, mode, cms });\n\n      //\n      const _where = where ? `${where} AND` : ' WHERE';\n      const _orders = orders || '';\n      const _limit = limit || '';\n\n      // language\n      if (language) {\n        _languageWhere = ctx.model.format(' and a.atomLanguage=?', language);\n      } else {\n        _languageWhere = '';\n      }\n\n      // category\n      if (category) {\n        _categoryWhere = ` and a.atomCategoryId=${category}`;\n      } else {\n        _categoryWhere = '';\n      }\n\n      // tag\n      if (tag) {\n        _tagJoin = ' inner join aTagRef k on k.atomId=a.id';\n        _tagWhere = ` and k.iid=${iid} and k.tagId=${tag}`;\n      } else {\n        _tagJoin = '';\n        _tagWhere = '';\n      }\n\n      // star\n      if (star) {\n        _starJoin = ' inner join aAtomStar d on a.id=d.atomId';\n        _starWhere = ` and d.iid=${iid} and d.userId=${userIdWho} and d.star=1`;\n      } else {\n        _starJoin = '';\n        _starWhere = '';\n      }\n      const _starField = `,(select d2.star from aAtomStar d2 where d2.iid=${iid} and d2.atomId=a.id and d2.userId=${userIdWho}) as star`;\n\n      // label\n      if (label) {\n        _labelJoin = ' inner join aAtomLabelRef e on a.id=e.atomId';\n        _labelWhere = ` and e.iid=${iid} and e.userId=${userIdWho} and e.labelId=${label}`;\n      } else {\n        _labelJoin = '';\n        _labelWhere = '';\n      }\n      const _labelField = `,(select e2.labels from aAtomLabel e2 where e2.iid=${iid} and e2.atomId=a.id and e2.userId=${userIdWho}) as labels`;\n\n      // comment\n      if (comment) {\n        _commentField = `,h.id h_id,h.createdAt h_createdAt,h.updatedAt h_updatedAt,h.userId h_userId,h.sorting h_sorting,h.heartCount h_heartCount,h.replyId h_replyId,h.replyUserId h_replyUserId,h.replyContent h_replyContent,h.content h_content,h.summary h_summary,h.html h_html,h.userName h_userName,h.avatar h_avatar,h.replyUserName h_replyUserName,\n               (select h2.heart from aCommentHeart h2 where h2.iid=${iid} and h2.commentId=h.id and h2.userId=${userIdWho}) as h_heart`;\n\n        _commentJoin = ' inner join aViewComment h on h.atomId=a.id';\n        _commentWhere = ` and h.iid=${iid} and h.deleted=0`;\n      } else {\n        _commentField = '';\n        _commentJoin = '';\n        _commentWhere = '';\n      }\n\n      // file\n      if (file) {\n        _fileField =\n          ',i.id i_id,i.createdAt i_createdAt,i.updatedAt i_updatedAt,i.userId i_userId,i.downloadId i_downloadId,i.mode i_mode,i.fileSize i_fileSize,i.width i_width,i.height i_height,i.filePath i_filePath,i.fileName i_fileName,i.realName i_realName,i.fileExt i_fileExt,i.encoding i_encoding,i.mime i_mime,i.attachment i_attachment,i.flag i_flag,i.userName i_userName,i.avatar i_avatar';\n        _fileJoin = ' inner join aViewFile i on i.atomId=a.id';\n        _fileWhere = ` and i.iid=${iid} and i.deleted=0`;\n      } else {\n        _fileField = '';\n        _fileJoin = '';\n        _fileWhere = '';\n      }\n\n      // flow\n      const _flowField = ',r.flowStatus,r.flowNodeIdCurrent,r.flowNodeNameCurrent';\n      const _flowJoin = ' left join aFlow r on r.id=a.atomFlowId';\n      const _flowWhere = '';\n\n      // tableName\n      if (tableName) {\n        _itemField = 'f.*,';\n        _itemJoin = ` inner join ${tableName} f on f.atomId=a.id`;\n      } else {\n        _itemField = '';\n        _itemJoin = '';\n      }\n\n      // atomClassInner\n      // eslint-disable-next-line\n      _atomClassWhere = '';\n      // if (tableName || star || label) {\n      //   _atomClassWhere = '';\n      // } else {\n      //   _atomClassWhere = ' and b.atomClassInner=0';\n      // }\n\n      // fields\n      let _selectFields;\n      if (count) {\n        _selectFields = 'count(*) as _count';\n      } else {\n        _selectFields = `${_itemField} ${_cmsField}\n                a.id as atomId,a.itemId,a.atomStage,a.atomFlowId,a.atomClosed,a.atomIdDraft,a.atomIdFormal,a.roleIdOwner,a.atomClassId,a.atomName,\n                a.atomStatic,a.atomStaticKey,a.atomRevision,a.atomLanguage,a.atomCategoryId,j.categoryName as atomCategoryName,a.atomTags,\n                a.atomSimple,a.atomDisabled,a.atomAreaKey,a.atomAreaValue,a.atomState,\n                a.allowComment,a.starCount,a.commentCount,a.attachmentCount,a.readCount,a.userIdCreated,a.userIdUpdated,a.createdAt as atomCreatedAt,a.updatedAt as atomUpdatedAt,\n                b.module,b.atomClassName,b.atomClassIdParent,\n                g.userName,g.avatar,\n                g2.userName as userNameUpdated,g2.avatar as avatarUpdated\n                ${_starField} ${_labelField} ${_commentField}\n                ${_fileField} ${_flowField}\n              `;\n      }\n\n      // sql\n      const _sql = `select ${_selectFields} from aAtom a\n            inner join aAtomClass b on a.atomClassId=b.id\n            left join aUser g on a.userIdCreated=g.id\n            left join aUser g2 on a.userIdUpdated=g2.id\n            left join aCategory j on a.atomCategoryId=j.id\n            ${_itemJoin}\n            ${_tagJoin}\n            ${_starJoin}\n            ${_labelJoin}\n            ${_commentJoin}\n            ${_fileJoin}\n            ${_flowJoin}\n            ${_cmsJoin}\n\n          ${_where}\n           (\n             a.deleted=0 and a.iid=${iid} and a.atomStage=${stage} and a.atomClosed=0 and a.userIdUpdated=${userIdWho}\n             ${_atomClassWhere}\n             ${_languageWhere}\n             ${_categoryWhere}\n             ${_tagWhere}\n             ${_starWhere}\n             ${_labelWhere}\n             ${_commentWhere}\n             ${_fileWhere}\n             ${_flowWhere}\n             ${_cmsWhere}\n           )\n\n          ${count ? '' : _orders}\n          ${count ? '' : _limit}\n        `;\n\n      // ok\n      return _sql;\n    }\n  }\n  return Procedure;\n};\n","module.exports = ctx => {\n  class Procedure {\n    _selectAtoms({\n      iid,\n      userIdWho,\n      tableName,\n      where,\n      orders,\n      page,\n      star,\n      label,\n      comment,\n      file,\n      count,\n      stage,\n      language,\n      category,\n      tag,\n      mine,\n      resource,\n      resourceLocale,\n      mode,\n      cms,\n      forAtomUser,\n      useAreaScope,\n      role,\n    }) {\n      // -- tables\n      // -- a: aAtom\n      // -- b: aAtomClass\n      // -- c: aViewUserRightAtomClassRole\n      // -- d: aAtomStar\n      // -- e: aAtomLabelRef\n      // -- f: {item}\n      // -- g: aUser\n      // -- g2: aUser\n      // -- h: aComment\n      // -- i: aFile\n      // -- j: aCategory\n      // -- k: aTagRef\n      // -- m: aResourceLocale\n      // -- p: aCmsArticle\n      // -- q: aCmsContent\n\n      // for safe\n      // tableName = tableName ? ctx.model.format('??', tableName) : null; // not format tableName\n      where = where ? ctx.model._where(where) : null;\n      orders = orders ? ctx.model._orders(orders) : null;\n      const limit = page ? ctx.model._limit(page.size, page.index) : null;\n\n      // vars\n      let _languageWhere;\n      let _categoryWhere;\n      let _tagJoin, _tagWhere;\n\n      let _starJoin, _starWhere;\n\n      let _labelJoin, _labelWhere;\n      let _commentField, _commentJoin, _commentWhere;\n      let _fileField, _fileJoin, _fileWhere;\n      let _itemField, _itemJoin;\n\n      let _atomClassWhere;\n\n      let _resourceField, _resourceJoin, _resourceWhere;\n\n      let _userField, _userJoin;\n\n      let _itemKeyName;\n\n      // cms\n      const { _cmsField, _cmsJoin, _cmsWhere } = this._prepare_cms({ tableName, iid, mode, cms });\n\n      //\n      const _where = where ? `${where} AND` : ' WHERE';\n      const _orders = orders || '';\n      const _limit = limit || '';\n\n      // language\n      if (language) {\n        _languageWhere = ctx.model.format(' and a.atomLanguage=?', language);\n      } else {\n        _languageWhere = '';\n      }\n\n      // category\n      if (category) {\n        _categoryWhere = ` and a.atomCategoryId=${category}`;\n      } else {\n        _categoryWhere = '';\n      }\n\n      // tag\n      if (tag) {\n        _tagJoin = ' inner join aTagRef k on k.atomId=a.id';\n        _tagWhere = ` and k.iid=${iid} and k.tagId=${tag}`;\n      } else {\n        _tagJoin = '';\n        _tagWhere = '';\n      }\n\n      // star\n      if (star) {\n        _starJoin = ' inner join aAtomStar d on a.id=d.atomId';\n        _starWhere = ` and d.iid=${iid} and d.userId=${userIdWho} and d.star=1`;\n      } else {\n        _starJoin = '';\n        _starWhere = '';\n      }\n      const _starField = `,(select d2.star from aAtomStar d2 where d2.iid=${iid} and d2.atomId=a.id and d2.userId=${userIdWho}) as star`;\n\n      // label\n      if (label) {\n        _labelJoin = ' inner join aAtomLabelRef e on a.id=e.atomId';\n        _labelWhere = ` and e.iid=${iid} and e.userId=${userIdWho} and e.labelId=${label}`;\n      } else {\n        _labelJoin = '';\n        _labelWhere = '';\n      }\n      const _labelField = `,(select e2.labels from aAtomLabel e2 where e2.iid=${iid} and e2.atomId=a.id and e2.userId=${userIdWho}) as labels`;\n\n      // comment\n      if (comment) {\n        _commentField = `,h.id h_id,h.createdAt h_createdAt,h.updatedAt h_updatedAt,h.userId h_userId,h.sorting h_sorting,h.heartCount h_heartCount,h.replyId h_replyId,h.replyUserId h_replyUserId,h.replyContent h_replyContent,h.content h_content,h.summary h_summary,h.html h_html,h.userName h_userName,h.avatar h_avatar,h.replyUserName h_replyUserName,\n               (select h2.heart from aCommentHeart h2 where h2.iid=${iid} and h2.commentId=h.id and h2.userId=${userIdWho}) as h_heart`;\n\n        _commentJoin = ' inner join aViewComment h on h.atomId=a.id';\n        _commentWhere = ` and h.iid=${iid} and h.deleted=0`;\n      } else {\n        _commentField = '';\n        _commentJoin = '';\n        _commentWhere = '';\n      }\n\n      // file\n      if (file) {\n        _fileField =\n          ',i.id i_id,i.createdAt i_createdAt,i.updatedAt i_updatedAt,i.userId i_userId,i.downloadId i_downloadId,i.mode i_mode,i.fileSize i_fileSize,i.width i_width,i.height i_height,i.filePath i_filePath,i.fileName i_fileName,i.realName i_realName,i.fileExt i_fileExt,i.encoding i_encoding,i.mime i_mime,i.attachment i_attachment,i.flag i_flag,i.userName i_userName,i.avatar i_avatar';\n        _fileJoin = ' inner join aViewFile i on i.atomId=a.id';\n        _fileWhere = ` and i.iid=${iid} and i.deleted=0`;\n      } else {\n        _fileField = '';\n        _fileJoin = '';\n        _fileWhere = '';\n      }\n\n      // resource\n      if (resource && resourceLocale) {\n        _resourceField = ',m.atomNameLocale';\n        _resourceJoin = ' inner join aResourceLocale m on m.atomId=a.id';\n        _resourceWhere = ctx.model.format(' and a.atomDisabled=0 and m.locale=?', resourceLocale);\n      } else {\n        _resourceField = '';\n        _resourceJoin = '';\n        _resourceWhere = '';\n      }\n\n      // tableName\n      if (tableName) {\n        _itemField = 'f.*,';\n        _itemJoin = ` inner join ${tableName} f on f.atomId=a.id`;\n      } else {\n        _itemField = '';\n        _itemJoin = '';\n      }\n\n      // _itemKeyName\n      if (resource && resourceLocale) {\n        _itemKeyName = 'm.atomId';\n      } else if (tableName) {\n        _itemKeyName = 'f.atomId';\n      } else {\n        _itemKeyName = 'a.id';\n      }\n\n      // atomClassInner\n      if (tableName || star || label) {\n        _atomClassWhere = '';\n      } else {\n        _atomClassWhere = ' and b.atomClassInner=0';\n      }\n\n      // aUser\n      if (forAtomUser) {\n        _userField = '';\n        _userJoin = '';\n      } else {\n        _userField = 'g.userName,g.avatar,';\n        _userJoin = ' left join aUser g on a.userIdCreated=g.id';\n      }\n\n      // fields\n      let _selectFields;\n      if (count) {\n        _selectFields = 'count(*) as _count';\n      } else {\n        _selectFields = `${_itemField} ${_cmsField}\n                a.id as atomId,a.itemId,a.atomStage,a.atomFlowId,a.atomClosed,a.atomIdDraft,a.atomIdFormal,a.roleIdOwner,a.atomClassId,a.atomName,\n                a.atomStatic,a.atomStaticKey,a.atomRevision,a.atomLanguage,a.atomCategoryId,j.categoryName as atomCategoryName,a.atomTags,\n                a.atomSimple,a.atomDisabled,a.atomAreaKey,a.atomAreaValue,a.atomState,\n                a.allowComment,a.starCount,a.commentCount,a.attachmentCount,a.readCount,a.userIdCreated,a.userIdUpdated,a.createdAt as atomCreatedAt,a.updatedAt as atomUpdatedAt,\n                b.module,b.atomClassName,b.atomClassIdParent,\n                ${_userField}\n                g2.userName as userNameUpdated,g2.avatar as avatarUpdated\n                ${_starField} ${_labelField} ${_commentField} ${_fileField} ${_resourceField}`;\n      }\n\n      // useAreaScope\n      let useAreaScopeWhere = '';\n      if (useAreaScope) {\n        useAreaScopeWhere =\n          ' and (c.areaScope is null or a.atomAreaValue is null or (c.areaKey=a.atomAreaKey and POSITION(c.areaScope in a.atomAreaValue)=1) )';\n      }\n\n      // _rightWhere\n      let _rightWhere;\n      if (resource) {\n        _rightWhere = `\n          exists(\n            select c.resourceAtomId from aViewUserRightResource c where c.iid=${iid} and ${_itemKeyName}=c.resourceAtomId and c.userIdWho=${userIdWho}\n          )\n        `;\n      } else {\n        const _mine = `\n          (a.userIdCreated=${userIdWho} and exists(select c.atomClassId from aViewUserRightAtomClass c where c.iid=${iid} and a.atomClassId=c.atomClassId and c.action=2 and c.scope=0 and c.userIdWho=${userIdWho}))\n        `;\n        let _others;\n        if (forAtomUser) {\n          if (role) {\n            _others = `\n              exists(\n                select c.userIdWhom from aViewUserRightAtomClassUser c\n                  inner join aViewUserRoleRef c2 on c.userIdWhom=c2.userId and c2.roleIdParent=${role}\n                  where c.iid=${iid} and a.itemId=c.userIdWhom and c.atomClassId=a.atomClassId and c.action=2 and c.userIdWho=${userIdWho}\n              )\n            `;\n          } else {\n            _others = `\n              exists(\n                select c.userIdWhom from aViewUserRightAtomClassUser c where c.iid=${iid} and a.itemId=c.userIdWhom and c.atomClassId=a.atomClassId and c.action=2 and c.userIdWho=${userIdWho}\n              )\n            `;\n          }\n        } else {\n          _others = `\n            exists(\n              select c.roleIdWhom from aViewUserRightAtomClassRole c \n                where c.iid=${iid} and c.atomClassId=a.atomClassId and c.action=2 and c.roleIdWhom=a.roleIdOwner and c.userIdWho=${userIdWho}\n                  ${useAreaScopeWhere}\n            )\n          `;\n        }\n        //\n        if (mine) {\n          _rightWhere = _mine;\n        } else if (star || label) {\n          _rightWhere = `\n            (\n              ${_mine}\n              or\n              ${_others}\n            )\n          `;\n        } else {\n          // _rightWhere = _others;\n          _rightWhere = `\n            (\n              ${_mine}\n              or\n              ${_others}\n            )\n          `;\n        }\n      }\n      if (_rightWhere) {\n        _rightWhere = ` and ( ${_rightWhere} )`;\n      } else {\n        _rightWhere = '';\n      }\n\n      // sql\n      const _sql = `select ${_selectFields} from aAtom a\n            inner join aAtomClass b on a.atomClassId=b.id\n            ${_userJoin}\n            left join aUser g2 on a.userIdUpdated=g2.id\n            left join aCategory j on a.atomCategoryId=j.id\n            ${_itemJoin}\n            ${_tagJoin}\n            ${_starJoin}\n            ${_labelJoin}\n            ${_commentJoin}\n            ${_fileJoin}\n            ${_resourceJoin}\n            ${_cmsJoin}\n\n          ${_where}\n           (\n             a.deleted=0 and a.iid=${iid} and a.atomStage=${stage}\n             ${_atomClassWhere}\n             ${_languageWhere}\n             ${_categoryWhere}\n             ${_tagWhere}\n             ${_starWhere}\n             ${_labelWhere}\n             ${_commentWhere}\n             ${_fileWhere}\n             ${_resourceWhere}\n             ${_cmsWhere}\n             ${_rightWhere}\n           )\n\n          ${count ? '' : _orders}\n          ${count ? '' : _limit}\n        `;\n\n      // ok\n      return _sql;\n    }\n  }\n  return Procedure;\n};\n","module.exports = ctx => {\n  class Procedure {\n    getAtom({ iid, userIdWho, tableName, atomId, resource, resourceLocale, mode, cms, forAtomUser }) {\n      // -- tables\n      // -- a: aAtom\n      // -- b: aAtomClass\n      // -- d: aAtomStar\n      // -- e: aAtomLabelRef\n      // -- f: {item}\n      // -- g: aUser\n      // -- g2: aUser\n      // -- j: aCategory\n      // -- m: aResourceLocale\n      // -- p: aCmsArticle\n      // -- q: aCmsContent\n      // -- r: aFlow\n\n      // for safe\n      // tableName = tableName ? ctx.model.format('??', tableName) : null; // not format tableName\n\n      iid = parseInt(iid);\n      userIdWho = parseInt(userIdWho);\n      atomId = parseInt(atomId);\n      resource = parseInt(resource);\n\n      // vars\n      let _starField, _labelField;\n      let _itemField, _itemJoin;\n\n      let _resourceField, _resourceJoin, _resourceWhere;\n\n      let _userField, _userJoin;\n\n      // star\n      if (userIdWho) {\n        _starField = `,(select d.star from aAtomStar d where d.iid=${iid} and d.atomId=a.id and d.userId=${userIdWho}) as star`;\n      } else {\n        _starField = '';\n      }\n\n      // label\n      if (userIdWho) {\n        _labelField = `,(select e.labels from aAtomLabel e where e.iid=${iid} and e.atomId=a.id and e.userId=${userIdWho}) as labels`;\n      } else {\n        _labelField = '';\n      }\n\n      // resource\n      if (resource && resourceLocale) {\n        _resourceField = ',m.atomNameLocale';\n        _resourceJoin = ' inner join aResourceLocale m on m.atomId=a.id';\n        // not check atomDisabled\n        _resourceWhere = ctx.model.format(' and m.locale=?', resourceLocale);\n      } else {\n        _resourceField = '';\n        _resourceJoin = '';\n        _resourceWhere = '';\n      }\n\n      // flow\n      const _flowField = ',r.flowStatus,r.flowNodeIdCurrent,r.flowNodeNameCurrent';\n      const _flowJoin = ' left join aFlow r on r.id=a.atomFlowId';\n      const _flowWhere = '';\n\n      // tableName\n      if (tableName) {\n        _itemField = 'f.*,';\n        _itemJoin = ` inner join ${tableName} f on f.atomId=a.id`;\n      } else {\n        _itemField = '';\n        _itemJoin = '';\n      }\n\n      // cms\n      const { _cmsField, _cmsJoin, _cmsWhere } = this._prepare_cms({ tableName, iid, mode, cms });\n\n      // aUser\n      if (forAtomUser) {\n        _userField = '';\n        _userJoin = '';\n      } else {\n        _userField = 'g.userName,g.avatar,';\n        _userJoin = ' left join aUser g on a.userIdCreated=g.id';\n      }\n\n      // sql\n      const _sql = `select ${_itemField} ${_cmsField}\n                a.id as atomId,a.itemId,a.atomStage,a.atomFlowId,a.atomClosed,a.atomIdDraft,a.atomIdFormal,a.roleIdOwner,a.atomClassId,a.atomName,\n                a.atomStatic,a.atomStaticKey,a.atomRevision,a.atomLanguage,a.atomCategoryId,j.categoryName as atomCategoryName,a.atomTags,\n                a.atomSimple,a.atomDisabled,a.atomAreaKey,a.atomAreaValue,a.atomState,\n                a.allowComment,a.starCount,a.commentCount,a.attachmentCount,a.readCount,a.userIdCreated,a.userIdUpdated,a.createdAt as atomCreatedAt,a.updatedAt as atomUpdatedAt,\n                b.module,b.atomClassName,b.atomClassIdParent,\n                ${_userField}\n                g2.userName as userNameUpdated,g2.avatar as avatarUpdated\n                ${_starField}\n                ${_labelField}\n                ${_resourceField}\n                ${_flowField}\n          from aAtom a\n\n            inner join aAtomClass b on a.atomClassId=b.id\n            ${_userJoin}\n            left join aUser g2 on a.userIdUpdated=g2.id\n            left join aCategory j on a.atomCategoryId=j.id\n            ${_itemJoin}\n            ${_resourceJoin}\n            ${_flowJoin}\n            ${_cmsJoin}\n\n          where a.id=${atomId}\n            and a.deleted=0 and a.iid=${iid}\n            ${_resourceWhere}\n            ${_flowWhere}\n            ${_cmsWhere}\n        `;\n\n      // ok\n      return _sql;\n    }\n  }\n  return Procedure;\n};\n","module.exports = ctx => {\n  class Procedure {\n    checkRightResource({ iid, userIdWho, resourceAtomId }) {\n      // for safe\n      iid = parseInt(iid);\n      userIdWho = parseInt(userIdWho || 0);\n      resourceAtomId = parseInt(resourceAtomId);\n      // _rightWhere\n      let _rightWhere = '';\n      if (userIdWho) {\n        _rightWhere = `\n          and (\n            exists(select c.resourceAtomId from aViewUserRightResource c where c.iid=${iid} and c.resourceAtomId=${resourceAtomId} and c.userIdWho=${userIdWho})\n              )\n        `;\n      }\n      // sql\n      const _sql = `select a.id as atomId,a.atomName from aAtom a\n            where a.iid=${iid} and a.deleted=0 and a.atomDisabled=0 and a.atomStage=1 and a.id=${resourceAtomId}\n              ${_rightWhere}\n        `;\n      return _sql;\n    }\n\n    _checkResourceLocales({ iid, locale, atomClassIds }) {\n      // for safe\n      iid = parseInt(iid);\n      locale = ctx.model.format('?', locale);\n      // sql\n      const _sql = `select a.id as atomId,a.atomName from aAtom a\n            where a.iid=${iid} and a.deleted=0 and a.atomStage=1 and a.atomClassId in (${atomClassIds.join(',')})\n              and not exists(\n                select b.id from aResourceLocale b\n                  where b.iid=${iid} and b.locale=${locale} and b.atomId=a.id\n                    and (b.atomNameLocale is not null and b.atomNameLocale<>'')\n                )\n        `;\n      return _sql;\n    }\n  }\n  return Procedure;\n};\n","module.exports = ctx => {\n  class Middleware {\n    async execute(options, next) {\n      // check\n      await ctx.bean.user.check(options);\n      // next\n      await next();\n    }\n  }\n  return Middleware;\n};\n","module.exports = ctx => {\n  class Middleware {\n    async execute(options, next) {\n      // check\n      await ctx.bean.user.check(options);\n      // next\n      await next();\n    }\n  }\n  return Middleware;\n};\n","const URL = require('url').URL;\nconst require3 = require('require3');\nconst koaCors = require3('@koa/cors');\n\nconst optionsDefault = {\n  // origin: undefined,\n  allowMethods: 'GET,HEAD,PUT,POST,DELETE,PATCH',\n  // exposeHeaders: '',\n  // allowHeaders: '',\n  // maxAge: 0,\n  credentials: true,\n  // keepHeadersOnError:undefined,\n};\n\nmodule.exports = ctx => {\n  class Middleware {\n    async execute(options, next) {\n      // not cors (safari not send sec-fetch-mode)\n      // if (ctx.headers['sec-fetch-mode'] !== 'cors') return await next();\n      if (ctx.innerAccess) return await next();\n\n      let origin = ctx.get('origin');\n\n      if (!origin || origin === 'null') origin = 'null';\n\n      const host = ctx.host;\n      if (origin !== 'null' && new URL(origin).host === host) {\n        return await next();\n      }\n\n      // options\n      const optionsCors = ctx.bean.util.extend({}, optionsDefault, options);\n\n      // origin\n      // if security plugin enabled, and origin config is not provided, will only allow safe domains support CORS.\n      optionsCors.origin =\n        optionsCors.origin ||\n        function corsOrigin(ctx) {\n          // origin is {protocol}{hostname}{port}...\n          if (ctx.app.meta.util.isSafeDomain(ctx, origin)) {\n            return origin;\n          }\n          return '';\n        };\n\n      // cors\n      const fn = koaCors(optionsCors);\n      await fn(ctx, next);\n    }\n  }\n  return Middleware;\n};\n","module.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Middleware {\n    async execute(options, next) {\n      await next();\n\n      // check if log\n      const _config = ctx.config.module(moduleInfo.relativeName);\n      if (!_config.httpLog) return;\n\n      //\n      const req = ctx.request;\n      const res = ctx.response;\n\n      // check if json\n      if (res.type.indexOf('application/json') === -1) return;\n\n      // log\n      let log = '\\n';\n      // query\n      if (req.query && Object.keys(req.query).length > 0) {\n        log = `${log}query:\n  ${JSON.stringify(req.query)}\n`;\n      }\n      // params\n      if (req.params && Object.keys(req.params).length > 0) {\n        log = `${log}params:\n  ${JSON.stringify(req.params)}\n`;\n      }\n      // body\n      if (req.body && Object.keys(req.body).length > 0) {\n        log = `${log}body:\n  ${JSON.stringify(req.body)}\n`;\n      }\n      // res\n      log = `${log}response:\n  ${JSON.stringify(res.body)}\n`;\n      // log\n      ctx.logger.info(log);\n    }\n  }\n  return Middleware;\n};\n","module.exports = ctx => {\n  class Middleware {\n    async execute(options, next) {\n      if (!ctx.innerAccess) ctx.throw(403);\n      // next\n      await next();\n    }\n  }\n  return Middleware;\n};\n","module.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Middleware {\n    async execute(options, next) {\n      // options\n      options = options || {};\n      // whiteList\n      if (ctx.app.meta.isTest) {\n        options.whiteList = false;\n      } else {\n        const _config = ctx.config.module(moduleInfo.relativeName);\n        const _whiteList = _config && _config.jsonp && _config.jsonp.whiteList;\n        const hostSelf = ctx.hostname;\n        if (_whiteList) {\n          if (!Array.isArray(_whiteList)) {\n            options.whiteList = _whiteList.split(',');\n          } else {\n            options.whiteList = _whiteList.concat();\n          }\n          options.whiteList.push(hostSelf);\n        } else {\n          options.whiteList = [hostSelf];\n        }\n      }\n      // jsonp\n      const fn = ctx.app.jsonp(options);\n      await fn(ctx, next);\n    }\n  }\n  return Middleware;\n};\n","// request.body\n//   key: atomId itemId\n//   atomClass: id,module,atomClassName,atomClassIdParent\n//   item:\n// options\n//   type: atom/resource/detail\n//   action(atom):\n//   name(function):\n//   module:\nmodule.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Middleware {\n    async execute(options, next) {\n      // ignore\n      if (!options.type) {\n        // isAuthOpen\n        const isAuthOpen = ctx.bean.authOpen.isAuthOpen();\n        if (isAuthOpen && !options.enableAuthOpen && !ctx.innerAccess) return ctx.throw(403);\n        // others\n        return await next();\n      }\n\n      const types = options.type.split(',');\n      if (types.length === 1) {\n        await checkRight(types[0], moduleInfo, options, ctx);\n      } else {\n        let error;\n        for (const type of types) {\n          try {\n            await checkRight(type, moduleInfo, options, ctx);\n            // ok\n            error = null;\n            break;\n          } catch (err) {\n            error = err;\n          }\n        }\n        if (error) throw error;\n      }\n\n      // next\n      await next();\n    }\n  }\n  return Middleware;\n};\n\nasync function checkRight(type, moduleInfo, options, ctx) {\n  // atom\n  if (type === 'atom') await checkAtom(moduleInfo, options, ctx);\n\n  // resource\n  if (type === 'resource') await checkResource(moduleInfo, options, ctx);\n\n  // detail\n  if (type === 'detail') await checkDetail(moduleInfo, options, ctx);\n}\n\nasync function checkAtom(moduleInfo, options, ctx) {\n  // constant\n  const constant = ctx.constant.module(moduleInfo.relativeName);\n\n  const { atomKey, atomClass } = await _checkAtomClassExpect({ options, ctx });\n\n  // create\n  if (options.action === 'create' || options.action === constant.atom.action.create) {\n    // atomClassId\n    const atomClassId = atomClass.id;\n    // roleIdOwner\n    const roleIdOwner = ctx.request.body.roleIdOwner;\n    if (roleIdOwner) {\n      // check\n      const res = await ctx.bean.atom.checkRightCreateRole({\n        atomClass: {\n          id: atomClassId,\n        },\n        roleIdOwner,\n        user: ctx.state.user.op,\n      });\n      if (!res) ctx.throw(403);\n    } else {\n      // retrieve default one, must exists\n      const roleId = await ctx.bean.atom.preferredRoleId({\n        atomClass: {\n          id: atomClassId,\n        },\n        user: ctx.state.user.op,\n      });\n      if (roleId === 0) ctx.throw(403);\n      ctx.request.body.roleIdOwner = roleId;\n    }\n    return;\n  }\n\n  // read\n  if (options.action === 'read' || options.action === constant.atom.action.read) {\n    const res = await ctx.bean.atom.checkRightRead({\n      atom: { id: atomKey.atomId },\n      user: ctx.state.user.op,\n      checkFlow: options.checkFlow,\n    });\n    if (!res) ctx.throw(403);\n    atomKey.itemId = res.itemId;\n    return;\n  }\n\n  // other action (including write/delete)\n  const actionOther = options.action;\n  const bulk = !atomKey;\n  if (bulk) {\n    const res = await ctx.bean.atom.checkRightActionBulk({\n      atomClass,\n      action: actionOther,\n      stage: options.stage,\n      user: ctx.state.user.op,\n    });\n    if (!res) ctx.throw(403);\n  } else {\n    const res = await ctx.bean.atom.checkRightAction({\n      atom: { id: atomKey.atomId },\n      action: actionOther,\n      stage: options.stage,\n      user: ctx.state.user.op,\n      checkFlow: options.checkFlow,\n    });\n    if (!res) ctx.throw(403);\n    atomKey.itemId = res.itemId;\n  }\n}\n\nasync function checkResource(moduleInfo, options, ctx) {\n  if (ctx.innerAccess) return;\n  // useKey\n  if (options.useKey) {\n    const resourceAtomId = ctx.request.body.key.atomId;\n    const res = await _checkResource({ resourceAtomId, ctx });\n    if (!res) ctx.throw(403);\n    ctx.meta._resource = res;\n    return;\n  }\n  // atomStaticKey/name\n  if (!options.atomStaticKey && !options.name) ctx.throw(403);\n  let atomStaticKeys = options.atomStaticKey;\n  if (!atomStaticKeys && options.name) {\n    const names = options.name.split(',');\n    atomStaticKeys = names.map(name => {\n      return `${options.module || ctx.module.info.relativeName}:${name}`;\n    });\n  }\n  if (!Array.isArray(atomStaticKeys)) {\n    atomStaticKeys = atomStaticKeys.split(',');\n  }\n  let res;\n  for (const atomStaticKey of atomStaticKeys) {\n    res = await _checkResource({ atomStaticKey, ctx });\n    if (res) break; // ok when any passed\n  }\n  if (!res) ctx.throw(403);\n  ctx.meta._resource = res;\n}\n\nasync function _checkResource({ resourceAtomId, atomStaticKey, ctx }) {\n  return await ctx.bean.resource.checkRightResource({\n    resourceAtomId,\n    atomStaticKey,\n    user: ctx.state.user.op,\n  });\n}\n\nasync function checkDetail(moduleInfo, options, ctx) {\n  await ctx.bean.detail._checkRightForMiddleware({ options });\n}\n\nfunction _parseAtomClass(atomClass) {\n  if (!atomClass) return atomClass;\n  if (typeof atomClass === 'string') {\n    const [module, atomClassName] = atomClass.split(':');\n    return { module, atomClassName };\n  }\n  return atomClass;\n}\n\nfunction _checkIfSameAtomClass(atomClassA, atomClassB) {\n  return atomClassA.module === atomClassB.module && atomClassA.atomClassName === atomClassB.atomClassName;\n}\n\nasync function _checkAtomClassExpect({ options, ctx }) {\n  // atomClassExpect\n  const atomClassExpect = _parseAtomClass(options.atomClass);\n  // atomKey\n  const atomKey = ctx.request.body.key;\n  // key first, then atomClass\n  let atomClass;\n  if (atomKey) {\n    atomClass = await ctx.bean.atomClass.getByAtomId({ atomId: atomKey.atomId });\n  } else {\n    const _atomClass = ctx.request.body.atomClass;\n    if (_atomClass) {\n      atomClass = await ctx.bean.atomClass.get(_atomClass);\n    }\n  }\n  if (!atomClass && !atomClassExpect) ctx.throw(403);\n  if (atomClass && atomClassExpect && !_checkIfSameAtomClass(atomClass, atomClassExpect)) {\n    ctx.throw(403);\n  }\n  // neednot check !!atomClassExpect\n  if (!atomClass) {\n    atomClass = await ctx.bean.atomClass.get(atomClassExpect);\n  }\n  // force consistent for safe\n  if (options.atomClassForce !== false) {\n    ctx.request.body.atomClass = atomClass;\n  }\n  // ok\n  return {\n    atomKey,\n    atomClass,\n  };\n}\n","module.exports = ctx => {\n  class Middleware {\n    async execute(options, next) {\n      if (!ctx.app.meta.isTest) ctx.throw(403);\n      // next\n      await next();\n    }\n  }\n  return Middleware;\n};\n","module.exports = ctx => {\n  class Middleware {\n    async execute(options, next) {\n      await ctx.transaction.begin(async () => {\n        // next\n        await next();\n        checkIfSuccess(ctx);\n      });\n    }\n  }\n  return Middleware;\n};\n\nfunction checkIfSuccess(ctx) {\n  if (typeof ctx.response.body === 'object' && ctx.response.body && ctx.response.body.code !== undefined) {\n    if (ctx.response.body.code !== 0) {\n      throw ctx.app.meta.util.createError(ctx.response.body);\n    }\n  } else {\n    if (ctx.response.status !== 200) {\n      ctx.throw(ctx.response.status);\n    }\n  }\n}\n","module.exports = app => {\n  class Queue extends app.meta.BeanBase {\n    async execute(context) {\n      const { options } = context.data;\n      await this.ctx.bean.role._buildQueue(options);\n    }\n  }\n\n  return Queue;\n};\n","module.exports = app => {\n  class Queue extends app.meta.BeanBase {\n    async execute(context) {\n      await app.meta._runSchedule(context);\n    }\n  }\n\n  return Queue;\n};\n","module.exports = app => {\n  class Startup extends app.meta.BeanBase {\n    async execute() {\n      await this.ctx.bean.resource.checkLocales();\n    }\n  }\n\n  return Startup;\n};\n","module.exports = app => {\n  // const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Startup extends app.meta.BeanBase {\n    async execute() {\n      await this.ctx.bean.atomStatic.loadAllAtomStatics();\n    }\n  }\n\n  return Startup;\n};\n","module.exports = app => {\n  class Startup extends app.meta.BeanBase {\n    async execute() {\n      await app.meta._loadSchedules({ ctx: this.ctx });\n    }\n  }\n\n  return Startup;\n};\n","module.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Stats {\n    async execute(context) {\n      const { keys, provider, user } = context;\n      // params\n      const params = {\n        userIdUpdated: user.id,\n        atomStage: 0,\n        atomClosed: 0,\n      };\n      // draftsDrafting/draftsFlowing\n      if (provider.key === 'draftsDrafting') {\n        params.atomFlowId = 0;\n      } else if (provider.key === 'draftsFlowing') {\n        params.atomFlowId = {\n          op: '>',\n          val: 0,\n        };\n      }\n      // atomClass\n      let atomClass;\n      if (keys.length > 1) {\n        const [module, atomClassName] = keys[1].split('_');\n        atomClass = await ctx.bean.atomClass.get({\n          module,\n          atomClassName,\n        });\n      }\n      if (atomClass) {\n        params.atomClassId = atomClass.id;\n      }\n      // count\n      const modelAtom = ctx.model.module(moduleInfo.relativeName).atom;\n      const count = await modelAtom.count(params);\n      return count;\n    }\n  }\n\n  return Stats;\n};\n","module.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Stats {\n    async execute(context) {\n      const { user } = context;\n      // root stats\n      const statsRoot = {\n        red: 0,\n        orange: 0,\n      };\n      // userLabels\n      const userLabels = await ctx.bean.atom.getLabels({ user });\n      for (const labelId of Object.keys(userLabels)) {\n        const userLabel = userLabels[labelId];\n        // sub\n        const count = await ctx.bean.atom.count({\n          options: {\n            label: labelId,\n          },\n          user,\n        });\n        await ctx.bean.stats._set({\n          module: moduleInfo.relativeName,\n          name: 'labels',\n          fullName: `labels.${labelId}`,\n          value: count,\n          user,\n        });\n        // root\n        if (userLabel.color === 'red') {\n          statsRoot.red += count;\n        } else if (userLabel.color === 'orange') {\n          statsRoot.orange += count;\n        }\n      }\n      // ok\n      return statsRoot;\n    }\n  }\n\n  return Stats;\n};\n","module.exports = ctx => {\n  // const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Stats {\n    async execute(context) {\n      const { user } = context;\n      const count = await ctx.bean.atom.count({\n        options: {\n          star: 1,\n        },\n        user,\n      });\n      return count;\n    }\n  }\n\n  return Stats;\n};\n","module.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Stats {\n    async execute(context) {\n      const { user } = context;\n      // stats\n      let stats;\n      // labels\n      stats = await ctx.bean.stats._get({\n        module: moduleInfo.relativeName,\n        fullName: 'labels',\n        user,\n      });\n      if (!stats) {\n        stats = {\n          red: 0,\n          orange: 0,\n        };\n      }\n      // stars\n      const stars = await ctx.bean.stats._get({\n        module: moduleInfo.relativeName,\n        fullName: 'stars',\n        user,\n      });\n      stats.gray = stars || 0;\n      // ok\n      return stats;\n    }\n  }\n\n  return Stats;\n};\n","const VersionUpdate1Fn = require('./version/update1.js');\nconst VersionUpdate2Fn = require('./version/update2.js');\nconst VersionUpdate3Fn = require('./version/update3.js');\nconst VersionUpdate4Fn = require('./version/update4.js');\nconst VersionUpdate6Fn = require('./version/update6.js');\nconst VersionUpdate8Fn = require('./version/update8.js');\nconst VersionUpdate9Fn = require('./version/update9.js');\nconst VersionUpdate10Fn = require('./version/update10.js');\nconst VersionUpdate11Fn = require('./version/update11.js');\nconst VersionUpdate12Fn = require('./version/update12.js');\nconst VersionUpdate13Fn = require('./version/update13.js');\nconst VersionUpdate14Fn = require('./version/update14.js');\nconst VersionUpdate16Fn = require('./version/update16.js');\nconst VersionUpdate17Fn = require('./version/update17.js');\nconst VersionUpdate18Fn = require('./version/update18.js');\nconst VersionUpdate19Fn = require('./version/update19.js');\nconst VersionUpdate20Fn = require('./version/update20.js');\nconst VersionUpdate21Fn = require('./version/update21.js');\nconst VersionInit2Fn = require('./version/init2.js');\nconst VersionInit4Fn = require('./version/init4.js');\nconst VersionInit5Fn = require('./version/init5.js');\nconst VersionInit7Fn = require('./version/init7.js');\nconst VersionInit8Fn = require('./version/init8.js');\nconst VersionInit9Fn = require('./version/init9.js');\nconst VersionInit14Fn = require('./version/init14.js');\nconst VersionInit15Fn = require('./version/init15.js');\n\nmodule.exports = app => {\n  class Version extends app.meta.BeanBase {\n    async update(options) {\n      if (options.version === 21) {\n        const versionUpdate21 = new (VersionUpdate21Fn(this.ctx))();\n        await versionUpdate21.run();\n      }\n      if (options.version === 20) {\n        const versionUpdate20 = new (VersionUpdate20Fn(this.ctx))();\n        await versionUpdate20.run();\n      }\n      if (options.version === 19) {\n        const versionUpdate19 = new (VersionUpdate19Fn(this.ctx))();\n        await versionUpdate19.run();\n      }\n      if (options.version === 18) {\n        const versionUpdate18 = new (VersionUpdate18Fn(this.ctx))();\n        await versionUpdate18.run();\n      }\n      if (options.version === 17) {\n        const versionUpdate17 = new (VersionUpdate17Fn(this.ctx))();\n        await versionUpdate17.run();\n      }\n      if (options.version === 16) {\n        const versionUpdate16 = new (VersionUpdate16Fn(this.ctx))();\n        await versionUpdate16.run();\n      }\n      if (options.version === 14) {\n        const versionUpdate14 = new (VersionUpdate14Fn(this.ctx))();\n        await versionUpdate14.run();\n      }\n\n      if (options.version === 13) {\n        const versionUpdate13 = new (VersionUpdate13Fn(this.ctx))();\n        await versionUpdate13.run();\n      }\n\n      if (options.version === 12) {\n        const versionUpdate12 = new (VersionUpdate12Fn(this.ctx))();\n        await versionUpdate12.run();\n      }\n\n      if (options.version === 11) {\n        const versionUpdate11 = new (VersionUpdate11Fn(this.ctx))();\n        await versionUpdate11.run();\n      }\n\n      if (options.version === 10) {\n        const versionUpdate10 = new (VersionUpdate10Fn(this.ctx))();\n        await versionUpdate10.run();\n      }\n\n      if (options.version === 9) {\n        const versionUpdate9 = new (VersionUpdate9Fn(this.ctx))();\n        await versionUpdate9.run();\n      }\n\n      if (options.version === 8) {\n        const versionUpdate8 = new (VersionUpdate8Fn(this.ctx))();\n        await versionUpdate8.run();\n      }\n\n      if (options.version === 6) {\n        const versionUpdate6 = new (VersionUpdate6Fn(this.ctx))();\n        await versionUpdate6.run();\n      }\n\n      if (options.version === 4) {\n        const versionUpdate4 = new (VersionUpdate4Fn(this.ctx))();\n        await versionUpdate4.run();\n      }\n\n      if (options.version === 3) {\n        const versionUpdate3 = new (VersionUpdate3Fn(this.ctx))();\n        await versionUpdate3.run();\n      }\n\n      if (options.version === 2) {\n        const versionUpdate2 = new (VersionUpdate2Fn(this.ctx))();\n        await versionUpdate2.run();\n      }\n\n      if (options.version === 1) {\n        const versionUpdate1 = new (VersionUpdate1Fn(this.ctx))();\n        await versionUpdate1.run();\n      }\n    }\n\n    async init(options) {\n      if (options.version === 2) {\n        const versionInit2 = new (VersionInit2Fn(this.ctx))();\n        await versionInit2.run(options);\n      }\n      if (options.version === 4) {\n        const versionInit4 = new (VersionInit4Fn(this.ctx))();\n        await versionInit4.run(options);\n      }\n      if (options.version === 5) {\n        const versionInit5 = new (VersionInit5Fn(this.ctx))();\n        await versionInit5.run(options);\n      }\n      if (options.version === 7) {\n        const versionInit7 = new (VersionInit7Fn(this.ctx))();\n        await versionInit7.run(options);\n      }\n      if (options.version === 8) {\n        const versionInit8 = new (VersionInit8Fn(this.ctx))();\n        await versionInit8.run(options);\n      }\n      if (options.version === 9) {\n        const versionInit9 = new (VersionInit9Fn(this.ctx))();\n        await versionInit9.run(options);\n      }\n      if (options.version === 14) {\n        const versionInit14 = new (VersionInit14Fn(this.ctx))();\n        await versionInit14.run(options);\n      }\n      if (options.version === 15) {\n        const versionInit15 = new (VersionInit15Fn(this.ctx))();\n        await versionInit15.run(options);\n      }\n    }\n\n    async update8Atoms(options) {\n      const versionUpdate8 = new (VersionUpdate8Fn(this.ctx))();\n      await versionUpdate8._updateAtomsInstance(options);\n    }\n\n    async update12AtomClasses(options) {\n      const versionUpdate12 = new (VersionUpdate12Fn(this.ctx))();\n      await versionUpdate12._updateAtomClassesInstance(options);\n    }\n\n    async update14_adjustRoles(options) {\n      const versionUpdate14 = new (VersionUpdate14Fn(this.ctx))();\n      await versionUpdate14._adjustRolesInstance(options);\n    }\n\n    async update14_adjustUsers(options) {\n      const versionUpdate14 = new (VersionUpdate14Fn(this.ctx))();\n      await versionUpdate14._adjustUsersInstance(options);\n    }\n\n    async update19_adjustCategories({ resourceType }) {\n      const versionUpdate19 = new (VersionUpdate19Fn(this.ctx))();\n      await versionUpdate19._adjustCategoriesInstance({ resourceType });\n    }\n  }\n\n  return Version;\n};\n","module.exports = function (ctx) {\n  class VersionInit {\n    async run() {\n      await this._changeTemplateRole();\n      await this._addRoleRightsResource();\n      await this._addRoleRightsRole();\n      await this._addRoleRightsUser();\n    }\n\n    async _changeTemplateRole() {\n      const role = await ctx.bean.role.parseRoleName({ roleName: 'template' });\n      await ctx.bean.role.move({ roleId: role.id, roleIdParent: 0 });\n      await ctx.bean.role.setDirty(true);\n    }\n\n    async _addRoleRightsResource() {\n      // add role rights\n      const roleRights = [\n        { roleName: 'system', action: 'create' },\n        { roleName: 'system', action: 'read', scopeNames: 0 },\n        { roleName: 'system', action: 'read', scopeNames: 'authenticated' },\n        { roleName: 'system', action: 'write', scopeNames: 0 },\n        { roleName: 'system', action: 'write', scopeNames: 'authenticated' },\n        { roleName: 'system', action: 'delete', scopeNames: 0 },\n        { roleName: 'system', action: 'delete', scopeNames: 'authenticated' },\n        { roleName: 'system', action: 'clone', scopeNames: 0 },\n        { roleName: 'system', action: 'clone', scopeNames: 'authenticated' },\n        { roleName: 'system', action: 'enable', scopeNames: 0 },\n        { roleName: 'system', action: 'enable', scopeNames: 'authenticated' },\n        { roleName: 'system', action: 'disable', scopeNames: 0 },\n        { roleName: 'system', action: 'disable', scopeNames: 'authenticated' },\n        { roleName: 'system', action: 'authorize', scopeNames: 0 },\n        { roleName: 'system', action: 'authorize', scopeNames: 'authenticated' },\n        { roleName: 'system', action: 'deleteBulk' },\n        { roleName: 'system', action: 'exportBulk' },\n      ];\n      await ctx.bean.role.addRoleRightBatch({ atomClassName: 'resource', roleRights });\n    }\n\n    async _addRoleRightsRole() {\n      // add role rights\n      const roleRights = [\n        // { roleName: 'system', action: 'create' },\n        // { roleName: 'system', action: 'read', scopeNames: 0 },\n        // { roleName: 'system', action: 'write', scopeNames: 0 },\n        // { roleName: 'system', action: 'delete', scopeNames: 0 },\n        // { roleName: 'system', action: 'clone', scopeNames: 0 },\n        // { roleName: 'system', action: 'enable', scopeNames: 0 },\n        // { roleName: 'system', action: 'enable', scopeNames: 'root' },\n        // { roleName: 'system', action: 'disable', scopeNames: 0 },\n        // { roleName: 'system', action: 'disable', scopeNames: 'root' },\n        // { roleName: 'system', action: 'authorize', scopeNames: 0 },\n        // { roleName: 'system', action: 'authorize', scopeNames: 'root' },\n        // template\n        { roleName: 'system', action: 'read', scopeNames: 'template' },\n        { roleName: 'system', action: 'write', scopeNames: 'template' },\n        { roleName: 'system', action: 'delete', scopeNames: 'template' },\n        { roleName: 'system', action: 'clone', scopeNames: 'template' },\n        { roleName: 'system', action: 'move', scopeNames: 'template' },\n        { roleName: 'system', action: 'addChild', scopeNames: 'template' },\n        // { roleName: 'system', action: 'roleUsers', scopeNames: 'template' },\n        // { roleName: 'system', action: 'includes', scopeNames: 'template' },\n        { roleName: 'system', action: 'resourceAuthorizations', scopeNames: 'template' },\n        { roleName: 'system', action: 'atomAuthorizations', scopeNames: 'template' },\n        // root\n        { roleName: 'system', action: 'read', scopeNames: 'root' },\n        { roleName: 'system', action: 'write', scopeNames: 'root' },\n        { roleName: 'system', action: 'delete', scopeNames: 'root' },\n        { roleName: 'system', action: 'clone', scopeNames: 'root' },\n        { roleName: 'system', action: 'move', scopeNames: 'root' },\n        { roleName: 'system', action: 'addChild', scopeNames: 'root' },\n        { roleName: 'system', action: 'roleUsers', scopeNames: 'root' },\n        { roleName: 'system', action: 'includes', scopeNames: 'root' },\n        { roleName: 'system', action: 'resourceAuthorizations', scopeNames: 'root' },\n        { roleName: 'system', action: 'atomAuthorizations', scopeNames: 'root' },\n        { roleName: 'system', action: 'deleteBulk' },\n        { roleName: 'system', action: 'exportBulk' },\n        // { roleName: 'system', action: 'buildBulk' },\n      ];\n      await ctx.bean.role.addRoleRightBatch({ atomClassName: 'role', roleRights });\n    }\n\n    async _addRoleRightsUser() {\n      // add role rights\n      const roleRights = [\n        { roleName: 'system', action: 'read', scopeNames: 'root' },\n        { roleName: 'system', action: 'write', scopeNames: 'root' },\n        // { roleName: 'system', action: 'delete', scopeNames: 'root' },\n        // { roleName: 'system', action: 'clone', scopeNames: 'root' },\n        { roleName: 'system', action: 'enable', scopeNames: 'root' },\n        { roleName: 'system', action: 'disable', scopeNames: 'root' },\n        { roleName: 'system', action: 'userRoles', scopeNames: 'root' },\n        { roleName: 'system', action: 'resourceAuthorizations', scopeNames: 'root' },\n        { roleName: 'system', action: 'atomAuthorizations', scopeNames: 'root' },\n        // { roleName: 'system', action: 'deleteBulk' },\n        { roleName: 'system', action: 'exportBulk' },\n      ];\n      await ctx.bean.role.addRoleRightBatch({ atomClassName: 'user', roleRights });\n    }\n  }\n\n  return VersionInit;\n};\n","const initData = require('./initData15.js');\n\nmodule.exports = function (ctx) {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class VersionInit {\n    async run() {\n      // roles\n      await this._initRoles();\n      // change roleIdOwner\n      await this._changeRoleIdOwner();\n    }\n\n    // roles\n    async _initRoles() {\n      return await ctx.bean.role._initSystemRoles({\n        module: moduleInfo.relativeName,\n        rolesData: initData.roles,\n      });\n    }\n\n    async _changeRoleIdOwner() {\n      // change roleIdOwner from template.system to authenticated.builtIn for atomClass except role\n      const roleSystem = await ctx.bean.role.getSystemRole({ roleName: 'system' });\n      const roleBuiltIn = await ctx.bean.role.getSystemRole({ roleName: 'builtIn' });\n      const atomClassRole = await ctx.bean.atomClass.get({ module: moduleInfo.relativeName, atomClassName: 'role' });\n      await ctx.model.query(\n        `\n          update aAtom set roleIdOwner=? where iid=? and atomClassId<>? and roleIdOwner=?\n      `,\n        [roleBuiltIn.id, ctx.instance.id, atomClassRole.id, roleSystem.id]\n      );\n    }\n  }\n\n  return VersionInit;\n};\n","const initData = require('./initData2.js');\n\nmodule.exports = function (ctx) {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class VersionInit {\n    async run(options) {\n      // roles\n      const roleIds = await this._initRoles();\n      // role includes\n      await this._roleIncludes(roleIds);\n      // build\n      await ctx.bean.role.setDirty(true);\n      // users\n      await this._initUsers(roleIds, options);\n    }\n\n    // roles\n    async _initRoles() {\n      return await ctx.bean.role._initSystemRoles({\n        module: moduleInfo.relativeName,\n        rolesData: initData.roles,\n      });\n    }\n\n    // role includes\n    async _roleIncludes(roleIds) {\n      for (const item of initData.includes) {\n        await ctx.bean.role.addRoleInc({ roleId: roleIds[item.from], roleIdInc: roleIds[item.to] });\n      }\n    }\n\n    // users\n    async _initUsers(roleIds, options) {\n      // users\n      const users = [];\n      // user: root\n      const userRoot = ctx.bean.util.extend({}, initData.users.root);\n      userRoot.item.email = options.email;\n      userRoot.item.mobile = options.mobile;\n      users.push(userRoot);\n      // user: admin\n      const demo = ctx.config.module(moduleInfo.relativeName).configFront.demo;\n      if (demo.enable) {\n        const userAdmin = ctx.bean.util.extend({}, initData.users.admin);\n        users.push(userAdmin);\n      }\n      for (const user of users) {\n        const userId = await ctx.bean.user.add(user.item);\n        // activated\n        await ctx.bean.user.save({\n          user: { id: userId, activated: 1 },\n        });\n        // user->role\n        await ctx.bean.role.addUserRole({\n          userId,\n          roleId: roleIds[user.roleId],\n        });\n      }\n    }\n  }\n\n  return VersionInit;\n};\n","module.exports = function (ctx) {\n  class VersionInit {\n    async run(options) {}\n  }\n\n  return VersionInit;\n};\n","module.exports = function (ctx) {\n  class VersionInit {\n    async run(options) {\n      // add role:template to authenticated\n      // add role:system to template\n      const items = [\n        {\n          roleName: 'template',\n          leader: 0,\n          catalog: 1,\n          system: 1,\n          sorting: 0,\n          roleIdParent: 'authenticated',\n        },\n        {\n          roleName: 'system',\n          leader: 0,\n          catalog: 0,\n          system: 1,\n          sorting: 1,\n          roleIdParent: 'template',\n        },\n      ];\n      let needBuild = false;\n      for (const item of items) {\n        const role = await ctx.bean.role.getSystemRole({ roleName: item.roleName });\n        if (!role) {\n          needBuild = true;\n          const roleParent = await ctx.bean.role.getSystemRole({ roleName: item.roleIdParent });\n          const roleId = await ctx.bean.role.add({\n            roleName: item.roleName,\n            leader: item.leader,\n            catalog: item.catalog,\n            system: item.system,\n            sorting: item.sorting,\n            roleIdParent: roleParent.id,\n          });\n          if (item.roleName === 'system') {\n            // superuser include system\n            const roleSuperuser = await ctx.bean.role.getSystemRole({ roleName: 'superuser' });\n            await ctx.bean.role.addRoleInc({ roleId: roleSuperuser.id, roleIdInc: roleId });\n          }\n        }\n      }\n      // build\n      if (needBuild) {\n        await ctx.bean.role.setDirty(true);\n      }\n    }\n  }\n\n  return VersionInit;\n};\n","module.exports = function (ctx) {\n  class VersionInit {\n    async run(options) {}\n  }\n\n  return VersionInit;\n};\n","module.exports = function (ctx) {\n  class VersionInit {\n    async run() {}\n  }\n\n  return VersionInit;\n};\n","module.exports = function (ctx) {\n  class VersionInit {\n    async run() {\n      // do nothing, see also: init14.js\n      // // add role rights\n      // const roleRights = [\n      //   { roleName: 'system', action: 'create' },\n      //   { roleName: 'system', action: 'read', scopeNames: 0 },\n      //   { roleName: 'system', action: 'read', scopeNames: 'superuser' },\n      //   { roleName: 'system', action: 'write', scopeNames: 0 },\n      //   { roleName: 'system', action: 'write', scopeNames: 'superuser' },\n      //   { roleName: 'system', action: 'delete', scopeNames: 0 },\n      //   { roleName: 'system', action: 'delete', scopeNames: 'superuser' },\n      //   { roleName: 'system', action: 'clone', scopeNames: 0 },\n      //   { roleName: 'system', action: 'clone', scopeNames: 'superuser' },\n      //   { roleName: 'system', action: 'enable', scopeNames: 0 },\n      //   { roleName: 'system', action: 'enable', scopeNames: 'superuser' },\n      //   { roleName: 'system', action: 'disable', scopeNames: 0 },\n      //   { roleName: 'system', action: 'disable', scopeNames: 'superuser' },\n      //   { roleName: 'system', action: 'authorize', scopeNames: 0 },\n      //   { roleName: 'system', action: 'authorize', scopeNames: 'superuser' },\n      //   { roleName: 'system', action: 'deleteBulk' },\n      //   { roleName: 'system', action: 'exportBulk' },\n      // ];\n      // await ctx.bean.role.addRoleRightBatch({ atomClassName: 'resource', roleRights });\n    }\n  }\n\n  return VersionInit;\n};\n","// roles\nconst roles = {\n  builtIn: {\n    roleName: 'builtIn',\n    leader: 0,\n    system: 1,\n    sorting: 4, // force before organization\n    roleIdParent: 'authenticated',\n  },\n};\n\nmodule.exports = {\n  roles,\n};\n","// roles\nconst roles = {\n  root: {\n    roleName: 'root',\n    leader: 0,\n    system: 1,\n    sorting: 0,\n    roleIdParent: '__system__',\n  },\n  anonymous: {\n    roleName: 'anonymous',\n    leader: 0,\n    system: 1,\n    sorting: 1,\n    roleIdParent: 'root',\n  },\n  authenticated: {\n    roleName: 'authenticated',\n    leader: 0,\n    system: 1,\n    sorting: 2,\n    roleIdParent: 'root',\n  },\n  template: {\n    roleName: 'template',\n    leader: 0,\n    system: 1,\n    sorting: 1,\n    roleIdParent: 'authenticated',\n  },\n  system: {\n    roleName: 'system',\n    leader: 0,\n    system: 1,\n    sorting: 1,\n    roleIdParent: 'template',\n  },\n  registered: {\n    roleName: 'registered',\n    leader: 0,\n    system: 1,\n    sorting: 2,\n    roleIdParent: 'authenticated',\n  },\n  activated: {\n    roleName: 'activated',\n    leader: 0,\n    system: 1,\n    sorting: 3,\n    roleIdParent: 'authenticated',\n  },\n  superuser: {\n    roleName: 'superuser',\n    leader: 0,\n    system: 1,\n    sorting: 4,\n    roleIdParent: 'authenticated',\n  },\n  builtIn: {\n    roleName: 'builtIn',\n    leader: 0,\n    system: 1,\n    sorting: 5,\n    roleIdParent: 'authenticated',\n  },\n  organization: {\n    roleName: 'organization',\n    leader: 0,\n    system: 1,\n    sorting: 6,\n    roleIdParent: 'authenticated',\n  },\n  internal: {\n    roleName: 'internal',\n    leader: 0,\n    system: 1,\n    sorting: 1,\n    roleIdParent: 'organization',\n  },\n  external: {\n    roleName: 'external',\n    leader: 0,\n    system: 1,\n    sorting: 2,\n    roleIdParent: 'organization',\n  },\n};\n\nconst includes = [{ from: 'superuser', to: 'system' }];\n\nconst users = {\n  root: {\n    item: {\n      userName: 'root',\n      realName: 'root',\n      email: null,\n      mobile: null,\n      avatar: null,\n      motto: null,\n      locale: null,\n    },\n    roleId: 'superuser',\n  },\n  admin: {\n    item: {\n      userName: 'admin',\n      realName: 'admin',\n      email: null,\n      mobile: null,\n      avatar: null,\n      motto: null,\n      locale: null,\n    },\n    roleId: 'superuser',\n  },\n};\n\nmodule.exports = {\n  roles,\n  includes,\n  users,\n};\n","const update1Data = require('./update1Data.js');\n\nmodule.exports = function (ctx) {\n  class VersionUpdate1 {\n    async run() {\n      // tables\n      const tableNames = [\n        'aUser',\n        'aUserAgent',\n        'aAuthProvider',\n        'aAuth',\n        'aRole',\n        'aRoleInc',\n        'aUserRole',\n        'aRoleRight',\n        'aAtomClass',\n        'aAtom',\n        'aAtomAction',\n        'aLabel',\n        'aAtomLabel',\n        'aAtomLabelRef',\n        'aAtomStar',\n        'aRoleRef',\n        'aRoleIncRef',\n        'aRoleExpand',\n        'aRoleRightRef',\n        'aFunction',\n        'aFunctionStar',\n        'aFunctionLocale',\n        'aRoleFunction',\n      ];\n\n      for (const tableName of tableNames) {\n        await ctx.model.query(update1Data.tables[tableName]);\n      }\n\n      // views\n      const viewNames = [\n        'aViewUserRoleRef',\n        'aViewUserRoleExpand',\n        'aViewUserRightAtomClass',\n        'aViewUserRightAtomClassUser',\n        'aViewUserRightAtom',\n        'aViewUserRightFunction',\n      ];\n      for (const viewName of viewNames) {\n        await ctx.model.query(update1Data.views[viewName]);\n      }\n\n      // functions\n      const functionNames = [];\n      for (const functionName of functionNames) {\n        await ctx.model.query(update1Data.functions[functionName]);\n      }\n    }\n  }\n\n  return VersionUpdate1;\n};\n","module.exports = function (ctx) {\n  class VersionUpdate10 {\n    async run() {\n      // aAtom: atomIdArchive -> atomIdFormal\n      const sql = `\n        ALTER TABLE aAtom\n          CHANGE COLUMN atomIdArchive atomIdFormal int(11) DEFAULT '0'\n                  `;\n      await ctx.model.query(sql);\n    }\n  }\n\n  return VersionUpdate10;\n};\n","module.exports = function (ctx) {\n  class VersionUpdate11 {\n    async run() {\n      // aAtom: add atomSimple\n      const sql = `\n        ALTER TABLE aAtom\n          ADD COLUMN atomSimple int(11) DEFAULT '0'\n                  `;\n      await ctx.model.query(sql);\n    }\n  }\n\n  return VersionUpdate11;\n};\n","module.exports = function (ctx) {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class VersionUpdate12 {\n    async run(options) {\n      // aAtomClass: add atomClassInner\n      const sql = `\n        ALTER TABLE aAtomClass\n          ADD COLUMN atomClassInner int(11) DEFAULT '0'\n                  `;\n      await ctx.model.query(sql);\n\n      // update exists atomClasses\n      await this._updateAtomClasses(options);\n    }\n\n    async _updateAtomClasses(options) {\n      // all instances\n      const instances = await ctx.bean.instance.list({ where: {} });\n      for (const instance of instances) {\n        await ctx.meta.util.executeBean({\n          subdomain: instance.name,\n          beanModule: moduleInfo.relativeName,\n          beanFullName: `${moduleInfo.relativeName}.version.manager`,\n          context: options,\n          fn: 'update12AtomClasses',\n        });\n      }\n    }\n\n    async _updateAtomClassesInstance() {\n      // atomClasses\n      const atomClasses = await ctx.model.atomClass.select();\n      for (const atomClass of atomClasses) {\n        const _atomClass = ctx.bean.base.atomClass(atomClass);\n        if (_atomClass.inner) {\n          await ctx.model.atomClass.update({ id: atomClass.id, atomClassInner: 1 });\n        }\n      }\n    }\n  }\n\n  return VersionUpdate12;\n};\n","module.exports = function (ctx) {\n  class VersionUpdate13 {\n    async run() {\n      let sql;\n      // aRole\n      sql = `\n      ALTER TABLE aRole\n        Add COLUMN description varchar(255) DEFAULT NULL,\n        Add COLUMN atomId int(11) DEFAULT '0',\n        Add COLUMN roleTypeCode INT(11) DEFAULT '0',\n        Add COLUMN roleConfig JSON DEFAULT NULL\n                `;\n      await ctx.model.query(sql);\n      // aUser\n      sql = `\n      ALTER TABLE aUser\n        Add COLUMN atomId int(11) DEFAULT '0'\n                `;\n      await ctx.model.query(sql);\n      // aViewUserRightRefAtomClass\n      sql = `\n      create view aViewUserRightRefAtomClass as\n        select a.iid,a.userId as userIdWho,a.roleExpandId,a.roleId,a.roleIdBase,\n               b.id as roleRightRefId,b.roleRightId,b.atomClassId,b.action,b.roleIdScope as roleIdWhom \n          from aViewUserRoleExpand a\n            inner join aRoleRightRef b on a.roleIdBase=b.roleId\n        `;\n      await ctx.model.query(sql);\n      // aViewUserRightAtomClassUser\n      await ctx.model.query('drop view aViewUserRightAtomClassUser');\n      sql = `\n      create view aViewUserRightAtomClassUser as\n        select a.iid,a.userId as userIdWho,b.atomClassId,b.action,\n               c.userId as userIdWhom,c.roleId as roleIdWhom,\n               a.roleIdBase,c.roleIdParent,c.level as roleIdParentLevel\n          from aViewUserRoleExpand a\n            inner join aRoleRightRef b on a.roleIdBase=b.roleId\n            inner join aViewUserRoleRef c on b.roleIdScope=c.roleIdParent\n        `;\n      await ctx.model.query(sql);\n      // aViewRoleRightAtomClassUser\n      await ctx.model.query('drop view aViewRoleRightAtomClassUser');\n      sql = `\n      create view aViewRoleRightAtomClassUser as\n        select a.iid,a.roleId as roleIdWho,b.atomClassId,b.action,\n               c.userId as userIdWhom,c.roleId as roleIdWhom,\n               a.roleIdBase,c.roleIdParent,c.level as roleIdParentLevel\n          from aRoleExpand a\n            inner join aRoleRightRef b on a.roleIdBase=b.roleId\n            inner join aViewUserRoleRef c on b.roleIdScope=c.roleIdParent\n        `;\n      await ctx.model.query(sql);\n      // aViewRoleRightAtomClassRole\n      sql = `\n      create view aViewRoleRightAtomClassRole as\n        select a.iid,a.roleId as roleIdWho,b.atomClassId,b.action,\n               c.roleId as roleIdWhom,\n               a.roleIdBase,c.roleIdParent,c.level as roleIdParentLevel\n          from aRoleExpand a\n            inner join aRoleRightRef b on a.roleIdBase=b.roleId\n            inner join aRoleRef c on b.roleIdScope=c.roleIdParent\n        `;\n      await ctx.model.query(sql);\n      // aViewRoleRightResource\n      sql = `\n        create view aViewRoleRightResource as\n          select a.iid,a.roleId as roleIdWho,a.roleIdBase,b.id as resourceRoleId,b.atomId from aRoleExpand a\n            inner join aResourceRole b on a.roleIdBase=b.roleId\n          `;\n      await ctx.model.query(sql);\n      // view: aRoleView\n      sql = `\n          CREATE VIEW aRoleView as\n            select a.*,b.roleName as roleNameParent from aRole a\n              left join aRole b on a.roleIdParent=b.id\n        `;\n      await ctx.model.query(sql);\n      // view: aRoleIncludesView\n      sql = `\n          CREATE VIEW aRoleIncludesView as\n            select a.*,b.id as roleIncId,b.roleId as roleIdWho,b.roleIdInc from aRole a\n              inner join aRoleInc b on a.id=b.roleIdInc\n        `;\n      await ctx.model.query(sql);\n      // view: aRoleUsersView\n      sql = `\n          CREATE VIEW aRoleUserRolesView as\n            select a.*,b.id as userRoleId,b.userId as userIdWho from aRole a\n              inner join aUserRole b on a.id=b.roleId\n        `;\n      await ctx.model.query(sql);\n    }\n  }\n\n  return VersionUpdate13;\n};\n","module.exports = function (ctx) {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  const __atomClassRole = {\n    module: moduleInfo.relativeName,\n    atomClassName: 'role',\n  };\n  const __atomClassUser = {\n    module: moduleInfo.relativeName,\n    atomClassName: 'user',\n  };\n  class VersionUpdate14 {\n    get modelRole() {\n      return ctx.model.module(moduleInfo.relativeName).role;\n    }\n    get modelUser() {\n      return ctx.model.module(moduleInfo.relativeName).user;\n    }\n\n    async run(options) {\n      // adjustRoles\n      await this._adjustRoles(options);\n      // adjustUsers\n      await this._adjustUsers(options);\n    }\n\n    async _adjustRoles(options) {\n      // all instances\n      const instances = await ctx.bean.instance.list({ where: {} });\n      for (const instance of instances) {\n        await ctx.meta.util.executeBean({\n          subdomain: instance.name,\n          beanModule: moduleInfo.relativeName,\n          beanFullName: `${moduleInfo.relativeName}.version.manager`,\n          context: options,\n          fn: 'update14_adjustRoles',\n        });\n      }\n    }\n\n    async _adjustUsers(options) {\n      // all instances\n      const instances = await ctx.bean.instance.list({ where: {} });\n      for (const instance of instances) {\n        await ctx.meta.util.executeBean({\n          subdomain: instance.name,\n          beanModule: moduleInfo.relativeName,\n          beanFullName: `${moduleInfo.relativeName}.version.manager`,\n          context: options,\n          fn: 'update14_adjustUsers',\n        });\n      }\n    }\n\n    async _adjustRolesInstance() {\n      // select all roles where atomId=0\n      const roles = await this.modelRole.select({ where: { atomId: 0 } });\n      for (const role of roles) {\n        const roleId = role.id;\n        const roleName = role.roleName;\n        // add atom\n        const atomKey = await ctx.bean.atom.create({\n          atomClass: __atomClassRole,\n          item: {\n            itemId: roleId,\n            atomStaticKey: `${moduleInfo.relativeName}:role_${roleName}`,\n            catalog: role.catalog,\n            system: role.system,\n            roleIdParent: role.roleIdParent,\n          },\n          user: { id: 0 },\n        });\n        await ctx.bean.atom.write({\n          key: atomKey,\n          item: {\n            atomName: roleName,\n          },\n          user: { id: 0 },\n        });\n        // submit\n        await ctx.bean.atom.submit({\n          key: atomKey,\n          options: { ignoreFlow: true },\n          user: { id: 0 },\n        });\n      }\n    }\n\n    async _adjustUsersInstance() {\n      // select all roles where atomId=0\n      const items = await this.modelUser.select({ where: { atomId: 0 } });\n      for (const item of items) {\n        const userId = item.id;\n        let userName = item.userName;\n        if (!userName && item.anonymous) {\n          userName = 'anonymous';\n        }\n        // maybe also empty\n        if (!userName) {\n          userName = '__Unknown User__';\n        }\n        // add atom\n        const atomKey = await ctx.bean.atom.create({\n          atomClass: __atomClassUser,\n          item: {\n            itemId: userId,\n            disabled: item.disabled,\n            anonymous: item.anonymous,\n          },\n          user: { id: 0 },\n        });\n        await ctx.bean.atom.write({\n          key: atomKey,\n          item: {\n            atomName: userName,\n          },\n          user: { id: 0 },\n        });\n        // submit\n        await ctx.bean.atom.submit({\n          key: atomKey,\n          options: { ignoreFlow: true },\n          user: { id: 0 },\n        });\n      }\n    }\n  }\n\n  return VersionUpdate14;\n};\n","module.exports = function (ctx) {\n  class VersionUpdate16 {\n    async run() {\n      // aResource: add resourceIcon/appKey\n      let sql = `\n        ALTER TABLE aResource\n          Add COLUMN resourceIcon varchar(255) DEFAULT NULL,\n          Add COLUMN appKey varchar(50) DEFAULT NULL\n      `;\n      await ctx.model.query(sql);\n      // create view: aResourceView\n      sql = `\n      CREATE VIEW aResourceView as\n        select a.*,b.id as appAtomId,b.atomName as appName from aResource a\n          left join aAtom b on a.iid=b.iid and b.deleted=0 and a.appKey=b.atomStaticKey and b.atomStage=1\n    `;\n      await ctx.model.query(sql);\n    }\n  }\n\n  return VersionUpdate16;\n};\n","module.exports = function (ctx) {\n  class VersionUpdate17 {\n    async run() {\n      // aStatus\n      const sql = `\n        delete from aStatus where name like 'user-layoutConfig:%'\n      `;\n      await ctx.model.query(sql);\n    }\n  }\n\n  return VersionUpdate17;\n};\n","module.exports = function (ctx) {\n  class VersionUpdate13 {\n    async run() {\n      // aUser\n      const sql = `\n      ALTER TABLE aUser\n        Add COLUMN allowChangeUserName int(11) DEFAULT '1',\n        Add COLUMN lastTimeChangeUserName timestamp DEFAULT NULL\n                `;\n      await ctx.model.query(sql);\n    }\n  }\n\n  return VersionUpdate13;\n};\n","module.exports = function (ctx) {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  const __atomClassResource = {\n    module: 'a-base',\n    atomClassName: 'resource',\n  };\n  class VersionUpdate19 {\n    get modelAtom() {\n      return ctx.model.module(moduleInfo.relativeName).atom;\n    }\n\n    async run() {\n      // adjustCategories\n      await this._adjustCategories({ resourceType: 'a-base:menu' });\n      await this._adjustCategories({ resourceType: 'a-base:mine' });\n    }\n\n    async _adjustCategories({ resourceType }) {\n      // all instances\n      const instances = await ctx.bean.instance.list({ where: {} });\n      for (const instance of instances) {\n        await ctx.meta.util.executeBean({\n          subdomain: instance.name,\n          beanModule: moduleInfo.relativeName,\n          beanFullName: `${moduleInfo.relativeName}.version.manager`,\n          context: {\n            resourceType,\n          },\n          fn: 'update19_adjustCategories',\n        });\n      }\n    }\n\n    async _adjustCategoriesInstance({ resourceType }) {\n      // select all resources\n      const list = await ctx.bean.resource.select({\n        options: {\n          where: {\n            resourceType,\n          },\n          orders: [['a.id', 'asc']],\n          page: { index: 0, size: 0 },\n          locale: false,\n        },\n      });\n      // patch\n      for (const item of list) {\n        const appKey = item.appKey || 'a-appbooster:appUnclassified';\n        const categoryNames = [resourceType, appKey, item.atomCategoryName].join('.');\n        const category = await ctx.bean.category.parseCategoryName({\n          atomClass: __atomClassResource,\n          language: item.atomLanguage,\n          categoryName: categoryNames,\n          force: true,\n        });\n        if (category.id !== item.atomCategoryId) {\n          // formal\n          await this.modelAtom.update({\n            id: item.atomId,\n            atomCategoryId: category.id,\n          });\n          // draft/history\n          await this.modelAtom.update(\n            {\n              atomCategoryId: category.id,\n            },\n            {\n              where: {\n                atomIdFormal: item.atomId,\n              },\n            }\n          );\n        }\n      }\n      // delete all old categories\n      const categoryTop = await ctx.bean.category.child({\n        atomClass: __atomClassResource,\n        categoryId: 0,\n        categoryName: resourceType,\n      });\n      const children = await ctx.bean.category.children({\n        atomClass: __atomClassResource,\n        categoryId: categoryTop.id,\n        setLocale: false,\n      });\n      for (const child of children) {\n        if (child.categoryName.indexOf(':') === -1) {\n          await this._deleteCategory(child);\n        }\n      }\n    }\n\n    async _deleteCategory(category) {\n      try {\n        await ctx.bean.category.delete({ categoryId: category.id });\n      } catch (err) {\n        // donot throw error\n        ctx.logger.info(`categoryId: ${category.id}, categoryName: ${category.categoryName}`);\n      }\n    }\n  }\n\n  return VersionUpdate19;\n};\n","const tables = {\n  aUser: `\n          CREATE TABLE aUser (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            disabled int(11) DEFAULT '0',\n            userName varchar(50) DEFAULT NULL,\n            realName varchar(50) DEFAULT NULL,\n            email varchar(50) DEFAULT NULL,\n            mobile varchar(50) DEFAULT NULL,\n            avatar varchar(255) DEFAULT NULL,\n            motto varchar(255) DEFAULT NULL,\n            locale varchar(255) DEFAULT NULL,\n            anonymous int(11) DEFAULT '0',\n            PRIMARY KEY (id)\n          )\n        `,\n  aUserAgent: `\n          CREATE TABLE aUserAgent (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            userId int(11) DEFAULT '0',\n            userIdAgent int(11) DEFAULT '0',\n            PRIMARY KEY (id)\n          )\n        `,\n  aAuthProvider: `\n          CREATE TABLE aAuthProvider (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            disabled int(11) DEFAULT '0',\n            module varchar(255) DEFAULT NULL,\n            providerName varchar(50) DEFAULT NULL,\n            config json DEFAULT NULL,\n            PRIMARY KEY (id)\n          )\n        `,\n  aAuth: `\n          CREATE TABLE aAuth (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            userId int(11) DEFAULT '0',\n            providerId int(11) DEFAULT '0',\n            profileId varchar(255) DEFAULT NULL,\n            profile json DEFAULT NULL,\n            PRIMARY KEY (id)\n          )\n        `,\n  aRole: `\n          CREATE TABLE aRole (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            roleName varchar(50) DEFAULT NULL,\n            leader int(11) DEFAULT '0',\n            catalog int(11) DEFAULT '0',\n            \\`system\\` int(11) DEFAULT '0',\n            sorting int(11) DEFAULT '0',\n            roleIdParent int(11) DEFAULT '0',\n            PRIMARY KEY (id)\n          )\n        `,\n  aRoleRef: `\n          CREATE TABLE aRoleRef (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            roleId int(11) DEFAULT '0',\n            roleIdParent int(11) DEFAULT '0',\n            level int(11) DEFAULT '0',\n            PRIMARY KEY (id)\n          )\n        `,\n  aRoleInc: `\n          CREATE TABLE aRoleInc (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            roleId int(11) DEFAULT '0',\n            roleIdInc int(11) DEFAULT '0',\n            PRIMARY KEY (id)\n          )\n        `,\n  aRoleIncRef: `\n          CREATE TABLE aRoleIncRef (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            roleId int(11) DEFAULT '0',\n            roleIdInc int(11) DEFAULT '0',\n            roleIdSrc int(11) DEFAULT '0',\n            PRIMARY KEY (id)\n          )\n        `,\n  aRoleExpand: `\n          CREATE TABLE aRoleExpand (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            roleId int(11) DEFAULT '0',\n            roleIdBase int(11) DEFAULT '0',\n            PRIMARY KEY (id)\n          )\n        `,\n  aUserRole: `\n          CREATE TABLE aUserRole (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            userId int(11) DEFAULT '0',\n            roleId int(11) DEFAULT '0',\n            PRIMARY KEY (id)\n          )\n        `,\n  aAtomClass: `\n          CREATE TABLE aAtomClass (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            module varchar(255) DEFAULT NULL,\n            atomClassName varchar(255) DEFAULT NULL,\n            atomClassIdParent int(11) DEFAULT '0',\n            PRIMARY KEY (id)\n          )\n        `,\n  aAtom: `\n          CREATE TABLE aAtom (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            itemId int(11) DEFAULT '0',\n            atomEnabled int(11) DEFAULT '0',\n            atomFlow int(11) DEFAULT '0',\n            atomClassId int(11) DEFAULT '0',\n            atomName varchar(255) DEFAULT NULL,\n            userIdCreated int(11) DEFAULT '0',\n            userIdUpdated int(11) DEFAULT '0',\n            PRIMARY KEY (id)\n          )\n        `,\n  aAtomAction: `\n          CREATE TABLE aAtomAction (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            atomClassId int(11) DEFAULT '0',\n            code int(11) DEFAULT '0',\n            name varchar(50) DEFAULT NULL,\n            PRIMARY KEY (id)\n          )\n        `,\n  aLabel: `\n          CREATE TABLE aLabel (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            userId int(11) DEFAULT '0',\n            labels JSON DEFAULT NULL,\n            PRIMARY KEY (id)\n          )\n        `,\n  aAtomLabel: `\n          CREATE TABLE aAtomLabel (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            userId int(11) DEFAULT '0',\n            atomId int(11) DEFAULT '0',\n            labels JSON DEFAULT NULL,\n            PRIMARY KEY (id)\n          )\n        `,\n  aAtomLabelRef: `\n          CREATE TABLE aAtomLabelRef (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            userId int(11) DEFAULT '0',\n            atomId int(11) DEFAULT '0',\n            labelId int(11) DEFAULT '0',\n            PRIMARY KEY (id)\n          )\n        `,\n  aAtomStar: `\n          CREATE TABLE aAtomStar (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            userId int(11) DEFAULT '0',\n            atomId int(11) DEFAULT '0',\n            star int(11) DEFAULT '1',\n            PRIMARY KEY (id)\n          )\n        `,\n  aRoleRight: `\n          CREATE TABLE aRoleRight (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            roleId int(11) DEFAULT '0',\n            atomClassId int(11) DEFAULT '0',\n            action int(11) DEFAULT '0',\n            scope JSON DEFAULT NULL,\n            PRIMARY KEY (id)\n          )\n        `,\n  aRoleRightRef: `\n          CREATE TABLE aRoleRightRef (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            roleRightId int(11) DEFAULT '0',\n            roleId int(11) DEFAULT '0',\n            atomClassId int(11) DEFAULT '0',\n            action int(11) DEFAULT '0',\n            roleIdScope int(11) DEFAULT '0',\n            PRIMARY KEY (id)\n          )\n        `,\n  aFunction: `\n          CREATE TABLE aFunction (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            module varchar(255) DEFAULT NULL,\n            name varchar(255) DEFAULT NULL,\n            title varchar(255) DEFAULT NULL,\n            scene int(11) DEFAULT '0',\n            autoRight int(11) DEFAULT '0',\n            atomClassId int(11) DEFAULT '0',\n            action int(11) DEFAULT '0',\n            sorting int(11) DEFAULT '0',\n            menu int(11) DEFAULT '0',\n            public int(11) DEFAULT '0',\n            PRIMARY KEY (id)\n          )\n        `,\n  aFunctionStar: `\n          CREATE TABLE aFunctionStar (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            userId int(11) DEFAULT '0',\n            functionId int(11) DEFAULT '0',\n            star int(11) DEFAULT '1',\n            PRIMARY KEY (id)\n          )\n        `,\n  aFunctionLocale: `\n          CREATE TABLE aFunctionLocale (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            functionId int(11) DEFAULT '0',\n            locale varchar(50) DEFAULT NULL,\n            titleLocale varchar(255) DEFAULT NULL,\n            PRIMARY KEY (id)\n          )\n        `,\n  aRoleFunction: `\n          CREATE TABLE aRoleFunction (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            roleId int(11) DEFAULT '0',\n            functionId int(11) DEFAULT '0',\n            roleRightId int(11) DEFAULT '0',\n            PRIMARY KEY (id)\n          )\n        `,\n};\n\nconst views = {\n  aViewUserRoleRef: `\ncreate view aViewUserRoleRef as\n  select a.iid,a.userId,a.roleId,b.roleIdParent,b.level from aUserRole a\n    inner join aRoleRef b on a.roleId=b.roleId\n  `,\n  aViewUserRoleExpand: `\ncreate view aViewUserRoleExpand as\n  select a.iid,a.userId,a.roleId,b.roleIdBase,b.id as roleExpandId from aUserRole a\n    left join aRoleExpand b on a.roleId=b.roleId\n  `,\n  aViewUserRightAtomClass: `\ncreate view aViewUserRightAtomClass as\n  select a.iid,a.userId as userIdWho,a.roleExpandId,a.roleId,a.roleIdBase,b.id as roleRightId,b.atomClassId,b.action,b.scope from aViewUserRoleExpand a\n    inner join aRoleRight b on a.roleIdBase=b.roleId\n  `,\n  aViewUserRightAtomClassUser: `\ncreate view aViewUserRightAtomClassUser as\n  select a.iid,a.userId as userIdWho,b.atomClassId,b.action,c.userId as userIdWhom from aViewUserRoleExpand a\n    inner join aRoleRightRef b on a.roleIdBase=b.roleId\n    inner join aViewUserRoleRef c on b.roleIdScope=c.roleIdParent\n  `,\n  aViewUserRightAtom: `\ncreate view aViewUserRightAtom as\n  select a.iid, a.id as atomId,a.userIdCreated as userIdWhom,b.userIdWho,b.action from aAtom a,aViewUserRightAtomClassUser b\n    where a.deleted=0 and a.atomEnabled=1\n      and a.atomClassId=b.atomClassId\n      and a.userIdCreated=b.userIdWhom\n  `,\n  aViewUserRightFunction: `\ncreate view aViewUserRightFunction as\n  select a.iid,a.userId as userIdWho,a.roleExpandId,a.roleId,a.roleIdBase,b.id as roleFunctionId,b.functionId from aViewUserRoleExpand a\n    inner join aRoleFunction b on a.roleIdBase=b.roleId\n  `,\n};\n\nconst functions = {};\n\nmodule.exports = {\n  tables,\n  views,\n  functions,\n};\n","module.exports = function (ctx) {\n  class VersionUpdate2 {\n    async run() {\n      // enable 0\n      await ctx.model.query(\"SET SESSION sql_mode='NO_AUTO_VALUE_ON_ZERO'\");\n      // add userId 0\n      await ctx.db.insert('aUser', {\n        id: 0,\n        iid: 0,\n        userName: 'system',\n        realName: 'system',\n      });\n      // add roleId 0\n      await ctx.db.insert('aRole', {\n        id: 0,\n        iid: 0,\n        roleName: 'system',\n        catalog: 1,\n        system: 1,\n        roleIdParent: -1,\n      });\n      // disable 0\n      await ctx.model.query(\"SET SESSION sql_mode=''\");\n    }\n  }\n\n  return VersionUpdate2;\n};\n","module.exports = function (ctx) {\n  // const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class VersionUpdate20 {\n    async run() {\n      await this._alterTables();\n      await this._alterViews_aRoleRight_level1();\n      await this._alterViews_aRoleRightRef_level1();\n      await this._alterViews_aRoleRightRef_level2();\n    }\n\n    async _alterTables() {\n      // aAtom: add atomAreaKey atomAreaValue\n      let sql = `\n        ALTER TABLE aAtom\n          ADD COLUMN atomAreaKey varchar(255) DEFAULT NULL,\n          ADD COLUMN atomAreaValue varchar(255) DEFAULT NULL\n      `;\n      await ctx.model.query(sql);\n\n      // aRoleRight: add areaKey areaScope\n      sql = `\n        ALTER TABLE aRoleRight\n          ADD COLUMN areaKey varchar(255) DEFAULT NULL,\n          ADD COLUMN areaScope varchar(255) DEFAULT NULL\n      `;\n      await ctx.model.query(sql);\n\n      // aRoleRightRef: add areaKey areaScope\n      sql = `\n        ALTER TABLE aRoleRightRef\n          ADD COLUMN areaKey varchar(255) DEFAULT NULL,\n          ADD COLUMN areaScope varchar(255) DEFAULT NULL\n      `;\n      await ctx.model.query(sql);\n    }\n\n    async _alterViews_aRoleRight_level1() {\n      // level1: aViewRoleRightAtomClass(8) aViewUserRightAtomClass(1)\n\n      // aViewRoleRightAtomClass\n      await ctx.model.query('drop view aViewRoleRightAtomClass');\n      let sql = `\n        create view aViewRoleRightAtomClass as\n          select a.iid,a.roleId as roleIdWho,a.roleIdBase,\n                 b.id as roleRightId,b.atomClassId,b.action,b.scope,b.areaKey,b.areaScope \n            from aRoleExpand a\n              inner join aRoleRight b on a.roleIdBase=b.roleId\n      `;\n      await ctx.model.query(sql);\n\n      // aViewUserRightAtomClass\n      await ctx.model.query('drop view aViewUserRightAtomClass');\n      sql = `\n        create view aViewUserRightAtomClass as\n          select a.iid,a.userId as userIdWho,a.roleExpandId,a.roleId,a.roleIdBase,\n                 b.id as roleRightId,b.atomClassId,b.action,b.scope,b.areaKey,b.areaScope\n            from aViewUserRoleExpand a\n              inner join aRoleRight b on a.roleIdBase=b.roleId\n      `;\n      await ctx.model.query(sql);\n    }\n\n    async _alterViews_aRoleRightRef_level1() {\n      // level1:\n      //   aViewUserRightRefAtomClass(13)\n      //   aViewUserRightAtomClassUser(13)\n      //   aViewRoleRightAtomClassUser(13)\n      //   aViewRoleRightAtomClassRole(13)\n      //   aViewUserRightAtomClassRole(8)\n\n      // aViewUserRightRefAtomClass\n      await ctx.model.query('drop view aViewUserRightRefAtomClass');\n      let sql = `\n        create view aViewUserRightRefAtomClass as\n          select a.iid,a.userId as userIdWho,a.roleExpandId,a.roleId,a.roleIdBase,\n                b.id as roleRightRefId,b.roleRightId,b.atomClassId,b.action,b.roleIdScope as roleIdWhom,b.areaKey,b.areaScope\n            from aViewUserRoleExpand a\n              inner join aRoleRightRef b on a.roleIdBase=b.roleId\n        `;\n      await ctx.model.query(sql);\n\n      // aViewUserRightAtomClassUser\n      await ctx.model.query('drop view aViewUserRightAtomClassUser');\n      sql = `\n        create view aViewUserRightAtomClassUser as\n          select a.iid,a.userId as userIdWho,b.atomClassId,b.action,b.areaKey,b.areaScope,\n                c.userId as userIdWhom,c.roleId as roleIdWhom,\n                a.roleIdBase,c.roleIdParent,c.level as roleIdParentLevel\n            from aViewUserRoleExpand a\n              inner join aRoleRightRef b on a.roleIdBase=b.roleId\n              inner join aViewUserRoleRef c on b.roleIdScope=c.roleIdParent\n      `;\n      await ctx.model.query(sql);\n\n      // aViewRoleRightAtomClassUser\n      await ctx.model.query('drop view aViewRoleRightAtomClassUser');\n      sql = `\n      create view aViewRoleRightAtomClassUser as\n        select a.iid,a.roleId as roleIdWho,b.atomClassId,b.action,b.areaKey,b.areaScope,\n               c.userId as userIdWhom,c.roleId as roleIdWhom,\n               a.roleIdBase,c.roleIdParent,c.level as roleIdParentLevel\n          from aRoleExpand a\n            inner join aRoleRightRef b on a.roleIdBase=b.roleId\n            inner join aViewUserRoleRef c on b.roleIdScope=c.roleIdParent\n        `;\n      await ctx.model.query(sql);\n\n      // aViewRoleRightAtomClassRole\n      await ctx.model.query('drop view aViewRoleRightAtomClassRole');\n      sql = `\n        create view aViewRoleRightAtomClassRole as\n          select a.iid,a.roleId as roleIdWho,b.atomClassId,b.action,b.areaKey,b.areaScope,\n                c.roleId as roleIdWhom,\n                a.roleIdBase,c.roleIdParent,c.level as roleIdParentLevel\n            from aRoleExpand a\n              inner join aRoleRightRef b on a.roleIdBase=b.roleId\n              inner join aRoleRef c on b.roleIdScope=c.roleIdParent\n      `;\n      await ctx.model.query(sql);\n\n      // aViewUserRightAtomClassRole\n      await ctx.model.query('drop view aViewUserRightAtomClassRole');\n      sql = `\n        create view aViewUserRightAtomClassRole as\n          select a.iid,a.userId as userIdWho,\n                 b.atomClassId,b.action,b.areaKey,b.areaScope,\n                 c.roleId as roleIdWhom\n            from aViewUserRoleExpand a\n              inner join aRoleRightRef b on a.roleIdBase=b.roleId\n              inner join aRoleRef c on b.roleIdScope=c.roleIdParent\n          `;\n      await ctx.model.query(sql);\n    }\n\n    async _alterViews_aRoleRightRef_level2() {\n      // level2:\n      //   aViewUserRightAtom(9)\n      //   aViewRoleRightAtom(9)\n      //   aViewUserRightAtomRole(9)\n\n      // aViewUserRightAtom\n      await ctx.model.query('drop view aViewUserRightAtom');\n      let sql = `\n          create view aViewUserRightAtom as\n            select a.iid, a.id as atomId,a.userIdCreated as userIdWhom,\n                   b.userIdWho,b.action,b.areaKey,b.areaScope \n              from aAtom a,aViewUserRightAtomClassUser b\n                where a.deleted=0 and a.atomStage>0\n                  and a.atomClassId=b.atomClassId\n                  and a.userIdCreated=b.userIdWhom\n      `;\n      await ctx.model.query(sql);\n\n      // aViewRoleRightAtom\n      await ctx.model.query('drop view aViewRoleRightAtom');\n      sql = `\n          create view aViewRoleRightAtom as\n            select a.iid, a.id as atomId,a.userIdCreated as userIdWhom,\n                   b.roleIdWho,b.action,b.areaKey,b.areaScope\n              from aAtom a,aViewRoleRightAtomClassUser b\n                where a.deleted=0 and a.atomStage>0\n                  and a.atomClassId=b.atomClassId\n                  and a.userIdCreated=b.userIdWhom\n      `;\n      await ctx.model.query(sql);\n\n      // aViewUserRightAtomRole\n      await ctx.model.query('drop view aViewUserRightAtomRole');\n      sql = `\n          create view aViewUserRightAtomRole as\n            select a.iid, a.id as atomId,a.roleIdOwner as roleIdWhom,\n                   b.userIdWho,b.action,b.areaKey,b.areaScope\n              from aAtom a,aViewUserRightAtomClassRole b\n                where a.deleted=0 and a.atomStage>0\n                  and a.atomClassId=b.atomClassId\n                  and a.roleIdOwner=b.roleIdWhom\n        `;\n      await ctx.model.query(sql);\n    }\n  }\n\n  return VersionUpdate20;\n};\n","module.exports = function (ctx) {\n  // const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class VersionUpdate21 {\n    async run() {\n      await this._alterTables();\n    }\n\n    async _alterTables() {\n      // aAtom: add atomState, default value is null\n      let sql = `\n        ALTER TABLE aAtom\n          ADD COLUMN atomState varchar(255) DEFAULT NULL\n      `;\n      await ctx.model.query(sql);\n      // aAtomAction: for workflow\n      //   actionMode: 0/default 1/workflow\n      sql = `\n        ALTER TABLE aAtomAction\n          ADD COLUMN actionMode int(11) DEFAULT '0',\n          ADD COLUMN flowKey varchar(50) DEFAULT NULL,\n          ADD COLUMN nodeDefId varchar(50) DEFAULT NULL\n      `;\n      await ctx.model.query(sql);\n    }\n  }\n\n  return VersionUpdate21;\n};\n","module.exports = function (ctx) {\n  class VersionUpdate3 {\n    async run() {\n      // aViewRoleRightAtomClassUser\n      let sql = `\n        create view aViewRoleRightAtomClassUser as\n          select a.iid,a.roleId as roleIdWho,b.atomClassId,b.action,c.userId as userIdWhom from aRoleExpand a\n            inner join aRoleRightRef b on a.roleIdBase=b.roleId\n            inner join aViewUserRoleRef c on b.roleIdScope=c.roleIdParent\n          `;\n      await ctx.model.query(sql);\n\n      // aViewRoleRightAtom\n      sql = `\n        create view aViewRoleRightAtom as\n          select a.iid, a.id as atomId,a.userIdCreated as userIdWhom,b.roleIdWho,b.action from aAtom a,aViewRoleRightAtomClassUser b\n            where a.deleted=0 and a.atomEnabled=1\n              and a.atomClassId=b.atomClassId\n              and a.userIdCreated=b.userIdWhom\n          `;\n      await ctx.model.query(sql);\n    }\n  }\n\n  return VersionUpdate3;\n};\n","module.exports = function (ctx) {\n  class VersionUpdate4 {\n    async run() {\n      // aComment\n      let sql = `\n          CREATE TABLE aComment (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            atomId int(11) DEFAULT '0',\n            userId int(11) DEFAULT '0',\n            sorting int(11) DEFAULT '0',\n            heartCount int(11) DEFAULT '0',\n            replyId int(11) DEFAULT '0',\n            replyUserId int(11) DEFAULT '0',\n            replyContent text DEFAULT NULL,\n            content text DEFAULT NULL,\n            summary text DEFAULT NULL,\n            html text DEFAULT NULL,\n            PRIMARY KEY (id)\n          )\n        `;\n      await ctx.model.query(sql);\n\n      // aViewComment\n      sql = `\n          create view aViewComment as\n            select a.*,b.userName,b.avatar,c.userName as replyUserName from aComment a\n              left join aUser b on a.userId=b.id\n              left join aUser c on a.replyUserId=c.id\n        `;\n      await ctx.model.query(sql);\n\n      // aCommentHeart\n      sql = `\n          CREATE TABLE aCommentHeart (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            userId int(11) DEFAULT '0',\n            atomId int(11) DEFAULT '0',\n            commentId int(11) DEFAULT '0',\n            heart int(11) DEFAULT '1',\n            PRIMARY KEY (id)\n          )\n        `;\n      await ctx.model.query(sql);\n\n      // aAtom\n      sql = `\n        ALTER TABLE aAtom\n          MODIFY COLUMN updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n          ADD COLUMN allowComment int(11) DEFAULT '1',\n          ADD COLUMN starCount int(11) DEFAULT '0',\n          ADD COLUMN commentCount int(11) DEFAULT '0',\n          ADD COLUMN attachmentCount int(11) DEFAULT '0',\n          ADD COLUMN readCount int(11) DEFAULT '0'\n                  `;\n      await ctx.model.query(sql);\n    }\n  }\n\n  return VersionUpdate4;\n};\n","module.exports = function (ctx) {\n  class VersionUpdate6 {\n    async run() {\n      // aUser\n      const sql = `\n        ALTER TABLE aUser\n          ADD COLUMN activated int(11) DEFAULT '0',\n          ADD COLUMN emailConfirmed int(11) DEFAULT '0',\n          ADD COLUMN mobileVerified int(11) DEFAULT '0'\n                  `;\n      await ctx.model.query(sql);\n    }\n  }\n\n  return VersionUpdate6;\n};\n","module.exports = function (ctx) {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class VersionUpdate8 {\n    async run(options) {\n      let sql;\n\n      // aFunctionScene\n      sql = `\n          CREATE TABLE aFunctionScene (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            sceneName varchar(50) DEFAULT NULL,\n            sceneMenu int(11) DEFAULT '0',\n            sceneSorting int(11) DEFAULT '0',\n            PRIMARY KEY (id)\n          )\n        `;\n      await ctx.model.query(sql);\n\n      // aFunction: scene -> sceneId\n      sql = `\n        ALTER TABLE aFunction\n          CHANGE COLUMN scene sceneId int(11) DEFAULT '0'\n                  `;\n      await ctx.model.query(sql);\n\n      // aAtom: add field roleIdOwner\n      sql = `\n        ALTER TABLE aAtom\n          ADD COLUMN roleIdOwner int(11) DEFAULT '0'\n                  `;\n      await ctx.model.query(sql);\n\n      // aViewRoleRightAtomClass\n      sql = `\n        create view aViewRoleRightAtomClass as\n          select a.iid,a.roleId as roleIdWho,a.roleIdBase,b.id as roleRightId,b.atomClassId,b.action,b.scope from aRoleExpand a\n            inner join aRoleRight b on a.roleIdBase=b.roleId\n          `;\n      await ctx.model.query(sql);\n\n      // aViewUserRightAtomClassRole\n      sql = `\n        create view aViewUserRightAtomClassRole as\n          select a.iid,a.userId as userIdWho,b.atomClassId,b.action,c.roleId as roleIdWhom from aViewUserRoleExpand a\n            inner join aRoleRightRef b on a.roleIdBase=b.roleId\n            inner join aRoleRef c on b.roleIdScope=c.roleIdParent\n          `;\n      await ctx.model.query(sql);\n\n      // aViewUserRightAtomRole\n      sql = `\n        create view aViewUserRightAtomRole as\n          select a.iid, a.id as atomId,a.roleIdOwner as roleIdWhom,b.userIdWho,b.action from aAtom a,aViewUserRightAtomClassRole b\n            where a.deleted=0 and a.atomEnabled=1\n              and a.atomClassId=b.atomClassId\n              and a.roleIdOwner=b.roleIdWhom\n        `;\n      await ctx.model.query(sql);\n\n      // update exists atoms\n      await this._updateAtoms(options);\n    }\n\n    async _updateAtoms(options) {\n      // all instances\n      const instances = await ctx.bean.instance.list({ where: {} });\n      for (const instance of instances) {\n        await ctx.meta.util.executeBean({\n          subdomain: instance.name,\n          beanModule: moduleInfo.relativeName,\n          beanFullName: `${moduleInfo.relativeName}.version.manager`,\n          context: options,\n          fn: 'update8Atoms',\n        });\n      }\n    }\n\n    async _updateAtomsInstance() {\n      // cache\n      const mapUserAtomClassRole = {};\n      // atoms\n      const atoms = await ctx.model.query(\n        'select id, atomClassId, userIdCreated from aAtom where iid=? and deleted=0',\n        [ctx.instance.id]\n      );\n      for (const atom of atoms) {\n        const mapKey = `${atom.userIdCreated}:${atom.atomClassId}`;\n        let mapValue = mapUserAtomClassRole[mapKey];\n        if (mapValue === undefined) {\n          mapValue = mapUserAtomClassRole[mapKey] = await this._getRoleIdOwner(atom.atomClassId, atom.userIdCreated);\n        }\n        if (mapValue > 0) {\n          await ctx.model.query('update aAtom set roleIdOwner=? where id=?', [mapValue, atom.id]);\n        }\n      }\n    }\n\n    async _getRoleIdOwner(atomClassId, userId) {\n      return await ctx.bean.atom.preferredRoleId({\n        atomClass: { id: atomClassId },\n        user: { id: userId },\n      });\n    }\n  }\n\n  return VersionUpdate8;\n};\n","module.exports = function (ctx) {\n  // const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class VersionUpdate9 {\n    async run() {\n      await this.run_atom();\n      await this.run_categorytag();\n      await this.run_resource();\n      await this.run_function();\n    }\n\n    async run_atom() {\n      let sql;\n\n      // aAtom: atomEnabled->atomStage\n      sql = `\n        ALTER TABLE aAtom\n          CHANGE COLUMN atomEnabled atomStage int(11) DEFAULT '0'\n        `;\n      await ctx.model.query(sql);\n\n      // aAtom: atomFlow->atomFlowId\n      sql = `\n        ALTER TABLE aAtom\n          CHANGE COLUMN atomFlow atomFlowId int(11) DEFAULT '0'\n        `;\n      await ctx.model.query(sql);\n\n      // aAtom: add field atomClosed/atomIdDraft/atomIdArchive\n      sql = `\n        ALTER TABLE aAtom\n          ADD COLUMN atomClosed int(11) DEFAULT '0',\n          ADD COLUMN atomIdDraft int(11) DEFAULT '0',\n          ADD COLUMN atomIdArchive int(11) DEFAULT '0'\n        `;\n      await ctx.model.query(sql);\n\n      // aAtom: add field atomStatic/atomStaticKey/atomRevision\n      sql = `\n        ALTER TABLE aAtom\n          ADD COLUMN atomStatic int(11) DEFAULT '0',\n          ADD COLUMN atomStaticKey varchar(255) DEFAULT NULL,\n          ADD COLUMN atomRevision int(11) DEFAULT '0'\n        `;\n      await ctx.model.query(sql);\n\n      // aAtom: add field atomDisabled\n      sql = `\n        ALTER TABLE aAtom\n          ADD COLUMN atomDisabled int(11) DEFAULT '0'\n        `;\n      await ctx.model.query(sql);\n\n      // alter view: aViewUserRightAtom\n      await ctx.model.query('drop view aViewUserRightAtom');\n      sql = `\n          create view aViewUserRightAtom as\n            select a.iid, a.id as atomId,a.userIdCreated as userIdWhom,b.userIdWho,b.action from aAtom a,aViewUserRightAtomClassUser b\n              where a.deleted=0 and a.atomStage>0\n                and a.atomClassId=b.atomClassId\n                and a.userIdCreated=b.userIdWhom\n        `;\n      await ctx.model.query(sql);\n\n      // alter view: aViewRoleRightAtom\n      await ctx.model.query('drop view aViewRoleRightAtom');\n      sql = `\n          create view aViewRoleRightAtom as\n            select a.iid, a.id as atomId,a.userIdCreated as userIdWhom,b.roleIdWho,b.action from aAtom a,aViewRoleRightAtomClassUser b\n              where a.deleted=0 and a.atomStage>0\n                and a.atomClassId=b.atomClassId\n                and a.userIdCreated=b.userIdWhom\n        `;\n      await ctx.model.query(sql);\n\n      // alter view: aViewUserRightAtomRole\n      await ctx.model.query('drop view aViewUserRightAtomRole');\n      sql = `\n          create view aViewUserRightAtomRole as\n            select a.iid, a.id as atomId,a.roleIdOwner as roleIdWhom,b.userIdWho,b.action from aAtom a,aViewUserRightAtomClassRole b\n              where a.deleted=0 and a.atomStage>0\n                and a.atomClassId=b.atomClassId\n                and a.roleIdOwner=b.roleIdWhom\n        `;\n      await ctx.model.query(sql);\n\n      // aAtomAction: add field bulk\n      sql = `\n        ALTER TABLE aAtomAction\n          ADD COLUMN bulk int(11) DEFAULT '0'\n        `;\n      await ctx.model.query(sql);\n      //   update action:create as bulk\n      sql = `\n        update aAtomAction set bulk=1 where code=1\n        `;\n      await ctx.model.query(sql);\n    }\n\n    async run_categorytag() {\n      let sql;\n      // aAtom: add field atomLanguage\\atomCategoryId\n      sql = `\n        ALTER TABLE aAtom\n          ADD COLUMN atomLanguage varchar(50) DEFAULT NULL,\n          ADD COLUMN atomCategoryId int(11) DEFAULT '0',\n          ADD COLUMN atomTags JSON DEFAULT NULL\n        `;\n      await ctx.model.query(sql);\n\n      // create table: aCategory\n      sql = `\n          CREATE TABLE aCategory (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            atomClassId int(11) DEFAULT '0',\n            language varchar(50) DEFAULT NULL,\n            categoryName varchar(50) DEFAULT NULL,\n            categoryCatalog int(11) DEFAULT '0',\n            categoryHidden int(11) DEFAULT '0',\n            categorySorting int(11) DEFAULT '0',\n            categoryFlag varchar(255) DEFAULT NULL,\n            categoryIdParent int(11) DEFAULT '0',\n            categoryUrl varchar(255) DEFAULT NULL,\n            PRIMARY KEY (id)\n          )\n        `;\n      await ctx.model.query(sql);\n\n      // create table: aTag\n      sql = `\n          CREATE TABLE aTag (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            atomClassId int(11) DEFAULT '0',\n            language varchar(50) DEFAULT NULL,\n            tagName varchar(50) DEFAULT NULL,\n            tagAtomCount int(11) DEFAULT '0',\n            PRIMARY KEY (id)\n          )\n        `;\n      await ctx.model.query(sql);\n\n      // create table: aTagRef\n      sql = `\n          CREATE TABLE aTagRef (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            atomId int(11) DEFAULT '0',\n            tagId int(11) DEFAULT '0',\n            PRIMARY KEY (id)\n          )\n        `;\n      await ctx.model.query(sql);\n    }\n\n    async run_resource() {\n      let sql;\n\n      // create table: aResource\n      sql = `\n          CREATE TABLE aResource (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            atomId int(11) DEFAULT '0',\n            description varchar(255) DEFAULT NULL,\n            resourceSorting int(11) DEFAULT '0',\n            resourceType varchar(50) DEFAULT NULL,\n            resourceConfig JSON DEFAULT NULL,\n            PRIMARY KEY (id)\n          )\n        `;\n      await ctx.model.query(sql);\n\n      sql = `\n          CREATE TABLE aResourceLocale (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            atomId int(11) DEFAULT '0',\n            locale varchar(50) DEFAULT NULL,\n            atomNameLocale varchar(255) DEFAULT NULL,\n            PRIMARY KEY (id)\n          )\n        `;\n      await ctx.model.query(sql);\n\n      sql = `\n          CREATE TABLE aResourceRole (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            atomId int(11) DEFAULT '0',\n            roleId int(11) DEFAULT '0',\n            PRIMARY KEY (id)\n          )\n        `;\n      await ctx.model.query(sql);\n\n      // aViewUserRightResource\n      sql = `\n          CREATE VIEW aViewUserRightResource as\n            select a.iid,a.userId as userIdWho,a.roleExpandId,a.roleId,a.roleIdBase,\n                   b.id as resourceRoleId,b.atomId as resourceAtomId\n              from aViewUserRoleExpand a\n                inner join aResourceRole b on a.roleIdBase=b.roleId\n            `;\n      await ctx.model.query(sql);\n    }\n\n    async run_function() {\n      // drop table: aFunction\n      await ctx.model.query('drop table aFunction');\n      // drop table: aFunctionLocale\n      await ctx.model.query('drop table aFunctionLocale');\n      // drop table: aFunctionScene\n      await ctx.model.query('drop table aFunctionScene');\n      // drop table: aFunctionStar\n      await ctx.model.query('drop table aFunctionStar');\n      // drop table: aRoleFunction\n      await ctx.model.query('drop table aRoleFunction');\n      // drop view: aViewUserRightFunction\n      await ctx.model.query('drop view aViewUserRightFunction');\n    }\n  }\n\n  return VersionUpdate9;\n};\n","const versionManager = require('./bean/version.manager.js');\nconst atomResource = require('./bean/atom.resource.js');\nconst atomRole = require('./bean/atom.role.js');\nconst atomUser = require('./bean/atom.user.js');\nconst localProcedure = require('./bean/local.procedure.js');\nconst queueSchedule = require('./bean/queue.schedule.js');\nconst queueRoleBuild = require('./bean/queue.roleBuild.js');\nconst startupLoadSchedules = require('./bean/startup.loadSchedules.js');\nconst startupLoadAtomStatics = require('./bean/startup.loadAtomStatics.js');\nconst startupCheckResourceLocales = require('./bean/startup.checkResourceLocales.js');\nconst middlewareInner = require('./bean/middleware.inner.js');\nconst middlewareTest = require('./bean/middleware.test.js');\nconst middlewareTransaction = require('./bean/middleware.transaction.js');\nconst middlewareCors = require('./bean/middleware.cors.js');\nconst middlewareAuth = require('./bean/middleware.auth.js');\nconst middlewareRight = require('./bean/middleware.right.js');\nconst middlewareJsonp = require('./bean/middleware.jsonp.js');\nconst middlewareHttpLog = require('./bean/middleware.httpLog.js');\nconst middlewareconnectionAuth = require('./bean/middleware.connectionAuth.js');\nconst beanLocal = require('./bean/bean.local.js');\nconst beanAtomBase = require('./bean/bean.atomBase.js');\nconst beanAtom = require('./bean/bean.atom.js');\nconst beanAtomAction = require('./bean/bean.atomAction.js');\nconst beanAtomClass = require('./bean/bean.atomClass.js');\nconst beanAtomStatic = require('./bean/bean.atomStatic.js');\nconst beanAuth = require('./bean/bean.auth.js');\nconst beanBase = require('./bean/bean.base.js');\nconst beanResource = require('./bean/bean.resource.js');\nconst beanRole = require('./bean/bean.role.js');\nconst beanUser = require('./bean/bean.user.js');\nconst beanUtil = require('./bean/bean.util.js');\nconst beanCategory = require('./bean/bean.category.js');\nconst beanTag = require('./bean/bean.tag.js');\nconst beanBodyCrypto = require('./bean/bean.bodyCrypto.js');\nconst beanAreaScope = require('./bean/bean.areaScope.js');\nconst statsDraftsCommon = require('./bean/stats.draftsCommon.js');\nconst statsStars = require('./bean/stats.stars.js');\nconst statsLabels = require('./bean/stats.labels.js');\nconst statsStarsLabels = require('./bean/stats.starsLabels.js');\n\nmodule.exports = app => {\n  const beans = {\n    // version\n    'version.manager': {\n      mode: 'app',\n      bean: versionManager,\n    },\n    // atom\n    'atom.resource': {\n      mode: 'app',\n      bean: atomResource,\n    },\n    'atom.role': {\n      mode: 'app',\n      bean: atomRole,\n    },\n    'atom.user': {\n      mode: 'app',\n      bean: atomUser,\n    },\n    // local\n    'local.procedure': {\n      mode: 'ctx',\n      bean: localProcedure,\n    },\n    // queue\n    'queue.schedule': {\n      mode: 'app',\n      bean: queueSchedule,\n    },\n    'queue.roleBuild': {\n      mode: 'app',\n      bean: queueRoleBuild,\n    },\n    // startup\n    'startup.loadSchedules': {\n      mode: 'app',\n      bean: startupLoadSchedules,\n    },\n    'startup.loadAtomStatics': {\n      mode: 'app',\n      bean: startupLoadAtomStatics,\n    },\n    'startup.checkResourceLocales': {\n      mode: 'app',\n      bean: startupCheckResourceLocales,\n    },\n    // middleware\n    'middleware.inner': {\n      mode: 'ctx',\n      bean: middlewareInner,\n    },\n    'middleware.test': {\n      mode: 'ctx',\n      bean: middlewareTest,\n    },\n    'middleware.transaction': {\n      mode: 'ctx',\n      bean: middlewareTransaction,\n    },\n    'middleware.cors': {\n      mode: 'ctx',\n      bean: middlewareCors,\n    },\n    'middleware.auth': {\n      mode: 'ctx',\n      bean: middlewareAuth,\n    },\n    'middleware.right': {\n      mode: 'ctx',\n      bean: middlewareRight,\n    },\n    'middleware.jsonp': {\n      mode: 'ctx',\n      bean: middlewareJsonp,\n    },\n    'middleware.httpLog': {\n      mode: 'ctx',\n      bean: middlewareHttpLog,\n    },\n    'middleware.connectionAuth': {\n      mode: 'ctx',\n      bean: middlewareconnectionAuth,\n    },\n    // global\n    local: {\n      mode: 'ctx',\n      bean: beanLocal,\n      global: true,\n    },\n    atomBase: {\n      mode: 'app',\n      bean: beanAtomBase,\n      global: true,\n    },\n    atom: {\n      mode: 'ctx',\n      bean: beanAtom,\n      global: true,\n    },\n    atomAction: {\n      mode: 'ctx',\n      bean: beanAtomAction,\n      global: true,\n    },\n    atomClass: {\n      mode: 'ctx',\n      bean: beanAtomClass,\n      global: true,\n    },\n    atomStatic: {\n      mode: 'ctx',\n      bean: beanAtomStatic,\n      global: true,\n    },\n    auth: {\n      mode: 'ctx',\n      bean: beanAuth,\n      global: true,\n    },\n    base: {\n      mode: 'ctx',\n      bean: beanBase,\n      global: true,\n    },\n    resource: {\n      mode: 'ctx',\n      bean: beanResource,\n      global: true,\n    },\n    role: {\n      mode: 'ctx',\n      bean: beanRole,\n      global: true,\n    },\n    user: {\n      mode: 'ctx',\n      bean: beanUser,\n      global: true,\n    },\n    util: {\n      mode: 'app',\n      bean: beanUtil,\n      global: true,\n    },\n    category: {\n      mode: 'ctx',\n      bean: beanCategory,\n      global: true,\n    },\n    tag: {\n      mode: 'ctx',\n      bean: beanTag,\n      global: true,\n    },\n    bodyCrypto: {\n      mode: 'ctx',\n      bean: beanBodyCrypto,\n      global: true,\n    },\n    areaScope: {\n      mode: 'ctx',\n      bean: beanAreaScope,\n      global: true,\n    },\n    // stats\n    'stats.draftsCommon': {\n      mode: 'ctx',\n      bean: statsDraftsCommon,\n    },\n    'stats.stars': {\n      mode: 'ctx',\n      bean: statsStars,\n    },\n    'stats.labels': {\n      mode: 'ctx',\n      bean: statsLabels,\n    },\n    'stats.starsLabels': {\n      mode: 'ctx',\n      bean: statsStarsLabels,\n    },\n  };\n  return beans;\n};\n","/***\n  escapeHtml: based on markdown-it\n*/\n\nconst HTML_ESCAPE_TEST_RE = /[&<>\"']/;\nconst HTML_ESCAPE_REPLACE_RE = /[&<>\"']/g;\nconst HTML_REPLACEMENTS = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#039;',\n};\n\nfunction replaceUnsafeChar(ch) {\n  return HTML_REPLACEMENTS[ch];\n}\n\nfunction escapeHtml(str) {\n  if (HTML_ESCAPE_TEST_RE.test(str)) {\n    return str.replace(HTML_ESCAPE_REPLACE_RE, replaceUnsafeChar);\n  }\n  return str;\n}\n\nconst URL_ESCAPE_TEST_RE = /[<>\"']/;\nconst URL_ESCAPE_REPLACE_RE = /[<>\"']/g;\nconst URL_REPLACEMENTS = {\n  '<': '%3C',\n  '>': '%3E',\n  '\"': '%22',\n  \"'\": '%27',\n};\n\nfunction replaceUnsafeCharURL(ch) {\n  return URL_REPLACEMENTS[ch];\n}\n\nfunction escapeURL(str) {\n  if (URL_ESCAPE_TEST_RE.test(str)) {\n    return str.replace(URL_ESCAPE_REPLACE_RE, replaceUnsafeCharURL);\n  }\n  return str;\n}\n\nmodule.exports = {\n  escapeHtml(str) {\n    return escapeHtml(str);\n  },\n  escapeURL(str) {\n    return escapeURL(str);\n  },\n};\n","// eslint-disable-next-line\nmodule.exports = appInfo => {\n  const config = {};\n\n  // middlewares\n  config.middlewares = {\n    inner: {\n      bean: 'inner',\n      global: false,\n    },\n    test: {\n      bean: 'test',\n      global: false,\n    },\n    transaction: {\n      bean: 'transaction',\n      global: false,\n    },\n    cors: {\n      bean: 'cors',\n      global: true,\n      dependencies: 'instance',\n    },\n    auth: {\n      bean: 'auth',\n      global: true,\n      dependencies: 'instance',\n      ignore: /\\/version\\/(update|init|test)/,\n    },\n    right: {\n      bean: 'right',\n      global: true,\n      dependencies: 'auth',\n    },\n    jsonp: {\n      bean: 'jsonp',\n      global: false,\n      dependencies: 'instance',\n    },\n    httpLog: {\n      bean: 'httpLog',\n      global: false,\n      dependencies: 'instance',\n    },\n    connectionAuth: {\n      bean: 'connectionAuth',\n      type: 'socketio.connection',\n    },\n  };\n\n  // startups\n  config.startups = {\n    loadSchedules: {\n      bean: 'loadSchedules',\n      // instance: true,\n      debounce: true,\n      after: true,\n    },\n    loadAtomStatics: {\n      bean: 'loadAtomStatics',\n      instance: true,\n      debounce: true,\n    },\n    checkResourceLocales: {\n      bean: 'checkResourceLocales',\n      instance: true,\n      debounce: true,\n    },\n  };\n\n  // queues\n  config.queues = {\n    schedule: {\n      bean: 'schedule',\n    },\n    roleBuild: {\n      bean: 'roleBuild',\n    },\n  };\n\n  // pageSize\n  config.pageSize = 20;\n\n  // locales\n  config.locales = {\n    'en-us': 'English',\n    'zh-cn': 'Chinese',\n  };\n\n  // timezones\n  config.timezones = {\n    'en-us': -8,\n    'zh-cn': 8,\n  };\n\n  config.cors = {\n    whiteList: 'http://localhost',\n  };\n\n  // checkUserName\n  config.checkUserName = true;\n  // account\n  config.account = {\n    needActivation: true,\n    activationWays: 'mobile,email',\n    activationProviders: {\n      mobile: 'a-authsms',\n      email: 'a-authsimple',\n    },\n    url: {\n      // url is specified by activation provider\n      //   emailConfirm: '/a/authsimple/emailConfirm',\n      //   mobileVerify: '',\n      //   passwordChange: '/a/authsimple/passwordChange',\n      //   passwordForgot: '/a/authsimple/passwordForgot',\n      //   passwordReset: '/a/authsimple/passwordReset',\n    },\n    //  default is 'activated', if need activating by mobile/email, then add to 'registered' first\n    activatedRoles: 'activated',\n  };\n\n  // public dir\n  config.publicDir = '';\n\n  // comment\n  config.comment = {\n    trim: {\n      limit: 100,\n      wordBreak: false,\n      preserveTags: false,\n    },\n  };\n\n  // httpLog\n  config.httpLog = true;\n\n  // auth\n  config.auth = {\n    avatar: {\n      timeout: 5000,\n      default: 'https://cabloy.com/plugins/cms-pluginbase/assets/images/avatar_user.png',\n    },\n    maxAge: {\n      anonymous: 365 * 24 * 3600 * 1000, // 365 days\n      authenticated: 30 * 24 * 3600 * 1000, // 30 days // authenticated or rememberMe\n      default: 1 * 24 * 3600 * 1000, // default is one day\n    },\n  };\n\n  // user\n  config.user = {\n    privacyFields: 'createdAt,updatedAt,realName,locale,email,mobile,activated,emailConfirmed,mobileVerified',\n  };\n\n  // securityLevelProtection\n  config.securityLevelProtection = {\n    body: {\n      crypto: false,\n      cryptojs: '/a/base/js/bodyCrypto',\n    },\n  };\n\n  // configFront\n  config.configFront = {\n    site: {\n      cover: '/api/static/a/base/img/cabloy.png',\n    },\n    demo: {\n      enable: false,\n    },\n    // areaScope\n    areaScope: {\n      enable: false,\n    },\n  };\n\n  return config;\n};\n","module.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  return {\n    systemRoles: [\n      'root',\n      'anonymous',\n      'authenticated',\n      'template',\n      'system',\n      'registered',\n      'activated',\n      'superuser',\n      'builtIn',\n      'organization',\n      'internal',\n      'external',\n    ],\n    atom: {\n      stage: {\n        draft: 0,\n        formal: 1,\n        history: 2,\n      },\n      action: {\n        create: 1,\n        read: 2,\n        write: 3,\n        delete: 4,\n        clone: 5,\n        enable: 6,\n        disable: 7,\n        layout: 15,\n        workflowFormal: 16,\n        // report: 17,\n\n        authorize: 25,\n\n        deleteBulk: 35,\n        exportBulk: 36,\n        importBulk: 37,\n        // reportBulk: 38,\n        layoutBulk: 45,\n\n        save: 51,\n        submit: 52,\n        history: 53,\n        formal: 54,\n        draft: 55,\n        workflow: 56,\n\n        //\n        draftStatsBulk: 71,\n        readBulk: 72,\n\n        custom: 100, // custom action start from custom\n      },\n      actionMeta: {\n        create: {\n          title: 'Create',\n          actionModule: moduleInfo.relativeName,\n          actionComponent: 'action',\n          bulk: true,\n          select: false,\n          icon: { f7: '::add' },\n        },\n        read: {\n          title: 'View',\n          actionModule: moduleInfo.relativeName,\n          actionComponent: 'action',\n          // actionPath: '/a/basefront/atom/item?mode=view&atomId={{atomId}}&itemId={{itemId}}',\n          enableOnStatic: true,\n          enableOnOpened: true,\n          enableOnFlowing: true,\n          icon: { f7: '::visibility' },\n        },\n        write: {\n          title: 'Edit',\n          actionModule: moduleInfo.relativeName,\n          actionComponent: 'action',\n          enableOnStatic: false,\n          enableOnOpened: false,\n          enableOnFlowing: false,\n          directShowOnSwipeout: true,\n          directShowOnList: true,\n          icon: { f7: '::edit' },\n        },\n        delete: {\n          title: 'Delete',\n          actionModule: moduleInfo.relativeName,\n          actionComponent: 'action',\n          enableOnStatic: false,\n          enableOnOpened: false,\n          enableOnFlowing: false,\n          directShowOnSwipeout: true,\n          directShowOnList: true,\n          icon: { f7: '::delete' },\n        },\n        clone: {\n          title: 'Clone',\n          actionModule: moduleInfo.relativeName,\n          actionComponent: 'action',\n          enableOnStatic: true,\n          enableOnOpened: true,\n          enableOnFlowing: true,\n          icon: { f7: ':outline:copy-outline' },\n        },\n        enable: {\n          title: 'Enable',\n          actionModule: moduleInfo.relativeName,\n          actionComponent: 'action',\n          enableOnStatic: true,\n          enableOnOpened: true,\n          enableOnFlowing: true,\n          directShowOnList: true,\n          stage: 'formal',\n          icon: { f7: '::play-arrow' },\n        },\n        disable: {\n          title: 'Disable',\n          actionModule: moduleInfo.relativeName,\n          actionComponent: 'action',\n          enableOnStatic: true,\n          enableOnOpened: true,\n          enableOnFlowing: true,\n          directShowOnList: true,\n          stage: 'formal',\n          icon: { f7: '::stop' },\n        },\n        layout: {\n          title: 'Layout',\n          actionModule: moduleInfo.relativeName,\n          actionComponent: 'action',\n          enableOnStatic: true,\n          enableOnOpened: true,\n          enableOnFlowing: true,\n          disableOnList: true,\n          icon: { f7: '::view-list' },\n        },\n        workflowFormal: {\n          title: 'ViewWorkFlow',\n          actionModule: moduleInfo.relativeName,\n          actionComponent: 'action',\n          enableOnStatic: true,\n          enableOnOpened: true,\n          enableOnFlowing: true,\n          directShowOnList: true,\n          stage: 'formal',\n          icon: { f7: '::flow-chart' },\n        },\n        authorize: {\n          title: 'Authorize',\n          actionModule: moduleInfo.relativeName,\n          actionPath: '/a/basefront/resource/authorize?atomId={{atomId}}&itemId={{itemId}}',\n          enableOnStatic: true,\n          enableOnOpened: true,\n          enableOnFlowing: true,\n          directShowOnList: true,\n          stage: 'formal',\n          icon: { f7: '::groups' },\n        },\n        deleteBulk: {\n          title: 'BatchDelete',\n          actionModule: moduleInfo.relativeName,\n          actionComponent: 'actionBulk',\n          bulk: true,\n          select: true,\n          icon: { f7: '::delete' },\n        },\n        exportBulk: {\n          title: 'Export',\n          actionModule: moduleInfo.relativeName,\n          actionComponent: 'actionBulk',\n          bulk: true,\n          select: null,\n          icon: { f7: '::export' },\n        },\n        importBulk: {\n          title: 'Import',\n          actionModule: moduleInfo.relativeName,\n          actionComponent: 'actionBulk',\n          bulk: true,\n          select: null,\n          icon: { f7: '::import' },\n          params: {\n            file: {\n              mode: 'buffer',\n            },\n            progress: true,\n            transaction: true,\n            accept: '',\n          },\n        },\n        layoutBulk: {\n          title: 'Layout',\n          actionModule: moduleInfo.relativeName,\n          actionComponent: 'actionBulk',\n          bulk: true,\n          select: null,\n          icon: { f7: '::view-list' },\n        },\n        draftStatsBulk: {\n          title: 'Draft',\n          actionModule: moduleInfo.relativeName,\n          actionComponent: 'actionBulk',\n          render: {\n            module: 'a-baserender',\n            name: 'renderAtomListDraftStats',\n          },\n          bulk: true,\n          select: false,\n          stage: 'formal',\n          icon: { f7: ':outline:draft-outline' },\n          authorize: false,\n        },\n        readBulk: {\n          title: 'List',\n          actionModule: moduleInfo.relativeName,\n          actionComponent: 'actionBulk',\n          bulk: true,\n          icon: { f7: '::visibility' },\n          authorize: false,\n        },\n        save: {\n          title: 'Save',\n          actionModule: moduleInfo.relativeName,\n          actionComponent: 'action',\n          authorize: false,\n          icon: { f7: '::save' },\n        },\n        submit: {\n          title: 'Submit',\n          actionModule: moduleInfo.relativeName,\n          actionComponent: 'action',\n          authorize: false,\n          icon: { f7: '::done' },\n        },\n        history: {\n          title: 'History',\n          actionModule: moduleInfo.relativeName,\n          actionComponent: 'action',\n          authorize: false,\n          icon: { f7: ':outline:work-history-outline' },\n        },\n        formal: {\n          title: 'Formal',\n          actionModule: moduleInfo.relativeName,\n          actionComponent: 'action',\n          authorize: false,\n          icon: { f7: ':outline:archive-outline' },\n        },\n        draft: {\n          title: 'Draft',\n          actionModule: moduleInfo.relativeName,\n          actionComponent: 'action',\n          authorize: false,\n          icon: { f7: ':outline:draft-outline' },\n        },\n        workflow: {\n          title: 'ViewWorkFlow',\n          actionModule: moduleInfo.relativeName,\n          actionComponent: 'action',\n          authorize: false,\n          icon: { f7: '::flow-chart' },\n        },\n        custom: {\n          title: 'Custom',\n        },\n      },\n    },\n  };\n};\n","// error code should start from 1001\nmodule.exports = {\n  1001: 'Element Exists',\n  1002: 'Element does not Exist',\n  1003: 'Operation Failed',\n  1004: 'User does not Exist',\n  1005: 'User is Disabled',\n  1006: 'Agent user does not Exist',\n  1007: 'Incomplete Information',\n  1008: 'Should Delete Children first',\n  1009: 'The Auth should be Enabled',\n  1010: 'Only Valid for Formal Atom',\n  1011: 'Invalid Arguments',\n  1012: 'Cannot delete if has atoms',\n  1013: 'Cannot delete if has children',\n  1014: 'DisabledOnDemoMode',\n  1015: 'Invalid Configuration',\n  1016: 'Resource does not Exist: %s',\n};\n","module.exports = {\n  // language/locale\n  'en-us': 'English',\n  'zh-cn': 'Chinese',\n  // English: 'English',\n  // Chinese: 'Chinese',\n  //\n  Atom: 'Data',\n  Atoms: 'Data',\n  AtomName: 'Title',\n  CommentPublishTitleNewComment: 'Posted a new comment',\n  CommentPublishTitleEditComment: 'Modified the comment',\n  CommentPublishTitleReplyComment: 'Replied to your comment',\n  CommentPublishTitleEditReplyComment: 'Modified the comment replied before',\n  DisabledOnDemoMode: 'Disabled on Demo Mode',\n  CloneCopyText: 'Copy',\n  KeyForAtom: 'Key',\n  ViewLayout: 'View',\n  WorkFlow: 'Work Flow',\n  ViewWorkFlow: 'View WorkFlow',\n  StarsLabels: 'Stars & Labels',\n  OpenAuthScope: 'Open Auth Scope',\n  BasicProfile: 'Basic Profile',\n  BasicAdmin: 'Basic Admin',\n  WorkplaceTitle: 'Workplace',\n  NotImplemented: 'Not Implemented',\n  BatchDelete: 'Batch Delete',\n  'Only Valid for Formal Atom': 'Only Valid for Formal Data',\n  'Atom Flag': 'Data Flag',\n  'Atom Name': 'Title',\n  'Cannot delete if has atoms': 'Cannot delete if has data',\n  'Atom Authorization': 'Data Authorization',\n  'Atom Authorizations': 'Data Authorizations',\n};\n","module.exports = {\n  // language/locale\n  'en-us': '英语',\n  'zh-cn': '简体中文',\n  English: '英文',\n  Chinese: '简体中文',\n  //\n  'Comment List': '评论列表',\n  'Delete Comment': '删除评论',\n  'Element Exists': '元素已存在',\n  'Element does not Exist': '元素不存在',\n  'User Exists': '用户已存在',\n  'Operation Failed': '操作失败',\n  'User does not Exist': '用户不存在',\n  'User is Disabled': '用户被禁用',\n  'Agent user does not Exist': '代理用户不存在',\n  'Incomplete Information': '信息不完整',\n  'Should Delete Children first': '应该先删除子角色',\n  'Cannot Contain __': '不能包含__',\n  'The Auth should be Enabled': '此认证需要被启用',\n  'Only Valid for Formal Atom': '只针对正式数据有效',\n  'Atom Flag': '数据标记',\n  'Atom Name': '标题',\n  'Modification Time': '修改时间',\n  'Modification Date': '修改日期',\n  'Created Time': '创建时间',\n  'Created Date': '创建日期',\n  'Account Migration': '账户迁移',\n  'Invalid Arguments': '无效参数',\n  'Cannot delete if has atoms': '有数据时不允许删除',\n  'Cannot delete if has children': '有子元素时不允许删除',\n  'Create Resource': '新建资源',\n  'Resource List': '资源列表',\n  'Role List': '角色列表',\n  'Move Up': '上移',\n  'Move Down': '下移',\n  'Developer Tool': '开发者工具',\n  'Role Type': '角色类型',\n  'Resource Authorization': '资源授权',\n  'Resource Authorizations': '资源授权',\n  'Atom Authorization': '数据授权',\n  'Atom Authorizations': '数据授权',\n  'Invalid Configuration': '无效的配置',\n  'Not Found': '未发现',\n  'Resource does not Exist: %s': '资源不存在: %s',\n  CommentPublishTitleNewComment: '发表了新评论',\n  CommentPublishTitleEditComment: '修改了评论',\n  CommentPublishTitleReplyComment: '回复了您的评论',\n  CommentPublishTitleEditReplyComment: '修改了回复的评论',\n  DisabledOnDemoMode: '演示模式中禁用',\n  Draft: '草稿',\n  Drafts: '草稿',\n  Formal: '正式',\n  Formals: '正式',\n  Archive: '归档',\n  Archives: '归档',\n  History: '历史',\n  Histories: '历史',\n  Base: '基本',\n  Create: '新建',\n  List: '列表',\n  Tools: '工具',\n  View: '查看',\n  Edit: '编辑',\n  Delete: '删除',\n  Clone: '克隆',\n  Export: '导出',\n  Exports: '导出',\n  Import: '导入',\n  Save: '保存',\n  Submit: '提交',\n  Atom: '数据',\n  Atoms: '数据',\n  AtomName: '标题',\n  Search: '搜索',\n  CloneCopyText: '副本',\n  Creator: '创建人',\n  Revision: '修订',\n  Version: '版本',\n  KeyForAtom: '关键字',\n  Content: '内容',\n  Enable: '启用',\n  Enabled: '已启用',\n  Disable: '禁用',\n  Disabled: '已禁用',\n  Default: '默认',\n  Home: '首页',\n  Test: '测试',\n  Catalog: '目录',\n  Category: '目录',\n  Categories: '目录',\n  Tag: '标签',\n  Tags: '标签',\n  Url: '链接',\n  Resource: '资源',\n  Resources: '资源',\n  Function: '功能',\n  Menu: '菜单',\n  Authorize: '授权',\n  General: '通用',\n  Stars: '星标',\n  Task: '任务',\n  Tasks: '任务',\n  Claimings: '待签收',\n  Handlings: '处理中',\n  Completeds: '已完成',\n  Flow: '流程',\n  Flows: '流程',\n  Initiateds: '发起的',\n  Participateds: '参与的',\n  Ends: '已结束',\n  Mine: '我的',\n  Attachments: '附件',\n  Comment: '评论',\n  Comments: '评论',\n  Appearance: '外观',\n  Language: '语言',\n  Languages: '语言',\n  Theme: '主题',\n  Themes: '主题',\n  ViewLayout: '视图',\n  WorkFlow: '工作流',\n  ViewWorkFlow: '查看工作流',\n  Detail: '明细',\n  Details: '明细',\n  StarsLabels: '星标',\n  Red: '红色',\n  Orange: '橘色',\n  Yellow: '黄色',\n  Blue: '蓝色',\n  Green: '绿色',\n  Purple: '紫色',\n  Basic: '基本',\n  Preview: '预览',\n  User: '用户',\n  Users: '用户',\n  Role: '角色',\n  Roles: '角色',\n  Move: '移动',\n  OpenAuthScope: '开放认证范围',\n  System: '系统',\n  Management: '管理',\n  Demonstration: '演示',\n  About: '关于',\n  BasicProfile: '基础资料',\n  BasicAdmin: '基础管理',\n  Authenticated: '已验证',\n  Anonymous: '匿名',\n  WorkplaceTitle: '工作台',\n  Order: '订单',\n  Invalid: '无效',\n  NotImplemented: '未实现',\n  Unnamed: '未命名',\n  BatchDelete: '批量删除',\n  // role name\n  root: '根',\n  anonymous: '匿名',\n  authenticated: '已验证',\n  template: '模版',\n  system: '系统',\n  registered: '已注册',\n  activated: '已激活',\n  superuser: '超级用户',\n  organization: '组织',\n  internal: '内部',\n  external: '外部',\n  builtIn: '内置',\n};\n","module.exports = {\n  'en-us': require('./locale/en-us.js'),\n  'zh-cn': require('./locale/zh-cn.js'),\n};\n","module.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  const comment = {\n    info: {\n      title: 'Comments',\n      persistence: true,\n      uniform: {\n        stats: {\n          params: {\n            module: 'a-message',\n            name: 'message',\n            nameSub: `${moduleInfo.relativeName}_comment`,\n          },\n          color: 'red',\n        },\n      },\n    },\n  };\n  return comment;\n};\n","module.exports = app => {\n  const dictItems = [\n    {\n      code: 0,\n      title: 'Role',\n      options: {\n        icon: { f7: ':role:role' },\n      },\n    },\n    {\n      code: 1,\n      title: 'Organization',\n      options: {\n        icon: { f7: ':role:organization' },\n      },\n    },\n    {\n      code: 2,\n      title: 'Position',\n      options: {\n        icon: { f7: ':role:position' },\n      },\n    },\n    {\n      code: 3,\n      title: 'Level',\n      options: {\n        icon: { f7: ':role:level' },\n      },\n    },\n    {\n      code: 4,\n      title: 'Relation',\n      options: {\n        icon: { f7: ':role:relation' },\n      },\n    },\n    {\n      code: 5,\n      title: 'Role Template',\n      options: {\n        icon: { f7: ':role:template' },\n      },\n    },\n    {\n      code: 6,\n      title: 'OpenAuthScope',\n      options: {\n        icon: { f7: ':role:shield-key' },\n      },\n    },\n  ];\n  const dictLocales = {\n    'en-us': {\n      OpenAuthScope: 'Open Auth Scope',\n    },\n    'zh-cn': {\n      Role: '角色',\n      Organization: '组织',\n      Position: '岗位',\n      Level: '级别',\n      Relation: '关系',\n      OpenAuthScope: '开放认证范围',\n      'Role Template': '角色模版',\n    },\n  };\n  const definition = {\n    atomName: 'Role Type',\n    atomStaticKey: 'dictRoleType',\n    atomRevision: 2,\n    description: '',\n    dictItems: JSON.stringify(dictItems),\n    dictLocales: JSON.stringify(dictLocales),\n    resourceRoles: 'root',\n  };\n  return definition;\n};\n","const roleType = require('./dict/roleType.js');\n\nmodule.exports = app => {\n  const dicts = [roleType(app)];\n  return dicts;\n};\n","const mineAtomDrafts = require('./mines/mineAtomDrafts.js');\nconst mineAtomStars = require('./mines/mineAtomStars.js');\nconst mineAtomFormals = require('./mines/mineAtomFormals.js');\nconst mineWorkFlowTasks = require('./mines/mineWorkFlowTasks.js');\nconst mineWorkFlowFlows = require('./mines/mineWorkFlowFlows.js');\nconst mineTaskClaimings = require('./mines/mineTaskClaimings.js');\nconst mineTaskHandlings = require('./mines/mineTaskHandlings.js');\nconst mineTaskCompleteds = require('./mines/mineTaskCompleteds.js');\nconst mineFlowInitiateds = require('./mines/mineFlowInitiateds.js');\nconst mineFlowParticipateds = require('./mines/mineFlowParticipateds.js');\nconst mineFlowEnds = require('./mines/mineFlowEnds.js');\nconst mineMineAttachments = require('./mines/mineMineAttachments.js');\nconst mineMineComments = require('./mines/mineMineComments.js');\nconst mineMineExports = require('./mines/mineMineExports.js');\nconst mineAppearanceLanguage = require('./mines/mineAppearanceLanguage.js');\nconst mineAppearanceTheme = require('./mines/mineAppearanceTheme.js');\nconst mineAppearanceView = require('./mines/mineAppearanceView.js');\n\nmodule.exports = app => {\n  const resources = [\n    mineAtomDrafts(app),\n    mineAtomStars(app),\n    mineAtomFormals(app),\n    mineWorkFlowTasks(app),\n    mineWorkFlowFlows(app),\n    mineTaskClaimings(app),\n    mineTaskHandlings(app),\n    mineTaskCompleteds(app),\n    mineFlowInitiateds(app),\n    mineFlowParticipateds(app),\n    mineFlowEnds(app),\n    mineMineAttachments(app),\n    mineMineComments(app),\n    mineMineExports(app),\n    mineAppearanceLanguage(app),\n    mineAppearanceTheme(app),\n    mineAppearanceView(app),\n  ];\n  return resources;\n};\n","module.exports = app => {\n  // resource\n  const resource = {\n    atomName: 'Language',\n    atomStaticKey: 'mineAppearanceLanguage',\n    atomRevision: -1,\n    atomCategoryId: 'a-base:mine.Appearance',\n    resourceType: 'a-base:mine',\n    resourceConfig: JSON.stringify({\n      actionModule: 'a-user',\n      actionComponent: 'action',\n      name: 'appearanceLanguage',\n    }),\n    resourceRoles: 'root',\n    resourceSorting: 1,\n  };\n  return resource;\n};\n","module.exports = app => {\n  const actionPath = '/a/user/theme';\n  // resource\n  const resource = {\n    atomName: 'Theme',\n    atomStaticKey: 'mineAppearanceTheme',\n    atomRevision: -1,\n    atomCategoryId: 'a-base:mine.Appearance',\n    resourceType: 'a-base:mine',\n    resourceConfig: JSON.stringify({\n      actionPath,\n    }),\n    resourceRoles: 'root',\n    resourceSorting: 2,\n  };\n  return resource;\n};\n","module.exports = app => {\n  // resource\n  const resource = {\n    atomName: 'ViewLayout',\n    atomStaticKey: 'mineAppearanceView',\n    atomRevision: -1,\n    atomCategoryId: 'a-base:mine.Appearance',\n    resourceType: 'a-base:mine',\n    resourceConfig: JSON.stringify({\n      actionModule: 'a-user',\n      actionComponent: 'action',\n      name: 'appearanceView',\n    }),\n    resourceRoles: 'root',\n    resourceSorting: 3,\n  };\n  return resource;\n};\n","module.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  // actionPath\n  const actionPath = '/a/basefront/atom/draftTabs';\n  // resource\n  const resource = {\n    atomName: 'Drafts',\n    atomStaticKey: 'mineAtomDrafts',\n    atomRevision: 3,\n    atomCategoryId: 'a-base:mine.Atom',\n    resourceType: 'a-base:mine',\n    resourceConfig: JSON.stringify({\n      actionPath,\n      stats: {\n        params: {\n          module: moduleInfo.relativeName,\n          name: 'drafts',\n        },\n        color: 'orange',\n      },\n    }),\n    resourceIcon: ':outline:draft-outline',\n    appKey: 'a-app:appDefault',\n    resourceRoles: 'root',\n    resourceSorting: 1,\n  };\n  return resource;\n};\n","module.exports = app => {\n  // actionPath\n  const options = {\n    stage: 'formal',\n    mine: 1,\n  };\n  const actionPath = `/a/basefront/atom/list?options=${encodeURIComponent(JSON.stringify(options))}`;\n  // resource\n  const resource = {\n    atomName: 'Formals',\n    atomStaticKey: 'mineAtomFormals',\n    atomRevision: 3,\n    atomCategoryId: 'a-base:mine.Atom',\n    resourceType: 'a-base:mine',\n    resourceConfig: JSON.stringify({\n      actionPath,\n    }),\n    resourceIcon: ':outline:archive-outline',\n    appKey: 'a-app:appDefault',\n    resourceRoles: 'root',\n    resourceSorting: 3,\n  };\n  return resource;\n};\n","module.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  // actionPath\n  const actionPath = '/a/basefront/atom/starTabs';\n  // resource\n  const resource = {\n    atomName: 'StarsLabels',\n    atomStaticKey: 'mineAtomStars',\n    atomRevision: 9,\n    atomCategoryId: 'a-base:mine.Atom',\n    resourceType: 'a-base:mine',\n    resourceConfig: JSON.stringify({\n      actionPath,\n      stats: {\n        params: {\n          module: moduleInfo.relativeName,\n          name: 'starsLabels',\n        },\n        color: 'auto',\n      },\n    }),\n    resourceIcon: ':outline:star-outline',\n    appKey: 'a-app:appDefault',\n    resourceRoles: 'root',\n    resourceSorting: 2,\n  };\n  return resource;\n};\n","module.exports = app => {\n  // actionPath\n  const options = {\n    mode: 'history',\n    where: {\n      'a.flowStatus': 1,\n    },\n  };\n  const actionPath = `/a/flowtask/flow/list?options=${encodeURIComponent(JSON.stringify(options))}`;\n  // resource\n  const resource = {\n    atomName: 'Ends',\n    atomStaticKey: 'mineFlowEnds',\n    atomRevision: -1,\n    atomCategoryId: 'a-base:mine.Flow',\n    resourceType: 'a-base:mine',\n    resourceConfig: JSON.stringify({\n      actionPath,\n    }),\n    resourceRoles: 'root',\n    resourceSorting: 3,\n  };\n  return resource;\n};\n","module.exports = app => {\n  // actionPath\n  const options = {\n    mode: 'mine',\n  };\n  const actionPath = `/a/flowtask/flow/list?options=${encodeURIComponent(JSON.stringify(options))}`;\n  // resource\n  const resource = {\n    atomName: 'Initiateds',\n    atomStaticKey: 'mineFlowInitiateds',\n    atomRevision: -1,\n    atomCategoryId: 'a-base:mine.Flow',\n    resourceType: 'a-base:mine',\n    resourceConfig: JSON.stringify({\n      actionPath,\n      stats: {\n        params: {\n          module: 'a-flow',\n          name: 'flowInitiateds',\n        },\n        color: 'orange',\n      },\n    }),\n    resourceRoles: 'root',\n    resourceSorting: 1,\n  };\n  return resource;\n};\n","module.exports = app => {\n  // actionPath\n  const options = {\n    mode: 'others',\n  };\n  const actionPath = `/a/flowtask/flow/list?options=${encodeURIComponent(JSON.stringify(options))}`;\n  // resource\n  const resource = {\n    atomName: 'Participateds',\n    atomStaticKey: 'mineFlowParticipateds',\n    atomRevision: -1,\n    atomCategoryId: 'a-base:mine.Flow',\n    resourceType: 'a-base:mine',\n    resourceConfig: JSON.stringify({\n      actionPath,\n    }),\n    resourceRoles: 'root',\n    resourceSorting: 2,\n  };\n  return resource;\n};\n","module.exports = app => {\n  const actionPath = '/a/basefront/attachment/all?scene=mine';\n  // resource\n  const resource = {\n    atomName: 'Attachments',\n    atomStaticKey: 'mineMineAttachments',\n    atomRevision: 4,\n    atomCategoryId: 'a-base:mine.Mine',\n    resourceType: 'a-base:mine',\n    resourceConfig: JSON.stringify({\n      actionPath,\n    }),\n    resourceIcon: '::attachment-line',\n    appKey: 'a-appbooster:appGeneral',\n    resourceRoles: 'root',\n    resourceSorting: 1,\n  };\n  return resource;\n};\n","module.exports = app => {\n  const actionPath = '/a/basefront/comment/all?scene=mine';\n  // resource\n  const resource = {\n    atomName: 'Comments',\n    atomStaticKey: 'mineMineComments',\n    atomRevision: 4,\n    atomCategoryId: 'a-base:mine.Mine',\n    resourceType: 'a-base:mine',\n    resourceConfig: JSON.stringify({\n      actionPath,\n    }),\n    resourceIcon: '::comment-dots',\n    appKey: 'a-appbooster:appGeneral',\n    resourceRoles: 'root',\n    resourceSorting: 2,\n  };\n  return resource;\n};\n","module.exports = app => {\n  const actionPath = '/a/user/user/exports';\n  // resource\n  const resource = {\n    atomName: 'Exports',\n    atomStaticKey: 'mineMineExports',\n    atomRevision: 4,\n    atomCategoryId: 'a-base:mine.Mine',\n    resourceType: 'a-base:mine',\n    resourceConfig: JSON.stringify({\n      actionPath,\n    }),\n    resourceIcon: '::export',\n    appKey: 'a-appbooster:appGeneral',\n    resourceRoles: 'root',\n    resourceSorting: 3,\n  };\n  return resource;\n};\n","module.exports = app => {\n  // actionPath\n  const options = {\n    mode: 'claimings',\n  };\n  const actionPath = `/a/flowtask/flowTask/list?options=${encodeURIComponent(JSON.stringify(options))}`;\n  // resource\n  const resource = {\n    atomName: 'Claimings',\n    atomStaticKey: 'mineTaskClaimings',\n    atomRevision: -1,\n    atomCategoryId: 'a-base:mine.Task',\n    resourceType: 'a-base:mine',\n    resourceConfig: JSON.stringify({\n      actionPath,\n      stats: {\n        params: {\n          module: 'a-flowtask',\n          name: 'taskClaimings',\n        },\n        color: 'red',\n      },\n    }),\n    resourceRoles: 'root',\n    resourceSorting: 1,\n  };\n  return resource;\n};\n","module.exports = app => {\n  // actionPath\n  const options = {\n    mode: 'completeds',\n  };\n  const actionPath = `/a/flowtask/flowTask/list?options=${encodeURIComponent(JSON.stringify(options))}`;\n  // resource\n  const resource = {\n    atomName: 'Completeds',\n    atomStaticKey: 'mineTaskCompleteds',\n    atomRevision: -1,\n    atomCategoryId: 'a-base:mine.Task',\n    resourceType: 'a-base:mine',\n    resourceConfig: JSON.stringify({\n      actionPath,\n    }),\n    resourceRoles: 'root',\n    resourceSorting: 3,\n  };\n  return resource;\n};\n","module.exports = app => {\n  // actionPath\n  const options = {\n    mode: 'handlings',\n  };\n  const actionPath = `/a/flowtask/flowTask/list?options=${encodeURIComponent(JSON.stringify(options))}`;\n  // resource\n  const resource = {\n    atomName: 'Handlings',\n    atomStaticKey: 'mineTaskHandlings',\n    atomRevision: -1,\n    atomCategoryId: 'a-base:mine.Task',\n    resourceType: 'a-base:mine',\n    resourceConfig: JSON.stringify({\n      actionPath,\n      stats: {\n        params: {\n          module: 'a-flowtask',\n          name: 'taskHandlings',\n        },\n        color: 'red',\n      },\n    }),\n    resourceRoles: 'root',\n    resourceSorting: 2,\n  };\n  return resource;\n};\n","module.exports = app => {\n  // actionPath\n  const actionPath = '/a/flowtask/flow/tabs';\n  // resource\n  const resource = {\n    atomName: 'Flows',\n    atomStaticKey: 'mineWorkFlowFlows',\n    atomRevision: 2,\n    atomCategoryId: 'a-base:mine.WorkFlow',\n    resourceType: 'a-base:mine',\n    resourceConfig: JSON.stringify({\n      actionPath,\n      stats: {\n        params: {\n          module: 'a-flow',\n          name: 'flowInitiateds',\n        },\n        color: 'orange',\n      },\n    }),\n    resourceIcon: '::flow-chart',\n    appKey: 'a-app:appDefault',\n    resourceRoles: 'root',\n    resourceSorting: 2,\n  };\n  return resource;\n};\n","module.exports = app => {\n  // actionPath\n  const actionPath = '/a/flowtask/flowTask/tabs';\n  // resource\n  const resource = {\n    atomName: 'Tasks',\n    atomStaticKey: 'mineWorkFlowTasks',\n    atomRevision: 2,\n    atomCategoryId: 'a-base:mine.WorkFlow',\n    resourceType: 'a-base:mine',\n    resourceConfig: JSON.stringify({\n      actionPath,\n      stats: {\n        params: {\n          module: 'a-flowtask',\n          name: 'taskClaimingsHandlings',\n        },\n        color: 'red',\n      },\n    }),\n    resourceIcon: ':flow:activity-user-task',\n    appKey: 'a-app:appDefault',\n    resourceRoles: 'root',\n    resourceSorting: 1,\n  };\n  return resource;\n};\n","module.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  const resourceMines = require('./mines.js')(app);\n  let resources = [\n    // function\n    {\n      atomName: 'Delete Comment',\n      atomStaticKey: 'deleteComment',\n      atomRevision: 0,\n      atomCategoryId: 'a-base:function.Tools',\n      resourceType: 'a-base:function',\n      resourceConfig: null,\n      resourceRoles: 'template.system',\n    },\n    // menu\n    {\n      atomName: 'Create Resource',\n      atomStaticKey: 'createResource',\n      atomRevision: -1,\n      atomCategoryId: 'a-base:menu.BasicProfile',\n      resourceType: 'a-base:menu',\n      resourceConfig: JSON.stringify({\n        module: moduleInfo.relativeName,\n        atomClassName: 'resource',\n        atomAction: 'create',\n      }),\n      resourceIcon: ':outline:software-resource-outline',\n      appKey: 'a-appbooster:appSystem',\n      resourceRoles: 'template.system',\n    },\n    {\n      atomName: 'Resources',\n      atomStaticKey: 'listResource',\n      atomRevision: 2,\n      atomCategoryId: 'a-base:menu.BasicProfile',\n      resourceType: 'a-base:menu',\n      resourceConfig: JSON.stringify({\n        module: moduleInfo.relativeName,\n        atomClassName: 'resource',\n        atomAction: 'read',\n      }),\n      resourceIcon: ':outline:software-resource-outline',\n      appKey: 'a-appbooster:appSystem',\n      resourceRoles: 'template.system',\n    },\n    {\n      atomName: 'Comment List',\n      atomStaticKey: 'listComment',\n      atomRevision: -1,\n      atomCategoryId: 'a-base:menu.Tools',\n      resourceType: 'a-base:menu',\n      resourceConfig: JSON.stringify({\n        actionPath: '/a/basefront/comment/all',\n      }),\n      resourceIcon: '::comment-dots',\n      appKey: 'a-appbooster:appGeneral',\n      resourceRoles: 'root',\n    },\n    {\n      atomName: 'Developer Tool',\n      atomStaticKey: 'developerTool',\n      atomRevision: 4,\n      atomCategoryId: 'a-base:menu.Tools',\n      resourceType: 'a-base:menu',\n      resourceConfig: JSON.stringify({\n        actionModule: 'a-basefront',\n        actionComponent: 'developerTool',\n        name: 'initialize',\n      }),\n      resourceIcon: '::developer-board',\n      appKey: 'a-appbooster:appSystem',\n      resourceRoles: 'template.system',\n    },\n  ];\n  // mine\n  resources = resources.concat(resourceMines);\n  // ok\n  return resources;\n};\n","module.exports = app => {\n  // const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  const __rolesAll = [\n    { atomName: 'root', roleTypeCode: 0 },\n    { atomName: 'anonymous', roleTypeCode: 0 },\n    { atomName: 'authenticated', roleTypeCode: 0 },\n    { atomName: 'template', roleTypeCode: 5 },\n    { atomName: 'system', roleTypeCode: 5 },\n    { atomName: 'registered', roleTypeCode: 0 },\n    { atomName: 'activated', roleTypeCode: 0 },\n    { atomName: 'superuser', roleTypeCode: 0 },\n    { atomName: 'builtIn', roleTypeCode: 0 },\n    { atomName: 'organization', roleTypeCode: 1 },\n    { atomName: 'internal', roleTypeCode: 1 },\n    { atomName: 'external', roleTypeCode: 1 },\n  ];\n  const roles = [];\n  for (const __role of __rolesAll) {\n    roles.push({\n      atomName: __role.atomName,\n      atomStaticKey: `role_${__role.atomName}`,\n      atomRevision: 1,\n      description: '',\n      roleTypeCode: __role.roleTypeCode,\n      resourceRoles: 'template.system',\n    });\n  }\n  // ok\n  return roles;\n};\n","module.exports = app => {\n  const keywords = {};\n  keywords.exists = {\n    async: true,\n    type: 'string',\n    errors: true,\n    compile() {\n      return async function (data, path, rootData, name) {\n        const ctx = this;\n        const res = await ctx.bean.user.exists({ [name]: data });\n        if (res && (!ctx.state.user || res.id !== ctx.state.user.agent.id)) {\n          const errors = [{ keyword: 'x-exists', params: [], message: ctx.text('User Exists') }];\n          throw new app.meta.ajv.ValidationError(errors);\n        }\n        if (!res && data.indexOf('__') > -1) {\n          const errors = [{ keyword: 'x-exists', params: [], message: ctx.text('Cannot Contain __') }];\n          throw new app.meta.ajv.ValidationError(errors);\n        }\n        return true;\n      };\n    },\n  };\n  return keywords;\n};\n","module.exports = app => {\n  const schemas = {};\n  // category\n  schemas.category = {\n    type: 'object',\n    properties: {\n      categoryName: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Category Name',\n        notEmpty: true,\n      },\n      categoryHidden: {\n        type: 'boolean',\n        ebType: 'toggle',\n        ebTitle: 'Hidden',\n        default: false,\n      },\n      categorySorting: {\n        type: 'number',\n        ebType: 'text',\n        ebTitle: 'Sorting',\n      },\n      categoryFlag: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Flag',\n      },\n      categoryCatalog: {\n        type: 'boolean',\n        ebType: 'toggle',\n        ebTitle: 'Catalog',\n        ebReadOnly: true,\n        default: false,\n      },\n      language: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Language',\n        ebReadOnly: true,\n        // notEmpty: true,\n      },\n      categoryUrl: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Url',\n      },\n    },\n  };\n  return schemas;\n};\n","module.exports = app => {\n  const schemas = {};\n  // resource\n  schemas.resource = {\n    type: 'object',\n    properties: {\n      // title\n      __groupTitle: {\n        ebType: 'group-flatten',\n        ebTitle: 'Title',\n      },\n      atomName: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Name',\n        notEmpty: true,\n      },\n      description: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Description',\n      },\n      // config\n      __groupConfig: {\n        ebType: 'group-flatten',\n        ebTitle: 'Config',\n      },\n      resourceConfig: {\n        type: ['string', 'null'],\n        ebType: 'json',\n        ebTitle: 'Config',\n      },\n      // Basic Info\n      __groupBasicInfo: {\n        ebType: 'group-flatten',\n        ebTitle: 'Basic Info',\n      },\n      appKey: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'App Key',\n      },\n      resourceType: {\n        type: 'string',\n        ebType: 'resourceType',\n        ebTitle: 'Resource Type',\n        ebOptionsBlankAuto: true,\n        notEmpty: true,\n      },\n      atomCategoryId: {\n        type: 'number',\n        ebType: 'component',\n        ebTitle: 'Category',\n        ebRender: {\n          module: 'a-baserender',\n          name: 'renderCategoryResource',\n        },\n      },\n      atomTags: {\n        type: ['string', 'null'],\n        ebType: 'tags',\n        ebTitle: 'Tags',\n      },\n      // Extra\n      __groupExtra: {\n        ebType: 'group-flatten',\n        ebTitle: 'Extra',\n      },\n      resourceIcon: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Icon',\n      },\n      resourceSorting: {\n        type: 'number',\n        ebType: 'text',\n        ebTitle: 'Sorting',\n      },\n      atomStaticKey: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'KeyForAtom',\n        ebReadOnly: true,\n        notEmpty: true,\n      },\n    },\n  };\n  // resource search\n  schemas.resourceSearch = {\n    type: 'object',\n    properties: {\n      resourceType: {\n        type: 'string',\n        ebType: 'resourceType',\n        ebTitle: 'Resource Type',\n        ebOptionsBlankAuto: true,\n      },\n    },\n  };\n  return schemas;\n};\n","module.exports = app => {\n  const schemas = {};\n  // role\n  schemas.role = {\n    type: 'object',\n    properties: {\n      // title\n      __groupTitle: {\n        ebType: 'group-flatten',\n        ebTitle: 'Title',\n      },\n      atomName: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Role Name',\n        ebDisplay: {\n          expression: '_meta.host.mode===\"edit\" && system===0',\n        },\n        notEmpty: true,\n      },\n      atomNameView: {\n        ebType: 'text',\n        ebTitle: 'Role Name',\n        ebDisplay: {\n          expression: '_meta.host.mode===\"view\" || system===1',\n        },\n        ebComputed: {\n          expression: 'atomNameLocale',\n          dependencies: ['atomName'],\n          immediate: true,\n        },\n        ebReadOnly: true,\n        notEmpty: true,\n      },\n      description: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Description',\n      },\n      // Basic Info\n      __groupBasicInfo: {\n        ebType: 'group-flatten',\n        ebTitle: 'Basic Info',\n      },\n      roleTypeCode: {\n        type: 'number',\n        ebType: 'dict',\n        ebTitle: 'Role Type',\n        ebOptionsBlankAuto: true,\n        ebParams: {\n          dictKey: 'a-base:dictRoleType',\n          mode: 'select',\n        },\n        notEmpty: {\n          ignoreZero: true,\n        },\n      },\n      sorting: {\n        type: 'number',\n        ebType: 'text',\n        ebTitle: 'Sorting',\n      },\n      leader: {\n        type: 'number',\n        ebType: 'toggle',\n        ebTitle: 'Leader',\n      },\n      // config\n      __groupConfig: {\n        ebType: 'group-flatten',\n        ebTitle: 'Config',\n      },\n      roleConfig: {\n        type: ['string', 'null'],\n        ebType: 'json',\n        ebTitle: 'Config',\n      },\n      // Extra\n      __groupExtra: {\n        ebType: 'group-flatten',\n        ebTitle: 'Extra',\n      },\n      // roleIdParent: {\n      //   type: 'number',\n      //   ebType: 'text',\n      //   ebTitle: 'RoleParent',\n      //   ebReadOnly: true,\n      // },\n      roleIdParentView: {\n        ebType: 'text',\n        ebTitle: 'RoleParent',\n        ebDisplay: {\n          expression: 'roleIdParent>0',\n        },\n        ebComputed: {\n          expression: 'roleNameParentLocale',\n          dependencies: ['roleIdParent'],\n          immediate: true,\n        },\n        ebReadOnly: true,\n      },\n      catalog: {\n        type: 'number',\n        ebType: 'toggle',\n        ebTitle: 'Catalog',\n        ebReadOnly: true,\n      },\n      system: {\n        type: 'number',\n        ebType: 'toggle',\n        ebTitle: 'System',\n        ebReadOnly: true,\n      },\n    },\n  };\n  // role search\n  schemas.roleSearch = {\n    type: 'object',\n    properties: {\n      roleTypeCode: {\n        type: 'number',\n        ebType: 'dict',\n        ebTitle: 'Role Type',\n        ebParams: {\n          dictKey: 'a-base:dictRoleType',\n          mode: 'select',\n        },\n        ebOptionsBlankAuto: true,\n      },\n    },\n  };\n  return schemas;\n};\n","module.exports = app => {\n  const schemas = {};\n  // user\n  schemas.user = {\n    type: 'object',\n    properties: {\n      // title\n      __groupTitle: {\n        ebType: 'group-flatten',\n        ebTitle: 'Title',\n      },\n      userName: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Username',\n        notEmpty: true,\n        'x-exists': true,\n        ebReadOnly: true,\n      },\n      realName: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Realname',\n        notEmpty: true,\n      },\n      // Basic Info\n      __groupBasicInfo: {\n        ebType: 'group-flatten',\n        ebTitle: 'Basic Info',\n      },\n      email: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Email',\n        // notEmpty: true,\n        // format: 'email',\n        'x-exists': true,\n        ebReadOnly: true,\n      },\n      mobile: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Mobile',\n        // notEmpty: true,\n        'x-exists': true,\n        ebReadOnly: true,\n      },\n      motto: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Motto',\n      },\n      locale: {\n        type: 'string',\n        ebType: 'select',\n        ebTitle: 'Locale',\n        ebOptionsUrl: '/a/base/base/locales',\n        ebReadOnly: true,\n      },\n    },\n  };\n  return schemas;\n};\n","module.exports = app => {\n  const schemas = {};\n  // userAdmin\n  schemas.userAdmin = {\n    type: 'object',\n    properties: {\n      // title\n      __groupTitle: {\n        ebType: 'group-flatten',\n        ebTitle: 'Title',\n      },\n      atomName: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Username',\n        notEmpty: true,\n      },\n      realName: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Realname',\n      },\n      avatar: {\n        type: 'string',\n        ebType: 'image',\n        ebTitle: 'Avatar',\n      },\n      // Basic Info\n      __groupBasicInfo: {\n        ebType: 'group-flatten',\n        ebTitle: 'Basic Info',\n      },\n      email: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Email',\n        // notEmpty: true,\n        // format: 'email',\n      },\n      mobile: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Mobile',\n        // notEmpty: true,\n      },\n      motto: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Motto',\n      },\n      locale: {\n        type: 'string',\n        ebType: 'select',\n        ebTitle: 'Locale',\n        ebOptionsUrl: '/a/base/base/locales',\n        ebOptionsBlankAuto: true,\n      },\n    },\n  };\n  // userAdminSearch\n  schemas.userAdminSearch = {\n    type: 'object',\n    properties: {\n      realName: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Realname',\n      },\n      email: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Email',\n        // format: 'email',\n      },\n      mobile: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Mobile',\n      },\n    },\n  };\n  return schemas;\n};\n","module.exports = app => {\n  const schemas = {};\n  schemas.userChangeUserName = {\n    type: 'object',\n    properties: {\n      userNameOld: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'UsernameOld',\n        ebReadOnly: true,\n      },\n      userName: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'UsernameNew',\n        notEmpty: true,\n        'x-exists': true,\n      },\n    },\n  };\n  return schemas;\n};\n","const user = require('./schema/user.js');\nconst userAdmin = require('./schema/userAdmin.js');\nconst userChangeUserName = require('./schema/userChangeUserName.js');\nconst category = require('./schema/category.js');\nconst resource = require('./schema/resource.js');\nconst role = require('./schema/role.js');\n\nmodule.exports = app => {\n  const schemas = {};\n  Object.assign(schemas, user(app));\n  Object.assign(schemas, userAdmin(app));\n  Object.assign(schemas, userChangeUserName(app));\n  Object.assign(schemas, category(app));\n  Object.assign(schemas, resource(app));\n  Object.assign(schemas, role(app));\n  return schemas;\n};\n","module.exports = app => {\n  class AtomController extends app.Controller {\n    async preferredRoles() {\n      const res = await this.ctx.service.atom.preferredRoles({\n        atomClass: this.ctx.request.body.atomClass,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async preferredRole() {\n      const res = await this.ctx.service.atom.preferredRole({\n        atomClass: this.ctx.request.body.atomClass,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async preferredRoleId() {\n      const res = await this.ctx.service.atom.preferredRoleId({\n        atomClass: this.ctx.request.body.atomClass,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async create() {\n      // options\n      const options = this.ctx.request.body.options;\n      // item\n      const item = this.ctx.request.body.item || {};\n      // for safe\n      delete item.atomId;\n      delete item.itemId;\n      delete item.atomStaticKey;\n      delete item.atomRevision;\n      // create\n      const res = await this.ctx.service.atom.create({\n        atomClass: this.ctx.request.body.atomClass,\n        roleIdOwner: this.ctx.request.body.roleIdOwner,\n        item,\n        options,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async atomClass() {\n      const res = await this.ctx.service.atom.atomClass({\n        key: this.ctx.request.body.key,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async read() {\n      const res = await this.ctx.service.atom.read({\n        key: this.ctx.request.body.key,\n        options: this.ctx.request.body.options,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    // options\n    //   where, orders, page, star, label\n    async select() {\n      const options = this.ctx.request.body.options;\n      options.page = this.ctx.bean.util.page(options.page);\n      const items = await this.ctx.service.atom.select({\n        atomClass: this.ctx.request.body.atomClass,\n        options,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.successMore(items, options.page.index, options.page.size);\n    }\n\n    async count() {\n      const options = this.ctx.request.body.options;\n      const count = await this.ctx.service.atom.count({\n        atomClass: this.ctx.request.body.atomClass,\n        options,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(count);\n    }\n\n    async write() {\n      const _options = this.ctx.request.body.options;\n      const saveDraftOnly = _options && _options.saveDraftOnly;\n      const options = {\n        ignoreValidate: false,\n        saveDraftOnly,\n        ignoreNotEmpty: saveDraftOnly,\n      };\n      await this.ctx.service.atom.write({\n        key: this.ctx.request.body.key,\n        item: this.ctx.request.body.item,\n        user: this.ctx.state.user.op,\n        options,\n      });\n      this.ctx.success();\n    }\n\n    async openDraft() {\n      const res = await this.ctx.service.atom.openDraft({\n        key: this.ctx.request.body.key,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async submit() {\n      const options = this.ctx.request.body.options || {};\n      if (!app.meta.isTest) {\n        options.ignoreFlow = false;\n      }\n      // submit\n      const res = await this.ctx.service.atom.submit({\n        key: this.ctx.request.body.key,\n        options,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async writeSubmit() {\n      // write\n      const options = { ignoreValidate: false };\n      await this.ctx.service.atom.write({\n        key: this.ctx.request.body.key,\n        item: this.ctx.request.body.item,\n        user: this.ctx.state.user.op,\n        options,\n      });\n      // submit\n      await this.submit();\n    }\n\n    async delete() {\n      await this.ctx.service.atom.delete({\n        key: this.ctx.request.body.key,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success();\n    }\n\n    async deleteBulk() {\n      const res = await this.ctx.service.atom.deleteBulk({\n        atomClass: this.ctx.request.body.atomClass,\n        keys: this.ctx.request.body.keys,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async clone() {\n      const res = await this.ctx.service.atom.clone({\n        key: this.ctx.request.body.key,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async enable() {\n      const res = await this.ctx.service.atom.enable({\n        key: this.ctx.request.body.key,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async disable() {\n      const res = await this.ctx.service.atom.disable({\n        key: this.ctx.request.body.key,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async exportBulk() {\n      const res = await this.ctx.service.atom.exportBulk({\n        atomClass: this.ctx.request.body.atomClass,\n        options: this.ctx.request.body.options,\n        fields: this.ctx.request.body.fields,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async importBulk() {\n      const res = await this.ctx.service.atom.importBulk({\n        atomClass: this.ctx.request.body.atomClass,\n        file: this.ctx.request.body.file,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async star() {\n      const res = await this.ctx.service.atom.star({\n        key: this.ctx.request.body.key,\n        atom: this.ctx.request.body.atom,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async readCount() {\n      const res = await this.ctx.service.atom.readCount({\n        key: this.ctx.request.body.key,\n        atom: this.ctx.request.body.atom,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async stats() {\n      const res = await this.ctx.service.atom.stats({\n        atomIds: this.ctx.request.body.atomIds,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async labels() {\n      const res = await this.ctx.service.atom.labels({\n        key: this.ctx.request.body.key,\n        atom: this.ctx.request.body.atom,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async actions() {\n      const res = await this.ctx.service.atom.actions({\n        key: this.ctx.request.body.key,\n        basic: this.ctx.request.body.basic,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async actionsBulk() {\n      const res = await this.ctx.service.atom.actionsBulk({\n        atomClass: this.ctx.request.body.atomClass,\n        stage: this.ctx.request.body.stage,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async checkRightAction() {\n      const res = await this.ctx.service.atom.checkRightAction({\n        key: this.ctx.request.body.key,\n        action: this.ctx.request.body.action,\n        stage: this.ctx.request.body.stage,\n        user: this.ctx.state.user.op,\n        checkFlow: this.ctx.request.body.checkFlow,\n      });\n      this.ctx.success(res);\n    }\n\n    async schema() {\n      const res = await this.ctx.service.atom.schema({\n        atomClass: this.ctx.request.body.atomClass,\n        schema: this.ctx.request.body.schema,\n      });\n      this.ctx.success(res);\n    }\n\n    async validator() {\n      const res = await this.ctx.service.atom.validator({\n        atomClass: this.ctx.request.body.atomClass,\n      });\n      this.ctx.success(res);\n    }\n  }\n  return AtomController;\n};\n","module.exports = app => {\n  class AtomActionController extends app.Controller {}\n\n  return AtomActionController;\n};\n","module.exports = app => {\n  class AtomClassController extends app.Controller {\n    async validatorSearch() {\n      const res = await this.ctx.service.atomClass.validatorSearch({\n        atomClass: this.ctx.request.body.atomClass,\n      });\n      this.ctx.success(res);\n    }\n\n    async checkRightCreate() {\n      const res = await this.ctx.service.atomClass.checkRightCreate({\n        atomClass: this.ctx.request.body.atomClass,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async atomClass() {\n      const res = await this.ctx.service.atomClass.atomClass({\n        atomClass: this.ctx.request.body.atomClass,\n      });\n      this.ctx.success(res);\n    }\n\n    async atomClassesUser() {\n      const res = await this.ctx.service.atomClass.atomClassesUser({\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async actionsUser() {\n      const res = await this.ctx.service.atomClass.actionsUser({\n        atomClass: this.ctx.request.body.atomClass,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n  }\n\n  return AtomClassController;\n};\n","module.exports = app => {\n  class AuthController extends app.Controller {\n    // return current user auth info\n    //   { op:{id},agent:{id},provider}\n    async echo() {\n      const info = await this.ctx.bean.auth.echo();\n      this.ctx.success(info);\n    }\n\n    async check() {\n      const info = await this.ctx.bean.auth.check();\n      this.ctx.success(info);\n    }\n\n    async logout() {\n      const info = await this.ctx.bean.auth.logout();\n      this.ctx.success(info);\n    }\n  }\n\n  return AuthController;\n};\n","const require3 = require('require3');\nconst qr = require3('qr-image');\n\nmodule.exports = app => {\n  class BaseController extends app.Controller {\n    modules() {\n      const res = this.ctx.service.base.modules();\n      this.ctx.success(res);\n    }\n\n    locales() {\n      const res = this.ctx.service.base.locales();\n      this.ctx.success(res);\n    }\n\n    resourceTypes() {\n      const res = this.ctx.service.base.resourceTypes();\n      this.ctx.success(res);\n    }\n\n    atomClasses() {\n      const res = this.ctx.service.base.atomClasses();\n      this.ctx.success(res);\n    }\n\n    actions() {\n      const res = this.ctx.service.base.actions();\n      this.ctx.success(res);\n    }\n\n    themes() {\n      const res = this.ctx.service.base.themes();\n      this.ctx.success(res);\n    }\n\n    async qrcode() {\n      const query = this.ctx.request.query;\n      const img = qr.image(query.text || '', {\n        type: query.type || 'png',\n        size: query.size || 10,\n        margin: query.margin || 4,\n        ec_level: query.ec_level || 'M',\n      });\n      // ok\n      this.ctx.status = 200;\n      this.ctx.type = 'image/png';\n      this.ctx.body = img;\n    }\n  }\n\n  return BaseController;\n};\n","module.exports = app => {\n  class CategoryController extends app.Controller {\n    async child() {\n      const atomClass = this.ctx.request.body.atomClass;\n      const res = await this.ctx.service.category.child({\n        atomClass,\n        language: this.ctx.request.body.language,\n        categoryId: this.ctx.request.body.categoryId,\n        categoryName: this.ctx.request.body.categoryName,\n        categoryHidden: this.ctx.request.body.categoryHidden,\n        categoryFlag: this.ctx.request.body.categoryFlag,\n        setLocale: this.ctx.request.body.setLocale,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async children() {\n      const atomClass = this.ctx.request.body.atomClass;\n      const list = await this.ctx.service.category.children({\n        atomClass,\n        language: this.ctx.request.body.language,\n        categoryId: this.ctx.request.body.categoryId,\n        categoryName: this.ctx.request.body.categoryName,\n        categoryHidden: this.ctx.request.body.categoryHidden,\n        categoryFlag: this.ctx.request.body.categoryFlag,\n        setLocale: this.ctx.request.body.setLocale,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success({ list });\n    }\n\n    async tree() {\n      const atomClass = this.ctx.request.body.atomClass;\n      const list = await this.ctx.service.category.tree({\n        atomClass,\n        language: this.ctx.request.body.language,\n        categoryId: this.ctx.request.body.categoryId,\n        categoryHidden: this.ctx.request.body.categoryHidden,\n        categoryFlag: this.ctx.request.body.categoryFlag,\n        setLocale: this.ctx.request.body.setLocale,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success({ list });\n    }\n\n    async add() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const atomClass = this.ctx.request.body.atomClass;\n      const res = await this.ctx.service.category.add({\n        atomClass,\n        data: this.ctx.request.body.data,\n      });\n      this.ctx.success(res);\n    }\n\n    async delete() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      // need not param:atomClass\n      const res = await this.ctx.service.category.delete({\n        categoryId: this.ctx.request.body.categoryId,\n      });\n      this.ctx.success(res);\n    }\n\n    async move() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      // need not param:atomClass\n      const res = await this.ctx.service.category.move({\n        categoryId: this.ctx.request.body.categoryId,\n        categoryIdParent: this.ctx.request.body.categoryIdParent,\n      });\n      this.ctx.success(res);\n    }\n\n    async item() {\n      // need not param:atomClass\n      const data = await this.ctx.service.category.item({\n        categoryId: this.ctx.request.body.categoryId,\n        setLocale: this.ctx.request.body.setLocale,\n      });\n      this.ctx.success(data);\n    }\n\n    async save() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      // need not param:atomClass\n      const res = await this.ctx.service.category.save({\n        categoryId: this.ctx.request.body.categoryId,\n        data: this.ctx.request.body.data,\n      });\n      this.ctx.success(res);\n    }\n\n    async relativeTop() {\n      // need not param:atomClass\n      const res = await this.ctx.service.category.relativeTop({\n        categoryId: this.ctx.request.body.categoryId,\n        setLocale: this.ctx.request.body.setLocale,\n      });\n      this.ctx.success(res);\n    }\n\n    async parseCategoryName() {\n      const atomClass = this.ctx.request.body.atomClass;\n      const category = await this.ctx.service.category.parseCategoryName({\n        atomClass,\n        language: this.ctx.request.body.language,\n        categoryName: this.ctx.request.body.categoryName,\n        categoryIdParent: this.ctx.request.body.categoryIdParent,\n        force: false,\n      });\n      this.ctx.success(category);\n    }\n  }\n  return CategoryController;\n};\n","module.exports = app => {\n  class CommentController extends app.Controller {\n    async all() {\n      const options = this.ctx.request.body.options;\n      options.comment = 1;\n      const res = await this.ctx.meta.util.performAction({\n        method: 'post',\n        url: '/a/base/atom/select',\n        body: {\n          atomClass: this.ctx.request.body.atomClass,\n          options,\n        },\n      });\n      this.ctx.success(res);\n    }\n\n    async list() {\n      const options = this.ctx.request.body.options;\n      options.page = this.ctx.bean.util.page(options.page);\n      const items = await this.ctx.service.comment.list({\n        key: this.ctx.request.body.key,\n        options,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.successMore(items, options.page.index, options.page.size);\n    }\n\n    async count() {\n      const count = await this.ctx.service.comment.count({\n        key: this.ctx.request.body.key,\n        options: this.ctx.request.body.options,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(count);\n    }\n\n    async item() {\n      const res = await this.ctx.service.comment.item({\n        key: this.ctx.request.body.key,\n        data: this.ctx.request.body.data,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async save() {\n      const res = await this.ctx.service.comment.save({\n        key: this.ctx.request.body.key,\n        data: this.ctx.request.body.data,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async delete() {\n      const res = await this.ctx.service.comment.delete({\n        key: this.ctx.request.body.key,\n        data: this.ctx.request.body.data,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async heart() {\n      const res = await this.ctx.service.comment.heart({\n        key: this.ctx.request.body.key,\n        data: this.ctx.request.body.data,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n  }\n  return CommentController;\n};\n","module.exports = app => {\n  class DbController extends app.Controller {\n    async insert() {\n      const { tableName, data } = this.ctx.request.body;\n      const res = await this.ctx.service.db.insert({\n        tableName,\n        data,\n      });\n      this.ctx.success(res);\n    }\n\n    async select() {\n      const { tableName, options } = this.ctx.request.body;\n      const res = await this.ctx.service.db.select({\n        tableName,\n        options,\n      });\n      this.ctx.success(res);\n    }\n\n    async get() {\n      const { tableName, where } = this.ctx.request.body;\n      const res = await this.ctx.service.db.get({\n        tableName,\n        where,\n      });\n      this.ctx.success(res);\n    }\n\n    async count() {\n      const { tableName, where } = this.ctx.request.body;\n      const res = await this.ctx.service.db.count({\n        tableName,\n        where,\n      });\n      this.ctx.success(res);\n    }\n\n    async update() {\n      const { tableName, data, options } = this.ctx.request.body;\n      const res = await this.ctx.service.db.update({\n        tableName,\n        data,\n        options,\n      });\n      this.ctx.success(res);\n    }\n\n    async delete() {\n      const { tableName, where } = this.ctx.request.body;\n      const res = await this.ctx.service.db.delete({\n        tableName,\n        where,\n      });\n      this.ctx.success(res);\n    }\n\n    async query() {\n      const { sql, params } = this.ctx.request.body;\n      const res = await this.ctx.service.db.query({\n        sql,\n        params,\n      });\n      this.ctx.success(res);\n    }\n\n    async queryOne() {\n      const { sql, params } = this.ctx.request.body;\n      const res = await this.ctx.service.db.queryOne({\n        sql,\n        params,\n      });\n      this.ctx.success(res);\n    }\n\n    async iid() {\n      const res = await this.ctx.service.db.iid();\n      this.ctx.success(res);\n    }\n  }\n  return DbController;\n};\n","module.exports = app => {\n  class JwtController extends app.Controller {\n    async create() {\n      const res = await this.ctx.service.jwt.create({\n        scene: this.ctx.request.body.scene,\n      });\n      this.ctx.success(res);\n    }\n  }\n  return JwtController;\n};\n","module.exports = app => {\n  class LayoutConfigController extends app.Controller {\n    async load() {\n      const res = await this.service.layoutConfig.load({\n        module: this.ctx.request.body.module,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async save() {\n      const res = await this.service.layoutConfig.save({\n        module: this.ctx.request.body.module,\n        data: this.ctx.request.body.data,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async saveKey() {\n      const res = await this.service.layoutConfig.saveKey({\n        module: this.ctx.request.body.module,\n        key: this.ctx.request.body.key,\n        value: this.ctx.request.body.value,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n  }\n  return LayoutConfigController;\n};\n","module.exports = app => {\n  class ResourceController extends app.Controller {\n    // options\n    //   where, orders, page, star, label, resourceType, locale\n    async select() {\n      const options = this.ctx.request.body.options || {};\n      options.page = this.ctx.bean.util.page(options.page, false); // false\n      const items = await this.ctx.service.resource.select({\n        atomClass: this.ctx.request.body.atomClass,\n        options,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.successMore(items, options.page.index, options.page.size);\n    }\n\n    async read() {\n      const res = await this.ctx.service.resource.read({\n        atomStaticKey: this.ctx.request.body.atomStaticKey,\n        options: this.ctx.request.body.options,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async check() {\n      const res = await this.ctx.service.resource.check({\n        atomStaticKeys: this.ctx.request.body.atomStaticKeys,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async resourceRoles() {\n      const list = await this.ctx.service.resource.resourceRoles({\n        key: this.ctx.request.body.key,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success({ list });\n    }\n\n    async resourceRoleRemove() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const res = await this.ctx.service.resource.resourceRoleRemove({\n        key: this.ctx.request.body.key,\n        data: this.ctx.request.body.data,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async resourceRoleAdd() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const res = await this.ctx.service.resource.resourceRoleAdd({\n        key: this.ctx.request.body.key,\n        data: this.ctx.request.body.data,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n  }\n\n  return ResourceController;\n};\n","module.exports = app => {\n  class TagController extends app.Controller {\n    async list() {\n      const atomClass = this.ctx.request.body.atomClass;\n      const list = await this.ctx.service.tag.list({\n        atomClass,\n        options: this.ctx.request.body.options,\n      });\n      this.ctx.success({ list });\n    }\n\n    async add() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const atomClass = this.ctx.request.body.atomClass;\n      const res = await this.ctx.service.tag.add({\n        atomClass,\n        data: this.ctx.request.body.data,\n      });\n      this.ctx.success(res);\n    }\n\n    async save() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      // need not param:atomClass\n      const res = await this.ctx.service.tag.save({\n        tagId: this.ctx.request.body.tagId,\n        data: this.ctx.request.body.data,\n      });\n      this.ctx.success(res);\n    }\n\n    async delete() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      // need not param:atomClass\n      const res = await this.ctx.service.tag.delete({\n        tagId: this.ctx.request.body.tagId,\n      });\n      this.ctx.success(res);\n    }\n  }\n  return TagController;\n};\n","module.exports = app => {\n  class UserController extends app.Controller {\n    async getLabels() {\n      const res = await this.ctx.service.user.getLabels({\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async setLabels() {\n      await this.ctx.service.user.setLabels({\n        labels: this.ctx.request.body.labels,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success();\n    }\n  }\n  return UserController;\n};\n","module.exports = app => {\n  class UtilController extends app.Controller {\n    async performAction() {\n      const res = await this.ctx.service.util.performAction({\n        params: JSON.parse(this.ctx.request.query.params),\n      });\n      this.ctx.success(res);\n    }\n\n    async performActions() {\n      const res = await this.ctx.service.util.performActions({\n        actions: this.ctx.request.body.actions,\n      });\n      this.ctx.success(res);\n    }\n  }\n  return UtilController;\n};\n","const atom = require('./controller/atom.js');\nconst atomAction = require('./controller/atomAction.js');\nconst atomClass = require('./controller/atomClass.js');\nconst auth = require('./controller/auth.js');\nconst base = require('./controller/base.js');\nconst comment = require('./controller/comment.js');\nconst resource = require('./controller/resource.js');\nconst jwt = require('./controller/jwt.js');\nconst layoutConfig = require('./controller/layoutConfig.js');\nconst user = require('./controller/user.js');\nconst category = require('./controller/category.js');\nconst tag = require('./controller/tag.js');\nconst util = require('./controller/util.js');\nconst db = require('./controller/db.js');\n\nmodule.exports = app => {\n  const controllers = {\n    atom,\n    atomAction,\n    atomClass,\n    auth,\n    base,\n    comment,\n    resource,\n    jwt,\n    layoutConfig,\n    user,\n    category,\n    tag,\n    util,\n    db,\n  };\n  return controllers;\n};\n","const config = require('./config/config.js');\nconst locales = require('./config/locales.js');\nconst errors = require('./config/errors.js');\nconst AtomBaseFn = require('./bean/bean.atomBase.js');\n\n// eslint-disable-next-line\nmodule.exports = app => {\n  // base\n  app.meta.AtomBase = AtomBaseFn(app);\n\n  // aops\n  const aops = require('./aops.js')(app);\n  // beans\n  const beans = require('./beans.js')(app);\n  // routes\n  const routes = require('./routes.js')(app);\n  // controllers\n  const controllers = require('./controllers.js')(app);\n  // services\n  const services = require('./services.js')(app);\n  // models\n  const models = require('./models.js')(app);\n  // constants\n  const constants = require('./config/constants.js')(app);\n  // meta\n  const meta = require('./meta.js')(app);\n\n  return {\n    aops,\n    beans,\n    routes,\n    controllers,\n    services,\n    models,\n    config,\n    locales,\n    errors,\n    constants,\n    meta,\n  };\n};\n","module.exports = app => {\n  // const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  // keywords\n  const keywords = require('./config/validation/keywords.js')(app);\n  // schemas\n  const schemas = require('./config/validation/schemas.js')(app);\n  // static\n  const staticDicts = require('./config/static/dicts.js')(app);\n  const staticResources = require('./config/static/resources.js')(app);\n  const staticRoles = require('./config/static/roles.js')(app);\n  // socketio\n  const socketioComment = require('./config/socketio/comment.js')(app);\n  // meta\n  const meta = {\n    base: {\n      atoms: {\n        resource: {\n          info: {\n            bean: 'resource',\n            title: 'Resource',\n            tableName: 'aResource',\n            tableNameModes: {\n              default: 'aResourceView',\n            },\n            inner: true,\n            category: true,\n            tag: true,\n            resource: true,\n            comment: false,\n            attachment: false,\n            layout: {\n              config: {\n                atomList: 'a-baseadmin:layoutAtomListResource',\n              },\n            },\n          },\n          actions: {\n            write: {\n              enableOnStatic: true,\n            },\n          },\n          validator: 'resource',\n          search: {\n            validator: 'resourceSearch',\n          },\n        },\n        role: {\n          info: {\n            bean: 'role',\n            title: 'Role',\n            tableName: 'aRole',\n            tableNameModes: {\n              default: 'aRoleView',\n              includes: 'aRoleIncludesView',\n              userRoles: 'aRoleUserRolesView',\n            },\n            resource: true,\n            simple: true,\n            history: false,\n            inner: true,\n            comment: false,\n            attachment: false,\n            dict: {\n              fields: {\n                roleTypeCode: {\n                  translate: false,\n                  // dictKey: 'a-base:dictRoleType',\n                },\n              },\n            },\n            layout: {\n              config: {\n                atomList: 'a-baseadmin:layoutAtomListRole',\n                atomItem: 'a-baseadmin:layoutAtomItemRole',\n              },\n            },\n          },\n          actions: {\n            write: {\n              enableOnStatic: true,\n            },\n            delete: {\n              actionModule: 'a-baseadmin',\n              actionComponent: 'actionRole',\n            },\n            clone: {\n              actionModule: 'a-baseadmin',\n              actionComponent: 'actionRole',\n            },\n            move: {\n              code: 101,\n              title: 'Move',\n              actionModule: 'a-baseadmin',\n              actionComponent: 'actionRole',\n              icon: { f7: ':outline:folder-transfer-outline' },\n            },\n            addChild: {\n              code: 102,\n              title: 'AddChild',\n              actionModule: 'a-baseadmin',\n              actionComponent: 'actionRole',\n              icon: { f7: ':outline:add-circle-outline' },\n              enableOnStatic: true,\n            },\n            roleUsers: {\n              code: 103,\n              title: 'Users',\n              actionModule: 'a-baseadmin',\n              actionComponent: 'actionRole',\n              icon: { f7: ':outline:group-outline' },\n              enableOnStatic: true,\n            },\n            includes: {\n              code: 104,\n              title: 'Includes',\n              actionModule: 'a-baseadmin',\n              actionComponent: 'actionRole',\n              icon: { f7: ':role:role' },\n              enableOnStatic: true,\n            },\n            resourceAuthorizations: {\n              code: 105,\n              title: 'Resource Authorizations',\n              actionModule: 'a-baseadmin',\n              actionComponent: 'actionRole',\n              icon: { f7: ':outline:archive-lock-outline' },\n              enableOnStatic: true,\n            },\n            atomAuthorizations: {\n              code: 106,\n              title: 'Atom Authorizations',\n              actionModule: 'a-baseadmin',\n              actionComponent: 'actionRole',\n              icon: { f7: ':outline:database-lock-outline' },\n              enableOnStatic: true,\n            },\n            // buildBulk: {\n            //   code: 201,\n            //   title: 'Build',\n            //   actionModule: 'a-baseadmin',\n            //   actionComponent: 'actionRole',\n            //   icon: { f7: ':outline:build-circle-outline' },\n            //   bulk: true,\n            //   select: false,\n            //   stage: 'formal',\n            // },\n          },\n          validator: 'role',\n          search: {\n            validator: 'roleSearch',\n          },\n        },\n        user: {\n          info: {\n            bean: 'user',\n            title: 'User',\n            tableName: 'aUser',\n            tableNameModes: {},\n            resource: false,\n            simple: true,\n            history: false,\n            inner: true,\n            comment: false,\n            attachment: false,\n            // fields: {\n            //   custom: ['disabled', 'anonymous', 'activated', 'emailConfirmed', 'mobileVerified'],\n            // },\n            layout: {\n              config: {\n                atomList: 'a-baseadmin:layoutAtomListUser',\n                atomItem: 'a-baseadmin:layoutAtomItemUser',\n              },\n            },\n          },\n          actions: {\n            userRoles: {\n              code: 101,\n              title: 'Roles',\n              actionModule: 'a-baseadmin',\n              actionComponent: 'actionUser',\n              icon: { f7: ':role:role' },\n            },\n            resourceAuthorizations: {\n              code: 102,\n              title: 'Resource Authorizations',\n              actionModule: 'a-baseadmin',\n              actionComponent: 'actionUser',\n              icon: { f7: ':outline:archive-lock-outline' },\n            },\n            atomAuthorizations: {\n              code: 103,\n              title: 'Atom Authorizations',\n              actionModule: 'a-baseadmin',\n              actionComponent: 'actionUser',\n              icon: { f7: ':outline:database-lock-outline' },\n            },\n          },\n          validator: 'userAdmin',\n          search: {\n            validator: 'userAdminSearch',\n          },\n        },\n      },\n      resources: {\n        function: {\n          title: 'Function',\n          validator: null,\n        },\n        menu: {\n          title: 'Menu',\n        },\n        mine: {\n          title: 'Mine',\n        },\n      },\n      statics: {\n        'a-dict.dict': {\n          items: staticDicts,\n        },\n        'a-base.resource': {\n          items: staticResources,\n        },\n        'a-base.role': {\n          items: staticRoles,\n        },\n      },\n    },\n    sequence: {\n      providers: {\n        draft: {\n          bean: {\n            module: 'a-sequence',\n            name: 'simple',\n          },\n          start: 0,\n        },\n        userName: {\n          bean: {\n            module: 'a-sequence',\n            name: 'simple',\n          },\n          start: 0,\n        },\n        flowAction: {\n          bean: {\n            module: 'a-sequence',\n            name: 'simple',\n          },\n          start: 10000,\n        },\n      },\n    },\n    validation: {\n      validators: {\n        user: {\n          schemas: 'user',\n        },\n        userAdmin: {\n          schemas: 'userAdmin',\n        },\n        userAdminSearch: {\n          schemas: 'userAdminSearch',\n        },\n        userChangeUserName: {\n          schemas: 'userChangeUserName',\n        },\n        category: {\n          schemas: 'category',\n        },\n        resource: {\n          schemas: 'resource',\n        },\n        resourceSearch: {\n          schemas: 'resourceSearch',\n        },\n        role: {\n          schemas: 'role',\n        },\n        roleSearch: {\n          schemas: 'roleSearch',\n        },\n      },\n      keywords: {\n        'x-exists': keywords.exists,\n      },\n      schemas,\n    },\n    event: {\n      declarations: {\n        loginInfo: 'Login Info',\n        userAdd: 'User Add',\n        userVerify: 'User Verify',\n        accountMigration: 'Account Migration',\n      },\n    },\n    stats: {\n      providers: {\n        drafts: {\n          user: true,\n          bean: {\n            module: 'a-stats',\n            name: 'deps',\n          },\n          inheritNameSub: true,\n          dependencies: ['a-base:draftsDrafting', 'a-base:draftsFlowing'],\n        },\n        draftsDrafting: {\n          user: true,\n          bean: 'draftsCommon',\n        },\n        draftsFlowing: {\n          user: true,\n          bean: 'draftsCommon',\n        },\n        stars: {\n          user: true,\n          bean: 'stars',\n        },\n        labels: {\n          user: true,\n          bean: 'labels',\n        },\n        starsLabels: {\n          user: true,\n          bean: 'starsLabels',\n          dependencies: ['stars', 'labels'],\n          dependents: ['a-user:user'],\n        },\n      },\n    },\n    socketio: {\n      messages: {\n        comment: socketioComment,\n      },\n    },\n  };\n  return meta;\n};\n","module.exports = app => {\n  class Atom extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aAtom', options: { disableDeleted: false } });\n    }\n  }\n\n  return Atom;\n};\n","module.exports = app => {\n  class AtomAction extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aAtomAction', options: { disableDeleted: false } });\n    }\n  }\n\n  return AtomAction;\n};\n","module.exports = app => {\n  class AtomClass extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aAtomClass', options: { disableDeleted: false } });\n    }\n  }\n\n  return AtomClass;\n};\n","module.exports = app => {\n  class AtomLabel extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aAtomLabel', options: { disableDeleted: true } });\n    }\n  }\n\n  return AtomLabel;\n};\n","module.exports = app => {\n  class AtomLabelRef extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aAtomLabelRef', options: { disableDeleted: true } });\n    }\n  }\n\n  return AtomLabelRef;\n};\n","module.exports = app => {\n  class AtomStar extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aAtomStar', options: { disableDeleted: true } });\n    }\n  }\n\n  return AtomStar;\n};\n","module.exports = app => {\n  class Auth extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aAuth', options: { disableDeleted: true } });\n    }\n  }\n\n  return Auth;\n};\n","module.exports = app => {\n  class AuthProvider extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aAuthProvider', options: { disableDeleted: true } });\n    }\n  }\n\n  return AuthProvider;\n};\n","module.exports = app => {\n  class Category extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aCategory', options: { disableDeleted: false } });\n    }\n  }\n  return Category;\n};\n","module.exports = app => {\n  class Comment extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aComment', options: { disableDeleted: false } });\n    }\n  }\n\n  return Comment;\n};\n","module.exports = app => {\n  class CommentHeart extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aCommentHeart', options: { disableDeleted: true } });\n    }\n  }\n\n  return CommentHeart;\n};\n","module.exports = app => {\n  class CommentView extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aViewComment', options: { disableDeleted: false } });\n    }\n  }\n\n  return CommentView;\n};\n","module.exports = app => {\n  class Label extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aLabel', options: { disableDeleted: true } });\n    }\n  }\n\n  return Label;\n};\n","module.exports = app => {\n  class Resource extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aResource', options: { disableDeleted: false } });\n    }\n  }\n  return Resource;\n};\n","module.exports = app => {\n  class ResourceLocale extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aResourceLocale', options: { disableDeleted: true } });\n    }\n  }\n  return ResourceLocale;\n};\n","module.exports = app => {\n  class ResourceRole extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aResourceRole', options: { disableDeleted: true } });\n    }\n  }\n  return ResourceRole;\n};\n","module.exports = app => {\n  class Role extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aRole', options: { disableDeleted: true } });\n    }\n  }\n\n  return Role;\n};\n","module.exports = app => {\n  class RoleInc extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aRoleInc', options: { disableDeleted: true } });\n    }\n  }\n\n  return RoleInc;\n};\n","module.exports = app => {\n  class RoleIncRef extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aRoleIncRef', options: { disableDeleted: true } });\n    }\n  }\n\n  return RoleIncRef;\n};\n","module.exports = app => {\n  class RoleRef extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aRoleRef', options: { disableDeleted: true } });\n    }\n\n    async getParent({ roleId, level = 1 }) {\n      const roleRef = await this.get({\n        roleId,\n        level,\n      });\n      return roleRef;\n    }\n  }\n\n  return RoleRef;\n};\n","module.exports = app => {\n  class RoleRight extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aRoleRight', options: { disableDeleted: true } });\n    }\n  }\n\n  return RoleRight;\n};\n","module.exports = app => {\n  class RoleRightRef extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aRoleRightRef', options: { disableDeleted: true } });\n    }\n  }\n\n  return RoleRightRef;\n};\n","module.exports = app => {\n  class Tag extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aTag', options: { disableDeleted: false } });\n    }\n  }\n  return Tag;\n};\n","module.exports = app => {\n  class TagRef extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aTagRef', options: { disableDeleted: true } });\n    }\n  }\n  return TagRef;\n};\n","module.exports = app => {\n  class User extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aUser', options: { disableDeleted: false } });\n    }\n  }\n\n  return User;\n};\n","module.exports = app => {\n  class UserAgent extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aUserAgent', options: { disableDeleted: true } });\n    }\n  }\n\n  return UserAgent;\n};\n","module.exports = app => {\n  class UserRole extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aUserRole', options: { disableDeleted: true } });\n    }\n  }\n\n  return UserRole;\n};\n","const atom = require('./model/atom.js');\nconst atomAction = require('./model/atomAction.js');\nconst atomClass = require('./model/atomClass.js');\nconst auth = require('./model/auth.js');\nconst authProvider = require('./model/authProvider.js');\nconst role = require('./model/role.js');\nconst roleInc = require('./model/roleInc.js');\nconst roleIncRef = require('./model/roleIncRef.js');\nconst roleRef = require('./model/roleRef.js');\nconst roleRight = require('./model/roleRight.js');\nconst roleRightRef = require('./model/roleRightRef.js');\nconst user = require('./model/user.js');\nconst userAgent = require('./model/userAgent.js');\nconst userRole = require('./model/userRole.js');\nconst label = require('./model/label.js');\nconst atomLabel = require('./model/atomLabel.js');\nconst atomLabelRef = require('./model/atomLabelRef.js');\nconst atomStar = require('./model/atomStar.js');\nconst comment = require('./model/comment.js');\nconst commentView = require('./model/commentView.js');\nconst commentHeart = require('./model/commentHeart.js');\nconst category = require('./model/category.js');\nconst tag = require('./model/tag.js');\nconst tagRef = require('./model/tagRef.js');\nconst resource = require('./model/resource.js');\nconst resourceLocale = require('./model/resourceLocale.js');\nconst resourceRole = require('./model/resourceRole.js');\n\nmodule.exports = app => {\n  const models = {\n    atom,\n    atomAction,\n    atomClass,\n    auth,\n    authProvider,\n    role,\n    roleInc,\n    roleIncRef,\n    roleRef,\n    roleRight,\n    roleRightRef,\n    user,\n    userAgent,\n    userRole,\n    label,\n    atomLabel,\n    atomLabelRef,\n    atomStar,\n    comment,\n    commentView,\n    commentHeart,\n    category,\n    tag,\n    tagRef,\n    resource,\n    resourceLocale,\n    resourceRole,\n  };\n  return models;\n};\n","module.exports = app => {\n  const routes = [\n    // base\n    { method: 'post', path: 'base/modules', controller: 'base' },\n    { method: 'post', path: 'base/locales', controller: 'base' },\n    { method: 'post', path: 'base/resourceTypes', controller: 'base' },\n    { method: 'post', path: 'base/atomClasses', controller: 'base' },\n    { method: 'post', path: 'base/actions', controller: 'base' },\n    { method: 'get', path: 'base/qrcode', controller: 'base', meta: { auth: { enable: false } } },\n    { method: 'post', path: 'base/themes', controller: 'base' },\n    // atom\n    { method: 'post', path: 'atom/preferredRoles', controller: 'atom' },\n    { method: 'post', path: 'atom/preferredRole', controller: 'atom' },\n    { method: 'post', path: 'atom/preferredRoleId', controller: 'atom' },\n    {\n      method: 'post',\n      path: 'atom/create',\n      controller: 'atom',\n      middlewares: 'transaction',\n      meta: { right: { type: 'atom', action: 'create' } },\n    },\n    { method: 'post', path: 'atom/atomClass', controller: 'atom', meta: { right: { type: 'atom', action: 'read' } } },\n    { method: 'post', path: 'atom/read', controller: 'atom', meta: { right: { type: 'atom', action: 'read' } } },\n    { method: 'post', path: 'atom/select', controller: 'atom' },\n    { method: 'post', path: 'atom/count', controller: 'atom' },\n    {\n      method: 'post',\n      path: 'atom/write',\n      controller: 'atom',\n      middlewares: 'transaction',\n      meta: { right: { type: 'atom', action: 'write', stage: 'draft' } },\n    },\n    {\n      method: 'post',\n      path: 'atom/openDraft',\n      controller: 'atom',\n      middlewares: 'transaction',\n      meta: { right: { type: 'atom', action: 'write' } },\n    },\n    {\n      method: 'post',\n      path: 'atom/submit',\n      controller: 'atom',\n      middlewares: 'transaction',\n      meta: { right: { type: 'atom', action: 'write', stage: 'draft' } },\n    },\n    {\n      method: 'post',\n      path: 'atom/writeSubmit',\n      controller: 'atom',\n      middlewares: 'transaction',\n      meta: { right: { type: 'atom', action: 'write', stage: 'draft' } },\n    },\n    {\n      method: 'post',\n      path: 'atom/delete',\n      controller: 'atom',\n      middlewares: 'transaction',\n      meta: { right: { type: 'atom', action: 'delete' } },\n    },\n    {\n      method: 'post',\n      path: 'atom/clone',\n      controller: 'atom',\n      middlewares: 'transaction',\n      meta: { right: { type: 'atom', action: 'clone' } },\n    },\n    {\n      method: 'post',\n      path: 'atom/enable',\n      controller: 'atom',\n      middlewares: 'transaction',\n      meta: { right: { type: 'atom', action: 'enable' } },\n    },\n    {\n      method: 'post',\n      path: 'atom/disable',\n      controller: 'atom',\n      middlewares: 'transaction',\n      meta: { right: { type: 'atom', action: 'disable' } },\n    },\n    {\n      method: 'post',\n      path: 'atom/deleteBulk',\n      controller: 'atom',\n      middlewares: 'transaction',\n      meta: { right: { type: 'atom', action: 'deleteBulk' } },\n    },\n    {\n      method: 'post',\n      path: 'atom/exportBulk',\n      controller: 'atom',\n      meta: { right: { type: 'atom', action: 'exportBulk' } },\n    },\n    {\n      method: 'post',\n      path: 'atom/importBulk',\n      controller: 'atom',\n      meta: { right: { type: 'atom', action: 'importBulk' } },\n    },\n    {\n      method: 'post',\n      path: 'atom/star',\n      controller: 'atom',\n      meta: {\n        auth: { user: true },\n        right: { type: 'atom', action: 'read' },\n      },\n    },\n    {\n      method: 'post',\n      path: 'atom/readCount',\n      controller: 'atom',\n      meta: { right: { type: 'atom', action: 'read', checkFlow: true } },\n    },\n    { method: 'post', path: 'atom/stats', controller: 'atom' },\n    {\n      method: 'post',\n      path: 'atom/labels',\n      controller: 'atom',\n      meta: {\n        auth: { user: true },\n        right: { type: 'atom', action: 'read' },\n      },\n    },\n    { method: 'post', path: 'atom/actions', controller: 'atom' },\n    { method: 'post', path: 'atom/actionsBulk', controller: 'atom' },\n    { method: 'post', path: 'atom/schema', controller: 'atom' },\n    { method: 'post', path: 'atom/validator', controller: 'atom' },\n    { method: 'post', path: 'atom/checkRightAction', controller: 'atom' },\n    // comment\n    { method: 'post', path: 'comment/all', controller: 'comment' },\n    {\n      method: 'post',\n      path: 'comment/list',\n      controller: 'comment',\n      meta: { right: { type: 'atom', action: 'read', checkFlow: true } },\n    },\n    {\n      method: 'post',\n      path: 'comment/count',\n      controller: 'comment',\n      meta: { right: { type: 'atom', action: 'read', checkFlow: true } },\n    },\n    {\n      method: 'post',\n      path: 'comment/item',\n      controller: 'comment',\n      meta: { right: { type: 'atom', action: 'read', checkFlow: true } },\n    },\n    {\n      method: 'post',\n      path: 'comment/save',\n      controller: 'comment',\n      middlewares: 'transaction',\n      meta: {\n        auth: { user: true },\n        right: { type: 'atom', action: 'read', checkFlow: true },\n      },\n    },\n    {\n      method: 'post',\n      path: 'comment/delete',\n      controller: 'comment',\n      middlewares: 'transaction',\n      meta: {\n        auth: { user: true },\n        right: { type: 'atom', action: 'read', checkFlow: true },\n      },\n    },\n    {\n      method: 'post',\n      path: 'comment/heart',\n      controller: 'comment',\n      middlewares: 'transaction',\n      meta: {\n        auth: { user: true },\n        right: { type: 'atom', action: 'read', checkFlow: true },\n      },\n    },\n    // user\n    { method: 'post', path: 'user/getLabels', controller: 'user' },\n    { method: 'post', path: 'user/setLabels', controller: 'user' },\n    // resource\n    { method: 'post', path: 'resource/select', controller: 'resource' },\n    { method: 'post', path: 'resource/read', controller: 'resource' },\n    { method: 'post', path: 'resource/check', controller: 'resource' },\n    {\n      method: 'post',\n      path: 'resource/resourceRoles',\n      controller: 'resource',\n      meta: { right: { type: 'atom', action: 'authorize' } },\n    },\n    {\n      method: 'post',\n      path: 'resource/resourceRoleRemove',\n      controller: 'resource',\n      meta: { right: { type: 'atom', action: 'authorize' } },\n    },\n    {\n      method: 'post',\n      path: 'resource/resourceRoleAdd',\n      controller: 'resource',\n      meta: { right: { type: 'atom', action: 'authorize' } },\n    },\n    // atomClass\n    { method: 'post', path: 'atomClass/validatorSearch', controller: 'atomClass' },\n    { method: 'post', path: 'atomClass/checkRightCreate', controller: 'atomClass' },\n    { method: 'post', path: 'atomClass/atomClass', controller: 'atomClass' },\n    { method: 'post', path: 'atomClass/atomClassesUser', controller: 'atomClass' },\n    { method: 'post', path: 'atomClass/actionsUser', controller: 'atomClass' },\n    // auth\n    { method: 'post', path: 'auth/echo', controller: 'auth', meta: { auth: { enable: false } } },\n    { method: 'post', path: 'auth/check', controller: 'auth', meta: { auth: { user: true } } },\n    {\n      method: 'post',\n      path: 'auth/logout',\n      controller: 'auth',\n      meta: {\n        auth: { enable: true },\n        right: { enableAuthOpen: true },\n      },\n    },\n    // cors\n    { method: 'options', path: /.*/ },\n    // jwt\n    { method: 'post', path: 'jwt/create', controller: 'jwt' },\n    // util\n    {\n      method: 'get',\n      path: 'util/performAction',\n      controller: 'util',\n      middlewares: 'jsonp',\n      meta: { auth: { enable: false } },\n    },\n    { method: 'post', path: 'util/performActions', controller: 'util' },\n    // layoutConfig\n    { method: 'post', path: 'layoutConfig/load', controller: 'layoutConfig' },\n    { method: 'post', path: 'layoutConfig/save', controller: 'layoutConfig' },\n    { method: 'post', path: 'layoutConfig/saveKey', controller: 'layoutConfig' },\n    // category\n    { method: 'post', path: 'category/child', controller: 'category' }, // not set function right\n    { method: 'post', path: 'category/children', controller: 'category' }, // not set function right\n    {\n      method: 'post',\n      path: 'category/add',\n      controller: 'category',\n      meta: { right: { type: 'resource', module: 'a-settings', name: 'settings' } },\n    },\n    {\n      method: 'post',\n      path: 'category/delete',\n      controller: 'category',\n      meta: { right: { type: 'resource', module: 'a-settings', name: 'settings' } },\n    },\n    {\n      method: 'post',\n      path: 'category/move',\n      controller: 'category',\n      meta: { right: { type: 'resource', module: 'a-settings', name: 'settings' } },\n    },\n    {\n      method: 'post',\n      path: 'category/item',\n      controller: 'category',\n      meta: { right: { type: 'resource', module: 'a-settings', name: 'settings' } },\n    },\n    {\n      method: 'post',\n      path: 'category/save',\n      controller: 'category',\n      middlewares: 'validate',\n      meta: {\n        validate: { module: 'a-base', validator: 'category' },\n        right: { type: 'resource', module: 'a-settings', name: 'settings' },\n      },\n    },\n    { method: 'post', path: 'category/tree', controller: 'category' }, // not set function right\n    { method: 'post', path: 'category/relativeTop', controller: 'category' }, // not set function right\n    { method: 'post', path: 'category/parseCategoryName', controller: 'category' }, // not set function right\n    // tag\n    { method: 'post', path: 'tag/list', controller: 'tag' },\n    {\n      method: 'post',\n      path: 'tag/add',\n      controller: 'tag',\n      meta: { right: { type: 'resource', module: 'a-settings', name: 'settings' } },\n    },\n    {\n      method: 'post',\n      path: 'tag/save',\n      controller: 'tag',\n      meta: { right: { type: 'resource', module: 'a-settings', name: 'settings' } },\n    },\n    {\n      method: 'post',\n      path: 'tag/delete',\n      controller: 'tag',\n      meta: { right: { type: 'resource', module: 'a-settings', name: 'settings' } },\n    },\n    // db\n    { method: 'post', path: 'db/insert', controller: 'db', middlewares: 'test' },\n    { method: 'post', path: 'db/select', controller: 'db', middlewares: 'test' },\n    { method: 'post', path: 'db/get', controller: 'db', middlewares: 'test' },\n    { method: 'post', path: 'db/count', controller: 'db', middlewares: 'test' },\n    { method: 'post', path: 'db/update', controller: 'db', middlewares: 'test' },\n    { method: 'post', path: 'db/delete', controller: 'db', middlewares: 'test' },\n    { method: 'post', path: 'db/query', controller: 'db', middlewares: 'test' },\n    { method: 'post', path: 'db/queryOne', controller: 'db', middlewares: 'test' },\n    { method: 'post', path: 'db/iid', controller: 'db', middlewares: 'test' },\n  ];\n  return routes;\n};\n","module.exports = app => {\n  class Atom extends app.Service {\n    async preferredRoles({ atomClass, user }) {\n      return await this.ctx.bean.atom.preferredRoles({ atomClass, user });\n    }\n\n    async preferredRole({ atomClass, user }) {\n      return await this.ctx.bean.atom.preferredRole({ atomClass, user });\n    }\n\n    async preferredRoleId({ atomClass, user }) {\n      return await this.ctx.bean.atom.preferredRoleId({ atomClass, user });\n    }\n\n    async create({ atomClass, roleIdOwner, item, options, user }) {\n      return await this.ctx.bean.atom.create({ atomClass, roleIdOwner, item, options, user });\n    }\n\n    async atomClass({ key, user }) {\n      const atomClass = await this.ctx.bean.atomClass.getByAtomId({ atomId: key.atomId });\n      return {\n        id: atomClass.id,\n        module: atomClass.module,\n        atomClassName: atomClass.atomClassName,\n      };\n    }\n    async read({ key, options, user }) {\n      return await this.ctx.bean.atom.read({ key, options, user });\n    }\n\n    async select({ atomClass, options, user }) {\n      return await this.ctx.bean.atom.select({ atomClass, options, user });\n    }\n\n    async count({ atomClass, options, user }) {\n      return await this.ctx.bean.atom.count({ atomClass, options, user });\n    }\n\n    async write({ key, item, options, user }) {\n      return await this.ctx.bean.atom.write({ key, item, options, user });\n    }\n\n    async openDraft({ key, user }) {\n      return await this.ctx.bean.atom.openDraft({ key, user });\n    }\n\n    async submit({ key, options, user }) {\n      return await this.ctx.bean.atom.submit({ key, options, user });\n    }\n\n    async delete({ key, user }) {\n      return await this.ctx.bean.atom.delete({ key, user });\n    }\n\n    async deleteBulk({ keys, user }) {\n      return await this.ctx.bean.atom.deleteBulk({ keys, user });\n    }\n\n    async clone({ key, user }) {\n      return await this.ctx.bean.atom.clone({ key, user });\n    }\n\n    async enable({ key, user }) {\n      return await this.ctx.bean.atom.enable({ key, user });\n    }\n\n    async disable({ key, user }) {\n      return await this.ctx.bean.atom.disable({ key, user });\n    }\n\n    async exportBulk({ atomClass, options, fields, user }) {\n      return await this.ctx.bean.atom.exportBulk({ atomClass, options, fields, user });\n    }\n\n    async importBulk({ atomClass, file, user }) {\n      const actionBase = this.ctx.bean.base.action({\n        module: atomClass.module,\n        atomClassName: atomClass.atomClassName,\n        name: 'importBulk',\n      });\n      // options\n      const options = actionBase.params;\n      // check isTest\n      if (options.progress && !app.meta.isTest) {\n        const progressId = await this.ctx.bean.progress.create();\n        options.progressId = progressId;\n        // background\n        this.ctx.runInBackground(async () => {\n          // importBulk\n          await this.ctx.bean.atom.importBulk({ atomClass, options, file, user });\n        });\n        return { progressId };\n      }\n      // importBulk\n      await this.ctx.bean.atom.importBulk({ atomClass, options, file, user });\n    }\n\n    async star({ key, atom, user }) {\n      return await this.ctx.bean.atom.star({ key, atom, user });\n    }\n\n    async readCount({ key, atom, user }) {\n      return await this.ctx.bean.atom.readCount({ key, atom, user });\n    }\n\n    async stats({ atomIds, user }) {\n      return await this.ctx.bean.atom.stats({ atomIds, user });\n    }\n\n    async labels({ key, atom, user }) {\n      return await this.ctx.bean.atom.labels({ key, atom, user });\n    }\n\n    async actions({ key, basic, user }) {\n      return await this.ctx.bean.atom.actions({ key, basic, user });\n    }\n\n    async actionsBulk({ atomClass, stage, user }) {\n      return await this.ctx.bean.atom.actionsBulk({ atomClass, stage, user });\n    }\n\n    async checkRightAction({ key, action, stage, user, checkFlow }) {\n      return await this.ctx.bean.atom.checkRightAction({ atom: { id: key.atomId }, action, stage, user, checkFlow });\n    }\n\n    async schema({ atomClass, schema }) {\n      return await this.ctx.bean.atom.schema({ atomClass, schema });\n    }\n\n    async validator({ atomClass }) {\n      return await this.ctx.bean.atom.validator({ atomClass });\n    }\n  }\n\n  return Atom;\n};\n","module.exports = app => {\n  class AtomAction extends app.Service {}\n\n  return AtomAction;\n};\n","module.exports = app => {\n  class AtomClass extends app.Service {\n    async validatorSearch({ atomClass }) {\n      return await this.ctx.bean.atomClass.validatorSearch({ atomClass });\n    }\n\n    async checkRightCreate({ atomClass, user }) {\n      return await this.ctx.bean.atom.checkRightCreate({ atomClass, user });\n    }\n\n    async atomClass({ atomClass }) {\n      return await this.ctx.bean.atomClass.get(atomClass);\n    }\n\n    async atomClassesUser({ user }) {\n      return await this.ctx.bean.atomClass.atomClassesUser({ user });\n    }\n\n    async actionsUser({ atomClass, user }) {\n      return await this.ctx.bean.atomClass.actionsUser({ atomClass, user });\n    }\n  }\n\n  return AtomClass;\n};\n","module.exports = app => {\n  class Auth extends app.Service {}\n\n  return Auth;\n};\n","module.exports = app => {\n  class Base extends app.Service {\n    modules() {\n      return this.ctx.bean.base.modules();\n    }\n\n    locales() {\n      return this.ctx.bean.base.locales();\n    }\n\n    resourceTypes() {\n      return this.ctx.bean.base.resourceTypes();\n    }\n\n    atomClasses() {\n      return this.ctx.bean.base.atomClasses();\n    }\n\n    actions() {\n      return this.ctx.bean.base.actions();\n    }\n\n    themes() {\n      return this.ctx.bean.base.themes();\n    }\n  }\n\n  return Base;\n};\n","module.exports = app => {\n  class Category extends app.Service {\n    async child({ atomClass, language, categoryId, categoryName, categoryHidden, categoryFlag, setLocale, user }) {\n      return await this.ctx.bean.category.child({\n        atomClass,\n        language,\n        categoryId,\n        categoryName,\n        categoryHidden,\n        categoryFlag,\n        setLocale,\n        user,\n      });\n    }\n\n    async children({ atomClass, language, categoryId, categoryName, categoryHidden, categoryFlag, setLocale, user }) {\n      return await this.ctx.bean.category.children({\n        atomClass,\n        language,\n        categoryId,\n        categoryName,\n        categoryHidden,\n        categoryFlag,\n        setLocale,\n        user,\n      });\n    }\n\n    async tree({ atomClass, language, categoryId, categoryHidden, categoryFlag, setLocale, user }) {\n      return await this.ctx.bean.category.tree({\n        atomClass,\n        language,\n        categoryId,\n        categoryHidden,\n        categoryFlag,\n        setLocale,\n        user,\n      });\n    }\n\n    async add({ atomClass, data }) {\n      return await this.ctx.bean.category.add({ atomClass, data });\n    }\n\n    async delete({ categoryId }) {\n      return await this.ctx.bean.category.delete({ categoryId });\n    }\n\n    async move({ categoryId, categoryIdParent }) {\n      return await this.ctx.bean.category.move({ categoryId, categoryIdParent });\n    }\n\n    async item({ categoryId, setLocale }) {\n      return await this.ctx.bean.category.get({ categoryId, setLocale });\n    }\n\n    async save({ categoryId, data }) {\n      return await this.ctx.bean.category.save({ categoryId, data });\n    }\n\n    async relativeTop({ categoryId, setLocale }) {\n      return await this.ctx.bean.category.relativeTop({ categoryId, setLocale });\n    }\n\n    async parseCategoryName({ atomClass, language, categoryName, categoryIdParent, force }) {\n      return await this.ctx.bean.category.parseCategoryName({\n        atomClass,\n        language,\n        categoryName,\n        categoryIdParent,\n        force,\n      });\n    }\n  }\n\n  return Category;\n};\n","const require3 = require('require3');\nconst trimHtml = require3('@zhennann/trim-html');\n\nmodule.exports = app => {\n  class Comment extends app.Service {\n    async list({ key, options, user }) {\n      const _options = this._adjuctOptions({ key, options });\n      // sql\n      const _where = this.ctx.model._where(_options.where);\n      const _orders = this.ctx.model._orders(_options.orders);\n      const _limit = this.ctx.model._limit(_options.limit, _options.offset);\n      const sql = `select a.*,(select d2.heart from aCommentHeart d2 where d2.iid=? and d2.commentId=a.id and d2.userId=?) as heart from aViewComment a\n         ${_where} ${_orders} ${_limit}`;\n      // select\n      return await this.ctx.model.query(sql, [this.ctx.instance.id, user.id]);\n    }\n\n    async count({ key, options, user }) {\n      const _options = this._adjuctOptions({ key, options });\n      // sql\n      const _where = this.ctx.model._where(_options.where);\n      const sql = `select count(*) as count from aViewComment a\n         ${_where}`;\n      // query\n      const res = await this.ctx.model.queryOne(sql);\n      return res.count;\n    }\n\n    _adjuctOptions({ key, options }) {\n      const _options = {};\n      // where\n      _options.where = options.where || {};\n      _options.where.iid = this.ctx.instance.id;\n      _options.where.deleted = 0;\n      _options.where.atomId = key.atomId;\n      // orders\n      _options.orders = options.orders;\n      // page\n      if (options.page && options.page.size !== 0) {\n        _options.limit = options.page.size;\n        _options.offset = options.page.index;\n      }\n      return _options;\n    }\n\n    async item({ /* key,*/ data: { commentId }, user }) {\n      const sql = `select a.*,(select d2.heart from aCommentHeart d2 where d2.iid=? and d2.commentId=a.id and d2.userId=?) as heart from aViewComment a\n         where a.iid=? and a.deleted=0 and a.id=?`;\n      // select\n      const list = await this.ctx.model.query(sql, [this.ctx.instance.id, user.id, this.ctx.instance.id, commentId]);\n      return list[0];\n    }\n\n    async save({ key, data, user }) {\n      if (!data.commentId) {\n        return await this.save_add({ key, data, user });\n      }\n      return await this.save_edit({ key, data, user });\n    }\n\n    async save_edit({ key, data: { commentId, content }, user }) {\n      // comment\n      const item = await this.ctx.model.commentView.get({ id: commentId });\n      if (key.atomId !== item.atomId || item.userId !== user.id) this.ctx.throw(403);\n      // html\n      const html = await this._renderContent({\n        atomId: key.atomId,\n        content,\n        replyContent: item.replyContent,\n        replyUserName: item.replyUserName,\n      });\n      // summary\n      const summary = this._trimHtml(html);\n      // update\n      await this.ctx.model.comment.update({\n        id: commentId,\n        content,\n        summary: summary.html,\n        html,\n        updatedAt: new Date(),\n      });\n      // publish\n      await this._publish({\n        atomId: key.atomId,\n        commentId,\n        replyId: item.replyId,\n        replyUserId: item.replyUserId,\n        user,\n        mode: 'edit',\n      });\n      // ok\n      return {\n        action: 'update',\n        atomId: key.atomId,\n        commentId,\n      };\n    }\n\n    async save_add({ key, data: { replyId, content }, user }) {\n      // sorting\n      const list = await this.ctx.model.query(\n        'select max(sorting) as sorting from aComment where iid=? and deleted=0 and atomId=?',\n        [this.ctx.instance.id, key.atomId]\n      );\n      const sorting = (list[0].sorting || 0) + 1;\n      // reply\n      let reply;\n      if (replyId) {\n        reply = await this.ctx.model.commentView.get({ id: replyId });\n      }\n      // replyUserId\n      const replyUserId = reply ? reply.userId : 0;\n      // replyContent\n      let replyContent = '';\n      if (reply) {\n        replyContent = this._fullContent({\n          content: reply.content,\n          replyContent: reply.replyContent,\n          replyUserName: reply.replyUserName,\n        });\n      }\n      // html\n      const html = await this._renderContent({\n        atomId: key.atomId,\n        content,\n        replyContent,\n        replyUserName: reply && reply.userName,\n      });\n      // summary\n      const summary = this._trimHtml(html);\n      // create\n      const res = await this.ctx.model.comment.insert({\n        atomId: key.atomId,\n        userId: user.id,\n        sorting,\n        heartCount: 0,\n        replyId,\n        replyUserId,\n        replyContent,\n        content,\n        summary: summary.html,\n        html,\n      });\n      const commentId = res.insertId;\n      // commentCount\n      await this.ctx.bean.atom.comment({ key, atom: { comment: 1 }, user });\n      // publish\n      await this._publish({ atomId: key.atomId, commentId, replyId, replyUserId, user, mode: 'add' });\n      // ok\n      return {\n        action: 'create',\n        atomId: key.atomId,\n        commentId,\n      };\n    }\n\n    async delete({ key, data: { commentId }, user }) {\n      // comment\n      const item = await this.ctx.model.comment.get({ id: commentId });\n      // check right\n      let canDeleted = key.atomId === item.atomId && item.userId === user.id;\n      if (!canDeleted) {\n        canDeleted = await this.ctx.bean.resource.checkRightResource({\n          atomStaticKey: 'a-base:deleteComment',\n          user,\n        });\n      }\n      if (!canDeleted) this.ctx.throw(403);\n      // delete hearts\n      await this.ctx.model.commentHeart.delete({ commentId });\n      // delete comment\n      await this.ctx.model.comment.delete({ id: commentId });\n      // commentCount\n      await this.ctx.bean.atom.comment({ key, atom: { comment: -1 }, user });\n      // ok\n      return {\n        action: 'delete',\n        atomId: key.atomId,\n        commentId,\n      };\n    }\n\n    async heart({ key, data: { commentId, heart }, user }) {\n      let diff = 0;\n      // check if exists\n      const _heart = await this.ctx.model.commentHeart.get({\n        userId: user.id,\n        atomId: key.atomId,\n        commentId,\n      });\n      if (_heart && !heart) {\n        diff = -1;\n        // delete\n        await this.ctx.model.commentHeart.delete({\n          id: _heart.id,\n        });\n      } else if (!_heart && heart) {\n        diff = 1;\n        // new\n        await this.ctx.model.commentHeart.insert({\n          userId: user.id,\n          atomId: key.atomId,\n          commentId,\n          heart: 1,\n        });\n      }\n      // get\n      const item = await this.ctx.model.comment.get({ id: commentId });\n      let heartCount = item.heartCount;\n      if (diff !== 0) {\n        heartCount += diff;\n        await this.ctx.model.comment.update({\n          id: commentId,\n          heartCount,\n        });\n      }\n      // ok\n      return {\n        action: 'heart',\n        atomId: key.atomId,\n        commentId,\n        heart,\n        heartCount,\n      };\n    }\n\n    // publish\n    async _publish({ atomId, commentId, replyId, replyUserId, user, mode }) {\n      const userIdsTo = {};\n      // 1. atom.userIdUpdated\n      const atom = await this.ctx.model.atom.get({ id: atomId });\n      const userIdUpdated = atom.userIdUpdated;\n      if (userIdUpdated !== user.id) {\n        const title = await this._publishTitle({ userId: userIdUpdated, replyId: 0, mode });\n        userIdsTo[userIdUpdated] = { title };\n      }\n      // 2. replyUser\n      if (replyUserId && replyUserId !== user.id) {\n        const title = await this._publishTitle({ userId: replyUserId, replyId, mode });\n        userIdsTo[replyUserId] = { title };\n      }\n      // actionPath\n      const actionPath = `/a/basefront/comment/list?atomId=${atomId}&commentId=${commentId}`;\n      // publish\n      for (const userIdTo in userIdsTo) {\n        const info = userIdsTo[userIdTo];\n        const message = {\n          userIdTo,\n          content: {\n            issuerId: user.id,\n            issuerName: user.userName,\n            issuerAvatar: user.avatar,\n            title: info.title,\n            body: atom.atomName,\n            actionPath,\n            params: {\n              atomId,\n              commentId,\n              replyId,\n            },\n          },\n        };\n        await this.ctx.bean.io.publish({\n          message,\n          messageClass: {\n            module: 'a-base',\n            messageClassName: 'comment',\n          },\n        });\n      }\n    }\n\n    async _publishTitle({ userId, replyId, mode }) {\n      const user = await this.ctx.bean.user.get({ id: userId });\n      const locale = user.locale;\n      let title;\n      if (mode === 'add') {\n        // add\n        if (replyId === 0) {\n          title = this.ctx.text.locale(locale, 'CommentPublishTitleNewComment');\n        } else {\n          title = this.ctx.text.locale(locale, 'CommentPublishTitleReplyComment');\n        }\n      } else {\n        // edit\n        if (replyId === 0) {\n          title = this.ctx.text.locale(locale, 'CommentPublishTitleEditComment');\n        } else {\n          title = this.ctx.text.locale(locale, 'CommentPublishTitleEditReplyComment');\n        }\n      }\n      return title;\n    }\n\n    _fullContent({ content, replyContent, replyUserName }) {\n      if (!replyContent) return content;\n      const sep = this._getMarkdownSep(replyContent);\n      return `${content}\n\n> \\`${replyUserName}\\`:\n\n${sep} comment-quot\n${replyContent}\n${sep}\n\n`;\n    }\n\n    _getMarkdownSep(replyContent) {\n      const posA = replyContent.indexOf(':::');\n      if (posA === -1) return ':::';\n      let posB = posA + 3;\n      while (replyContent[posB] === ':') {\n        ++posB;\n      }\n      return ':'.repeat(posB - posA + 1);\n    }\n\n    async _renderContent({ atomId, content, replyContent, replyUserName }) {\n      const fullContent = this._fullContent({ content, replyContent, replyUserName });\n      return await this.ctx.bean.markdown.render({\n        host: { atomId },\n        content: fullContent,\n        locale: this.ctx.locale,\n      });\n    }\n\n    _trimHtml(html) {\n      return trimHtml(html, this.ctx.config.comment.trim);\n    }\n  }\n\n  return Comment;\n};\n","module.exports = app => {\n  class Db extends app.Service {\n    async insert({ tableName, data }) {\n      return await this.ctx.db.insert(tableName, data);\n    }\n\n    async select({ tableName, options }) {\n      return await this.ctx.db.select(tableName, options);\n    }\n\n    async get({ tableName, where }) {\n      return await this.ctx.db.get(tableName, where);\n    }\n\n    async count({ tableName, where }) {\n      return await this.ctx.db.count(tableName, where);\n    }\n\n    async update({ tableName, data, options }) {\n      return await this.ctx.db.update(tableName, data, options);\n    }\n\n    async delete({ tableName, where }) {\n      return await this.ctx.db.delete(tableName, where);\n    }\n\n    async query({ sql, params }) {\n      return await this.ctx.db.query(sql, params);\n    }\n\n    async queryOne({ sql, params }) {\n      return await this.ctx.db.queryOne(sql, params);\n    }\n\n    async iid() {\n      return this.ctx.instance.id;\n    }\n  }\n  return Db;\n};\n","const require3 = require('require3');\nconst jsonwebtoken = require3('jsonwebtoken');\n\nmodule.exports = app => {\n  class Jwt extends app.Service {\n    async create({ scene = 'query' }) {\n      // check\n      if (!this.ctx.state.jwt) this.ctx.throw(403);\n      // token\n      const token = this.ctx.state.jwt.token;\n      // jwt payload\n      const payload = {\n        token,\n        exp: Date.now() + app.config.jwt.scene[scene].maxAge, // must use exp for safety\n      };\n      // jwt\n      const secret = app.config.jwt.secret || app.config.keys.split(',')[0];\n      const jwt = jsonwebtoken.sign(payload, secret);\n      return { jwt };\n    }\n  }\n\n  return Jwt;\n};\n","module.exports = app => {\n  class Settings extends app.Service {\n    async load({ module, user }) {\n      const name = `user-layoutConfig:${module}:${user.id}`;\n      return await this.ctx.bean.status.get(name);\n    }\n\n    async save({ module, data, user }) {\n      const name = `user-layoutConfig:${module}:${user.id}`;\n      await this.ctx.bean.status.set(name, data);\n    }\n\n    async saveKey({ module, key, value, user }) {\n      const layoutConfig = await this.load({ module, user });\n      const data = this.ctx.bean.util.extend({}, layoutConfig || {}, { [key]: value });\n      await this.save({ module, data, user });\n    }\n  }\n\n  return Settings;\n};\n","module.exports = app => {\n  class Resource extends app.Service {\n    async select({ atomClass, options, user }) {\n      return await this.ctx.bean.resource.select({ atomClass, options, user });\n    }\n\n    async read({ atomStaticKey, options, user }) {\n      return await this.ctx.bean.resource.readByStaticKey({ atomStaticKey, options, user });\n    }\n\n    async check({ atomStaticKeys, user }) {\n      return await this.ctx.bean.resource.check({ atomStaticKeys, user });\n    }\n\n    async resourceRoles({ key, user }) {\n      return await this.ctx.bean.resource.resourceRoles({ key, user });\n    }\n\n    async resourceRoleRemove({ key, data, user }) {\n      return await this.ctx.bean.resource.deleteResourceRole({\n        atomId: key.atomId,\n        roleId: data.roleId,\n        user,\n      });\n    }\n\n    async resourceRoleAdd({ key, data, user }) {\n      for (const roleId of data.roles) {\n        await this.ctx.bean.resource.addResourceRole({ atomId: key.atomId, roleId, user });\n      }\n    }\n  }\n\n  return Resource;\n};\n","module.exports = app => {\n  class Tag extends app.Service {\n    async list({ atomClass, options }) {\n      return await this.ctx.bean.tag.list({ atomClass, options });\n    }\n\n    async add({ atomClass, data }) {\n      return await this.ctx.bean.tag.add({ atomClass, data });\n    }\n\n    async delete({ tagId }) {\n      return await this.ctx.bean.tag.delete({ tagId });\n    }\n\n    async save({ tagId, data }) {\n      return await this.ctx.bean.tag.save({ tagId, data });\n    }\n  }\n\n  return Tag;\n};\n","module.exports = app => {\n  class User extends app.Service {\n    async getLabels({ user }) {\n      return await this.ctx.bean.atom.getLabels({ user });\n    }\n\n    async setLabels({ labels, user }) {\n      return await this.ctx.bean.atom.setLabels({ labels, user });\n    }\n  }\n\n  return User;\n};\n","const require3 = require('require3');\nconst pMap = require3('p-map');\n\nmodule.exports = app => {\n  class Util extends app.Service {\n    async performAction({ params }) {\n      // force innerAccess as false\n      params.innerAccess = false;\n      // performAction\n      return await this.ctx.meta.util.performAction(params);\n    }\n\n    async performActions({ actions }) {\n      // concurrency\n      const mapper = async params => {\n        let err;\n        let res;\n        try {\n          res = await this.performAction({ params });\n        } catch (error) {\n          err = {\n            code: error.code || 500,\n            message: error.message,\n          };\n        }\n        return { err, res };\n      };\n      return await pMap(actions, mapper, { concurrency: 10 });\n    }\n  }\n\n  return Util;\n};\n","const base = require('./service/base.js');\nconst user = require('./service/user.js');\nconst atom = require('./service/atom.js');\nconst atomClass = require('./service/atomClass.js');\nconst atomAction = require('./service/atomAction.js');\nconst auth = require('./service/auth.js');\nconst resource = require('./service/resource.js');\nconst comment = require('./service/comment.js');\nconst jwt = require('./service/jwt.js');\nconst layoutConfig = require('./service/layoutConfig.js');\nconst category = require('./service/category.js');\nconst tag = require('./service/tag.js');\nconst util = require('./service/util.js');\nconst db = require('./service/db.js');\n\nmodule.exports = app => {\n  const services = {\n    base,\n    user,\n    atom,\n    atomClass,\n    atomAction,\n    auth,\n    resource,\n    comment,\n    jwt,\n    layoutConfig,\n    category,\n    tag,\n    util,\n    db,\n  };\n  return services;\n};\n","module.exports = require(\"require3\");","module.exports = require(\"os\");","module.exports = require(\"path\");","module.exports = require(\"url\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(9421);\n",""],"names":[],"sourceRoot":""}