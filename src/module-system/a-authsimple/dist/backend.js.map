{"version":3,"file":"backend.js","mappings":";;;;;;;AAAa;;AAEb,yCAA6C;;;;;;;;ACFhC;;AAEb,aAAa,mBAAO,CAAC,GAAQ;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,KAAK;AACL;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;;AAGA;;;;;;;;AClEA,iBAAiB,mBAAO,CAAC,GAAgC;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,6BAA6B;AAC3C;AACA,2CAA2C,uEAAuE;AAClH;AACA,gDAAgD,2CAA2C;AAC3F;AACA;AACA;AACA;AACA,yDAAyD,2BAA2B;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;;;;;;;;AC7CA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,yEAAyE;AAC5F;AACA,uDAAuD,UAAU;;AAEjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA,sDAAsD,oBAAoB;AAC1E;;AAEA;AACA;AACA;AACA,0CAA0C,QAAQ;AAClD;AACA,0CAA0C,0BAA0B;;AAEpE;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,kBAAkB,sCAAsC;AACxD,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,eAAe;AACf,mBAAmB,uBAAuB;AAC1C;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,gBAAgB,MAAM;AACtB,OAAO;AACP;AACA;AACA,kEAAkE,MAAM;AACxE,mBAAmB,MAAM;AACzB,UAAU;AACV;AACA;;AAEA,2BAA2B,UAAU;AACrC;AACA;AACA,yDAAyD,UAAU;AACnE;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA,gBAAgB,kBAAkB;AAClC;AACA,uDAAuD,UAAU;AACjE;AACA,0CAA0C,0BAA0B;;AAEpE;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;;AAEA,2BAA2B,kCAAkC;AAC7D;AACA;AACA,0DAA0D,QAAQ;AAClE;AACA;AACA,wCAAwC,+BAA+B;AACvE,QAAQ;AACR;AACA,2DAA2D,+BAA+B;AAC1F;AACA;AACA;;AAEA;AACA,oCAAoC,qBAAqB;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA,sDAAsD,iCAAiC;AACvF;;AAEA;AACA,0CAA0C,QAAQ,cAAc;;AAEhE;AACA;AACA;AACA;;AAEA,6BAA6B,qBAAqB;AAClD;AACA;AACA;AACA,OAAO;AACP,yDAAyD,uBAAuB;AAChF;AACA;AACA;AACA,OAAO;AACP;;AAEA,0BAA0B,oBAAoB;AAC9C;AACA,wCAAwC,MAAM;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0DAA0D,QAAQ;AAClE;AACA;AACA,yBAAyB,+BAA+B;AACxD,QAAQ;AACR;AACA,sCAAsC,qBAAqB;AAC3D;AACA;AACA;AACA;AACA,6CAA6C,YAAY;AACzD,qBAAqB;AACrB,wCAAwC,sBAAsB;AAC9D;AACA;AACA;;AAEA,2BAA2B,OAAO;AAClC;AACA,gDAAgD,OAAO;AACvD;AACA;AACA,wFAAwF,MAAM;AAC9F;AACA;AACA;AACA;AACA,yDAAyD,8BAA8B;AACvF;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA,8CAA8C,MAAM,KAAK,iBAAiB;AAC1E;;AAEA,yBAAyB,aAAa;AACtC;AACA;AACA,gBAAgB,uCAAuC;AACvD,OAAO;AACP;AACA;AACA,kGAAkG,MAAM;AACxG;AACA;AACA;AACA;AACA,yDAAyD,8BAA8B;AACvF;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA,6CAA6C,MAAM,KAAK,iBAAiB;AACzE;;AAEA;AACA,8BAA8B,OAAO;AACrC;AACA,uCAAuC,MAAM;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,MAAM;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,+BAA+B;AAC/C,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,MAAM;AACpD;AACA;;AAEA,wBAAwB,MAAM;AAC9B;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC3TA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,yBAAyB;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;AC3BA,aAAa,mBAAO,CAAC,GAAM;AAC3B,mBAAmB,mBAAO,CAAC,GAAwB,GAAG;;AAEtD;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,8CAA8C,iCAAiC;AAC/E;AACA;AACA;AACA;;AAEA,2BAA2B,gBAAgB;AAC3C;AACA;AACA;AACA;;AAEA,yBAAyB,UAAU;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,wDAAwD,kBAAkB;AAC1E;AACA;AACA;AACA,SAAS;AACT;AACA,yDAAyD,mBAAmB;AAC5E;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;AC5CA,uBAAuB,mBAAO,CAAC,GAA2B;AAC1D,8BAA8B,mBAAO,CAAC,GAAkC;AACxE,2BAA2B,mBAAO,CAAC,EAAgC;AACnE,oBAAoB,mBAAO,CAAC,GAAwB;AACpD,uBAAuB,mBAAO,CAAC,GAA2B;;AAE1D;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;ACpCA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;;;;;;;;ACvDA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACLA;AACA;AACA,qCAAqC,UAAU;AAC/C;AACA;AACA,KAAK,UAAU;;AAEf;;AAEA,EAAE;;AAEF;AACA,EAAE,WAAW;AACb;;AAEA;AACA;AACA,sCAAsC,UAAU;AAChD;AACA;AACA,KAAK,UAAU;;AAEf;;AAEA,EAAE;;AAEF;AACA,EAAE,WAAW;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACvCA;AACA;AACA,qCAAqC,UAAU;AAC/C;AACA;AACA,KAAK,UAAU;;AAEf;;AAEA,EAAE;;AAEF;AACA,EAAE,WAAW;AACb;;AAEA;AACA;AACA,sCAAsC,UAAU;AAChD;AACA;AACA,KAAK,UAAU;;AAEf;;AAEA,EAAE;;AAEF;AACA,EAAE,WAAW;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChDA;AACA,WAAW,mBAAO,CAAC,GAAmB;AACtC,WAAW,mBAAO,CAAC,EAAmB;AACtC;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,sBAAsB;AACxC,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;;;;;;;;ACjBA,iBAAiB,mBAAO,CAAC,GAAmB;AAC5C,aAAa,mBAAO,CAAC,GAAM;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;;;;;;;;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,cAAc;AAC/D;AACA,4BAA4B,sEAAsE;AAClG;AACA;AACA;AACA,4BAA4B,yEAAyE;AACrG;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,cAAc;AAC/D;AACA;AACA,cAAc,iGAAiG;AAC/G;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,iBAAiB,wBAAwB;AACzC,OAAO;AACP,KAAK;AACL;AACA;AACA;;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,iBAAiB,wBAAwB;AACzC,OAAO;AACP,KAAK;AACL;AACA;AACA;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,iBAAiB,qBAAqB;AACtC,OAAO;AACP,KAAK;AACL;AACA;AACA;;;;;;;;ACxDA,qBAAqB,mBAAO,CAAC,GAA0B;AACvD,uBAAuB,mBAAO,CAAC,GAA4B;AAC3D,uBAAuB,mBAAO,CAAC,GAA4B;AAC3D,sBAAsB,mBAAO,CAAC,GAA2B;AACzD,eAAe,mBAAO,CAAC,EAAoB;AAC3C,eAAe,mBAAO,CAAC,GAAoB;;AAE3C;AACA;AACA;AACA;AACA;AAC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","sources":["webpack://egg-born-module-a-authsimple/../../../node_modules/password-hash-and-salt/index.js","webpack://egg-born-module-a-authsimple/../../../node_modules/password-hash-and-salt/lib/hashsalt.js","webpack://egg-born-module-a-authsimple/./backend/src/bean/auth.provider.simple.js","webpack://egg-born-module-a-authsimple/./backend/src/bean/bean.authSimple.js","webpack://egg-born-module-a-authsimple/./backend/src/bean/event.accountMigration.js","webpack://egg-born-module-a-authsimple/./backend/src/bean/local.simple.js","webpack://egg-born-module-a-authsimple/./backend/src/bean/version.manager.js","webpack://egg-born-module-a-authsimple/./backend/src/beans.js","webpack://egg-born-module-a-authsimple/./backend/src/config/config.js","webpack://egg-born-module-a-authsimple/./backend/src/config/errors.js","webpack://egg-born-module-a-authsimple/./backend/src/config/locale/en-us.js","webpack://egg-born-module-a-authsimple/./backend/src/config/locale/zh-cn.js","webpack://egg-born-module-a-authsimple/./backend/src/config/locales.js","webpack://egg-born-module-a-authsimple/./backend/src/config/passport/auth.js","webpack://egg-born-module-a-authsimple/./backend/src/config/passport/strategy.js","webpack://egg-born-module-a-authsimple/./backend/src/config/validation/keywords.js","webpack://egg-born-module-a-authsimple/./backend/src/config/validation/schema/emailConfirm.js","webpack://egg-born-module-a-authsimple/./backend/src/config/validation/schema/passwordChange.js","webpack://egg-born-module-a-authsimple/./backend/src/config/validation/schema/passwordForgot.js","webpack://egg-born-module-a-authsimple/./backend/src/config/validation/schema/passwordReset.js","webpack://egg-born-module-a-authsimple/./backend/src/config/validation/schema/signin.js","webpack://egg-born-module-a-authsimple/./backend/src/config/validation/schema/signup.js","webpack://egg-born-module-a-authsimple/./backend/src/config/validation/schemas.js","webpack://egg-born-module-a-authsimple/./backend/src/controller/auth.js","webpack://egg-born-module-a-authsimple/./backend/src/controllers.js","webpack://egg-born-module-a-authsimple/./backend/src/main.js","webpack://egg-born-module-a-authsimple/./backend/src/meta.js","webpack://egg-born-module-a-authsimple/./backend/src/model/authSimple.js","webpack://egg-born-module-a-authsimple/./backend/src/models.js","webpack://egg-born-module-a-authsimple/./backend/src/routes.js","webpack://egg-born-module-a-authsimple/./backend/src/service/auth.js","webpack://egg-born-module-a-authsimple/./backend/src/services.js","webpack://egg-born-module-a-authsimple/external commonjs2 \"crypto\"","webpack://egg-born-module-a-authsimple/external commonjs2 \"passport-strategy\"","webpack://egg-born-module-a-authsimple/external commonjs2 \"util\"","webpack://egg-born-module-a-authsimple/webpack/bootstrap","webpack://egg-born-module-a-authsimple/webpack/before-startup","webpack://egg-born-module-a-authsimple/webpack/startup","webpack://egg-born-module-a-authsimple/webpack/after-startup"],"sourcesContent":["'use strict';\n\nmodule.exports = require('./lib/hashsalt.js');","'use strict';\n\nvar crypto = require('crypto');\n\nvar iterations = 10000;\nvar password = function(password) {\n\treturn {\n\t\thash: function(salt, callback) {\n\t\t\t// Make salt optional\n\t\t\tif(callback === undefined && salt instanceof Function) {\n\t\t\t\tcallback = salt;\n\t\t\t\tsalt = undefined;\n\t\t\t}\n\n\t\t\tif(!password) {\n\t\t\t\treturn callback('No password provided')\n\t\t\t}\n\n\t\t\tif(typeof salt === 'string') {\n\t\t\t\tsalt = new Buffer(salt, 'hex');\n\t\t\t}\n\n\t\t\tvar calcHash = function() {\n\t\t\t\tcrypto.pbkdf2(password, salt, iterations, 64, 'sha1', function(err, key) {\n\t\t\t\t\tif(err)\n\t\t\t\t\t\treturn callback(err);\n\t\t\t\t\tvar res = 'pbkdf2$' + iterations + \n\t\t\t\t\t\t\t\t'$' + key.toString('hex') + \n\t\t\t\t\t\t\t\t'$' + salt.toString('hex');\n\t\t\t\t\tcallback(null, res);\n\t\t\t\t})\t\t\n\t\t\t};\n\n\t\t\tif(!salt) {\n\t\t\t\tcrypto.randomBytes(64, function(err, gensalt) {\n\t\t\t\t\tif(err)\n\t\t\t\t\t\treturn callback(err);\n\t\t\t\t\tsalt = gensalt;\n\t\t\t\t\tcalcHash();\n\t\t\t\t});\t\t\n\t\t\t} else {\n\t\t\t\tcalcHash();\n\t\t\t}\t\t\t\n\t\t},\n\n\t\tverifyAgainst: function(hashedPassword, callback) {\n\t\t\tif(!hashedPassword || !password)\n\t\t\t\treturn callback(null, false);\n\n\t\t\tvar key = hashedPassword.split('$');\n\t\t\tif(key.length !== 4 || !key[2] || !key[3])\n\t\t\t\treturn callback('Hash not formatted correctly');\n\n\t\t\tif(key[0] !== 'pbkdf2' || key[1] !== iterations.toString())\n\t\t\t\treturn callback('Wrong algorithm and/or iterations');\n\n\t\t\tthis.hash(key[3], function(error, newHash) {\n\t\t\t\tif(error)\n\t\t\t\t\treturn callback(error);\n\t\t\t\tcallback(null, newHash === hashedPassword);\t\t\t\t\n\t\t\t});\t\n\t\t}\n\t};\n}\n\n\nmodule.exports = password;\n","const Strategy = require('../config/passport/strategy.js');\n\nmodule.exports = function (ctx) {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Provider extends ctx.app.meta.IAuthProviderBase(ctx) {\n    get localSimple() {\n      return ctx.bean.local.module(moduleInfo.relativeName).simple;\n    }\n    async getConfigDefault() {\n      return null;\n    }\n    checkConfigValid(/* config*/) {\n      return true;\n    }\n    getStrategy() {\n      return Strategy;\n    }\n    async onVerify(body) {\n      const { auth, password, rememberMe } = body.data;\n      // validate\n      await ctx.bean.validation.validate({ module: moduleInfo.relativeName, validator: 'signin', data: body.data });\n      // exists\n      const user = await ctx.bean.user.exists({ userName: auth, email: auth, mobile: auth });\n      if (!user) return ctx.throw.module(moduleInfo.relativeName, 1001);\n      // disabled\n      if (user.disabled) return ctx.throw.module(moduleInfo.relativeName, 1002);\n      // verify\n      const authSimple = await this.localSimple.verify({ userId: user.id, password });\n      if (!authSimple) return ctx.throw.module(moduleInfo.relativeName, 1001);\n      return {\n        module: this.providerModule,\n        provider: this.providerName,\n        providerScene: this.providerScene,\n        profileId: authSimple.id,\n        maxAge: rememberMe ? null : 0,\n        authShouldExists: true,\n        profile: {\n          authSimpleId: authSimple.id,\n          rememberMe,\n        },\n      };\n    }\n  }\n\n  return Provider;\n};\n","module.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n\n  class AuthSimple {\n    get modelAuthSimple() {\n      return ctx.model.module(moduleInfo.relativeName).authSimple;\n    }\n    get modelAuth() {\n      return ctx.model.module('a-base').auth;\n    }\n    get localSimple() {\n      return ctx.bean.local.module(moduleInfo.relativeName).simple;\n    }\n    get configModule() {\n      return ctx.config.module(moduleInfo.relativeName);\n    }\n    get cacheDb() {\n      return ctx.cache.db.module(moduleInfo.relativeName);\n    }\n\n    // mobile: not use\n    async signup({ user, state = 'login', userName, realName, email, /* mobile,*/ password }) {\n      // add authsimple\n      const authSimpleId = await this._addAuthSimple({ password });\n\n      // profileUser\n      const profileUser = {\n        module: moduleInfo.relativeName,\n        provider: 'authsimple',\n        profileId: authSimpleId,\n        maxAge: 0,\n        profile: {\n          authSimpleId,\n          rememberMe: false,\n        },\n      };\n\n      // verify\n      const verifyUser = await ctx.bean.user.verify({ state, profileUser });\n      if (!verifyUser) ctx.throw(403);\n\n      // userId\n      const userId = verifyUser.agent.id;\n      // remove old records\n      await this.modelAuthSimple.delete({ userId });\n      // update userId\n      await this.modelAuthSimple.update({ id: authSimpleId, userId });\n\n      // override user's info: userName/realName/email\n      const userNew = { id: userId, realName };\n      if (state === 'login' || !user.userName || user.userName.indexOf('__') > -1) {\n        userNew.userName = userName;\n      }\n      await ctx.bean.user.save({\n        user: userNew,\n      });\n      // save email\n      if (email !== verifyUser.agent.email) {\n        await ctx.bean.user.setActivated({\n          user: { id: userId, email, emailConfirmed: 0 },\n        });\n      }\n\n      // login now\n      //   always no matter login/associate\n      await ctx.login(verifyUser);\n\n      // ok\n      return verifyUser;\n    }\n\n    // data: { auth, password, rememberMe }\n    async signin({ data, state = 'login' }) {\n      const res = await ctx.bean.authProvider.authenticateDirect({\n        module: moduleInfo.relativeName,\n        providerName: 'authsimple',\n        query: { state },\n        body: { data },\n      });\n      // const res = await ctx.meta.util.performAction({\n      //   method: 'post',\n      //   url: `/a/auth/passport/a-authsimple/authsimple?state=${state}`,\n      //   body: { data },\n      // });\n      return res;\n    }\n\n    async _addAuthSimple({ password }) {\n      // hash\n      password = password || this.configModule.defaultPassword;\n      const hash = await this.localSimple.calcPassword({ password });\n      // auth simple\n      const res = await this.modelAuthSimple.insert({\n        userId: 0,\n        hash,\n      });\n      return res.insertId;\n    }\n\n    async add({ userId, password }) {\n      // add authsimple\n      const authSimpleId = await this._addAuthSimple({ password });\n      // update userId\n      await this.modelAuthSimple.update({ id: authSimpleId, userId });\n\n      // auth\n      const providerItem = await ctx.bean.authProvider.getAuthProvider({\n        module: moduleInfo.relativeName,\n        providerName: 'authsimple',\n      });\n      await this.modelAuth.insert({\n        userId,\n        providerId: providerItem.id,\n        profileId: authSimpleId,\n        profile: JSON.stringify({\n          authSimpleId,\n          rememberMe: false,\n        }),\n      });\n      return authSimpleId;\n    }\n\n    async passwordChange({ passwordOld, passwordNew, userId }) {\n      let authSimpleId;\n      // check if exists\n      const authSimple = await this.modelAuthSimple.get({ userId });\n      if (!authSimple) {\n        // create a new one\n        authSimpleId = await this.add({ userId, password: passwordNew });\n      } else {\n        // verify old one\n        const authSimple = await this.localSimple.verify({ userId, password: passwordOld });\n        if (!authSimple) ctx.throw(403);\n        authSimpleId = authSimple.id;\n      }\n\n      // save new\n      await this._passwordSaveNew({ passwordNew, userId });\n\n      // profileUser\n      const profileUser = {\n        module: moduleInfo.relativeName,\n        provider: 'authsimple',\n        profileId: authSimpleId,\n        maxAge: 0,\n        profile: {\n          authSimpleId,\n          rememberMe: false,\n        },\n      };\n\n      // verify\n      const verifyUser = await ctx.bean.user.verify({ state: 'associate', profileUser });\n      if (!verifyUser) ctx.throw(403);\n\n      // force kickout all login records\n      await ctx.bean.userOnline.kickOut({ user: { id: userId } });\n\n      // login now\n      //   always no matter login/associate\n      // await ctx.login(verifyUser);\n    }\n\n    async _passwordSaveNew({ passwordNew, userId }) {\n      // save new\n      const auth = await this.modelAuthSimple.get({\n        userId,\n      });\n      const hash = await this.localSimple.calcPassword({ password: passwordNew });\n      await this.modelAuthSimple.update({\n        id: auth.id,\n        hash,\n      });\n    }\n\n    async passwordReset({ passwordNew, token }) {\n      // token value\n      const cacheKey = `passwordReset:${token}`;\n      const value = await this.cacheDb.get(cacheKey);\n      if (!value) {\n        // expired, send confirmation mail again\n        //  1003: passwordResetEmailExpired\n        ctx.throw.module(moduleInfo.relativeName, 1003);\n      }\n      // userId\n      const userId = value.userId;\n\n      // check if exists\n      const authSimple = await this.modelAuthSimple.get({ userId });\n      if (!authSimple) {\n        // create a new one\n        await this.add({ userId, password: passwordNew });\n      } else {\n        // save new\n        await this._passwordSaveNew({ passwordNew, userId });\n      }\n      // clear token\n      await this.cacheDb.remove(cacheKey);\n      // login antomatically\n      const user = await ctx.bean.user.get({ id: userId });\n      const data = { auth: user.email, password: passwordNew, rememberMe: false };\n      const user2 = await this.signin({ data, state: 'login' });\n      // ok\n      return user2;\n    }\n\n    async passwordForgot({ email }) {\n      // user by email\n      const user = await ctx.bean.user.exists({ email });\n      // link\n      const token = ctx.bean.util.uuidv4();\n      const link = ctx.bean.base.getAbsoluteUrl(`/#!/a/authsimple/passwordReset?token=${token}`);\n      // config\n      const configTemplate = this.configModule.email.templates.passwordReset;\n      // email subject\n      let subject = ctx.text(configTemplate.subject);\n      subject = ctx.bean.util.replaceTemplate(subject, { siteName: ctx.instance.title });\n      // email body\n      let body = ctx.text(configTemplate.body);\n      body = ctx.bean.util.replaceTemplate(body, {\n        userName: user.userName,\n        link,\n        siteName: ctx.instance.title,\n      });\n      // send\n      await ctx.bean.mail.send({\n        scene: null, // use default\n        message: {\n          to: email,\n          subject,\n          text: body,\n        },\n      });\n      // save\n      await this.cacheDb.set(`passwordReset:${token}`, { userId: user.id }, this.configModule.passwordReset.timeout);\n    }\n\n    async emailConfirm({ email, user }) {\n      // save email\n      await ctx.bean.user.setActivated({\n        user: { id: user.id, email, emailConfirmed: 0 },\n      });\n      // link\n      const token = ctx.bean.util.uuidv4();\n      const link = ctx.bean.base.getAbsoluteUrl(`/api/a/authsimple/auth/emailConfirmation?token=${token}`);\n      // config\n      const configTemplate = this.configModule.email.templates.confirmation;\n      // email subject\n      let subject = ctx.text(configTemplate.subject);\n      subject = ctx.bean.util.replaceTemplate(subject, { siteName: ctx.instance.title });\n      // email body\n      let body = ctx.text(configTemplate.body);\n      body = ctx.bean.util.replaceTemplate(body, {\n        userName: user.userName,\n        link,\n        siteName: ctx.instance.title,\n      });\n      // send\n      await ctx.bean.mail.send({\n        scene: null, // use default\n        message: {\n          to: email,\n          subject,\n          text: body,\n        },\n      });\n      // save\n      await this.cacheDb.set(`emailConfirm:${token}`, { userId: user.id }, this.configModule.confirmation.timeout);\n    }\n\n    // invoke by user clicking the link\n    async emailConfirmation({ token }) {\n      // token value\n      const cacheKey = `emailConfirm:${token}`;\n      const value = await this.cacheDb.get(cacheKey);\n      if (!value) {\n        // expired, send confirmation mail again\n        const data = {\n          message: ctx.text('confirmationEmailExpired'),\n          link: '/a/authsimple/emailConfirm',\n          linkText: ctx.text('Resend Confirmation Email'),\n        };\n        const url = ctx.bean.base.getAlertUrl({ data });\n        return ctx.redirect(url);\n      }\n      // userId\n      const userId = value.userId;\n      // activated\n      await ctx.bean.user.setActivated({\n        user: { id: userId, emailConfirmed: 1 },\n      });\n      // clear token\n      await this.cacheDb.remove(cacheKey);\n      // not: login antomatically\n      // ok\n      const data = {\n        message: ctx.text('confirmationEmailSucceeded'),\n        link: '#back',\n        linkText: ctx.text('Close'),\n      };\n      const url = ctx.bean.base.getAlertUrl({ data });\n      return ctx.redirect(url);\n    }\n\n    async checkStatus({ user }) {\n      // check if exists\n      const auth = await this.modelAuthSimple.get({\n        userId: user.id,\n      });\n      return {\n        exists: !!auth,\n      };\n    }\n  }\n  return AuthSimple;\n};\n","module.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class eventBean {\n    async execute(context, next) {\n      const data = context.data;\n      const modelAuthSimple = ctx.model.module(moduleInfo.relativeName).authSimple;\n      // check userIdFrom\n      const authSimple = await modelAuthSimple.get({ userId: data.userIdFrom });\n      if (authSimple) {\n        // delete old record\n        await ctx.model.query('delete from aAuthSimple where deleted=0 and iid=? and userId=?', [\n          ctx.instance.id,\n          data.userIdTo,\n        ]);\n        // update\n        await ctx.model.query('update aAuthSimple a set a.userId=? where a.deleted=0 and a.iid=? and a.userId=?', [\n          data.userIdTo,\n          ctx.instance.id,\n          data.userIdFrom,\n        ]);\n      }\n      // next\n      await next();\n    }\n  }\n\n  return eventBean;\n};\n","const util = require('util');\nconst passwordFn = require('password-hash-and-salt'); // should compile\n\nmodule.exports = function (ctx) {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Simple {\n    get modelAuthSimple() {\n      return ctx.model.module(moduleInfo.relativeName).authSimple;\n    }\n\n    async verify({ userId, password }) {\n      // check\n      if (!password) return false;\n      // authSimple\n      const authSimple = await this.modelAuthSimple.get({\n        userId,\n      });\n      if (!authSimple) return false;\n      // verify\n      const res = await this.verifyPassword({ password, hash: authSimple.hash });\n      if (!res) return false;\n      // ok\n      return authSimple;\n    }\n\n    async verifyPassword({ password, hash }) {\n      const _password = passwordFn(password.toString());\n      const verifyFn = util.promisify(_password.verifyAgainst);\n      return await verifyFn.call(_password, hash);\n    }\n\n    async calcPassword({ password }) {\n      const _password = passwordFn(password.toString());\n      const hashFn = util.promisify(_password.hash);\n      return await hashFn.call(_password);\n    }\n  }\n  return Simple;\n};\n","module.exports = app => {\n  class Version extends app.meta.BeanBase {\n    async update(options) {\n      if (options.version === 1) {\n        // create table: aStatus\n        const sql = `\n          CREATE TABLE aAuthSimple (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            userId int(11) DEFAULT '0',\n            hash text DEFAULT NULL,\n            PRIMARY KEY (id)\n          )\n        `;\n        await this.ctx.model.query(sql);\n      }\n    }\n\n    async init(options) {\n      if (options.version === 1) {\n        // root\n        const userRoot = await this.ctx.bean.user.get({ userName: 'root' });\n        await this.ctx.bean.authSimple.add({\n          userId: userRoot.id,\n          password: options.password,\n        });\n        // admin\n        const userAdmin = await this.ctx.bean.user.get({ userName: 'admin' });\n        if (userAdmin) {\n          await this.ctx.bean.authSimple.add({\n            userId: userAdmin.id,\n            password: '123456',\n          });\n        }\n      }\n    }\n\n    async test() {}\n  }\n\n  return Version;\n};\n","const versionManager = require('./bean/version.manager.js');\nconst eventAccountMigration = require('./bean/event.accountMigration.js');\nconst authProviderSimple = require('./bean/auth.provider.simple.js');\nconst localSimple = require('./bean/local.simple.js');\nconst beanAuthSimple = require('./bean/bean.authSimple.js');\n\nmodule.exports = app => {\n  const beans = {\n    // version\n    'version.manager': {\n      mode: 'app',\n      bean: versionManager,\n    },\n    // event\n    'event.accountMigration': {\n      mode: 'ctx',\n      bean: eventAccountMigration,\n    },\n    // auth.provider\n    'auth.provider.simple': {\n      mode: 'ctx',\n      bean: authProviderSimple,\n    },\n    // local\n    'local.simple': {\n      mode: 'ctx',\n      bean: localSimple,\n    },\n    // global\n    authSimple: {\n      mode: 'ctx',\n      bean: beanAuthSimple,\n      global: true,\n    },\n  };\n  return beans;\n};\n","// eslint-disable-next-line\nmodule.exports = appInfo => {\n  const config = {};\n\n  // defaultPassword\n  config.defaultPassword = '123456';\n\n  // confirmation\n  config.confirmation = {\n    timeout: 2 * 24 * 60 * 60 * 1000, // 2 days\n  };\n\n  // passwordReset\n  config.passwordReset = {\n    timeout: 30 * 60 * 1000, // 30 minutes\n  };\n\n  // account\n  config.account = {\n    url: {\n      emailConfirm: '/a/authsimple/emailConfirm',\n      passwordChange: '/a/authsimple/passwordChange',\n      passwordForgot: '/a/authsimple/passwordForgot',\n      passwordReset: '/a/authsimple/passwordReset',\n    },\n  };\n\n  // captcha scenes\n  config.captcha = {\n    scenes: {\n      passwordChange: null,\n      signup: null,\n      signin: null, // means using default\n      // signin: {\n      //   module: 'a-captchasimple',\n      //   name: 'captcha',\n      // },\n    },\n  };\n\n  // email\n  config.email = {\n    templates: {\n      confirmation: {\n        subject: 'confirmationEmailSubject',\n        body: 'confirmationEmailBody',\n      },\n      passwordReset: {\n        subject: 'passwordResetEmailSubject',\n        body: 'passwordResetEmailBody',\n      },\n    },\n  };\n\n  return config;\n};\n","// error code should start from 1001\nmodule.exports = {\n  1001: 'Authentication Failed',\n  1002: 'User is Disabled',\n  1003: 'passwordResetEmailExpired',\n};\n","// confirmationEmail\n//   subject\nconst confirmationEmailSubject = '[{{siteName}}] Account Confirmation';\n//   body\nconst confirmationEmailBody = `\nHi {{userName}},\n\nWelcome to join us. Please click this link to confirm your email:\n\n{{link}}\n\nRegards,\n{{siteName}} Team\n`;\n\n// passwordResetEmail\n//   subject\nconst passwordResetEmailSubject = '[{{siteName}}] Password Reset';\n//   body\nconst passwordResetEmailBody = `\nHi {{userName}},\n\nTo reset your password, visit the following address:\n\n{{link}}\n\nRegards,\n{{siteName}} Team\n`;\n\n//\nmodule.exports = {\n  confirmationEmailExpired: 'This email confirmation link has expired',\n  confirmationEmailSucceeded: 'Your email address has been confirmed',\n  confirmationEmailSubject,\n  confirmationEmailBody,\n  passwordResetEmailExpired: 'This password reset link has expired',\n  passwordResetEmailSubject,\n  passwordResetEmailBody,\n};\n","// confirmationEmail\n//   subject\nconst confirmationEmailSubject = '[{{siteName}}] 账号确认';\n//   body\nconst confirmationEmailBody = `\n您好，{{userName}}，\n\n欢迎加入我们。请点击以下链接验证您的邮件：\n\n{{link}}\n\n此致，\n{{siteName}} 团队\n`;\n\n// passwordResetEmail\n//   subject\nconst passwordResetEmailSubject = '[{{siteName}}] 重置密码';\n//   body\nconst passwordResetEmailBody = `\n您好，{{userName}}，\n\n请点击以下链接重置密码：\n\n{{link}}\n\n此致，\n{{siteName}} 团队\n`;\n\nmodule.exports = {\n  Close: '关闭',\n  'User/Password': '用户/密码',\n  'Authentication Failed': '认证失败',\n  'User is Disabled': '用户被禁用',\n  'Auth-Simple': '认证-简单',\n  'Reset Password': '重置密码',\n  'Element Exists': '元素已存在',\n  'Cannot Contain __': '不能包含__',\n  'Resend Confirmation Email': '重新发送确认邮件',\n  'Email Address does not Exist': '邮件地址不存在',\n  confirmationEmailExpired: '确认邮件链接已经过期',\n  confirmationEmailSucceeded: '您的邮件地址已经确认',\n  confirmationEmailSubject,\n  confirmationEmailBody,\n  passwordResetEmailExpired: '重置密码链接已经过期',\n  passwordResetEmailSubject,\n  passwordResetEmailBody,\n};\n","module.exports = {\n  'en-us': require('./locale/en-us.js'),\n  'zh-cn': require('./locale/zh-cn.js'),\n};\n","module.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  const provider = moduleInfo.name;\n  return {\n    providers: {\n      [provider]: {\n        meta: {\n          title: 'User/Password',\n          inline: true,\n          mode: 'direct',\n          bean: 'simple',\n          render: 'blockSignin',\n          icon: { f7: ':auth:password' },\n        },\n      },\n    },\n  };\n};\n","const passport = require('passport-strategy');\nconst util = require('util');\n\nfunction Strategy(options, verify) {\n  if (typeof options === 'function') {\n    verify = options;\n    options = {};\n  }\n  if (!verify) {\n    throw new TypeError('LocalStrategy requires a verify callback');\n  }\n\n  passport.Strategy.call(this);\n  this.name = 'simple';\n  this._verify = verify;\n  this._passReqToCallback = options.passReqToCallback;\n}\n\n/**\n * Inherit from `passport.Strategy`.\n */\nutil.inherits(Strategy, passport.Strategy);\n\nStrategy.prototype.authenticate = function (req) {\n  // self\n  const self = this;\n  const ctx = req.ctx;\n\n  // check\n  if (req.method === 'GET') {\n    // not allow\n    return self.error(ctx.parseFail(403));\n  }\n\n  // verified\n  function verified(err, user, info) {\n    if (err) {\n      return self.error(err);\n    }\n    if (!user) {\n      return self.fail(info);\n    }\n    ctx.success(user);\n    self.success(user, info);\n  }\n\n  try {\n    if (self._passReqToCallback) {\n      this._verify(req, req.body, verified);\n    } else {\n      this._verify(req.body, verified);\n    }\n  } catch (ex) {\n    return self.error(ex);\n  }\n};\n\nmodule.exports = Strategy;\n","module.exports = app => {\n  const keywords = {};\n  keywords.exists = {\n    async: true,\n    type: 'string',\n    errors: true,\n    compile() {\n      return async function (data, path, rootData, name) {\n        const ctx = this;\n        const res = await ctx.bean.user.exists({ [name]: data });\n        if (res && res.id !== ctx.state.user.agent.id) {\n          const errors = [{ keyword: 'x-exists', params: [], message: ctx.text('Element Exists') }];\n          throw new app.meta.ajv.ValidationError(errors);\n        }\n        if (!res && data.indexOf('__') > -1) {\n          const errors = [{ keyword: 'x-exists', params: [], message: ctx.text('Cannot Contain __') }];\n          throw new app.meta.ajv.ValidationError(errors);\n        }\n        return true;\n      };\n    },\n  };\n  keywords.passwordForgotEmail = {\n    async: true,\n    type: 'string',\n    errors: true,\n    compile() {\n      return async function (data, path, rootData, name) {\n        const ctx = this;\n        const res = await ctx.bean.user.exists({ [name]: data });\n        if (!res) {\n          const errors = [\n            { keyword: 'x-passwordForgotEmail', params: [], message: ctx.text('Email Address does not Exist') },\n          ];\n          throw new app.meta.ajv.ValidationError(errors);\n        }\n        return true;\n      };\n    },\n  };\n  return keywords;\n};\n","module.exports = app => {\n  const schemas = {};\n  schemas.emailConfirm = {\n    type: 'object',\n    properties: {\n      userName: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Username',\n        ebReadOnly: true,\n      },\n      email: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Email',\n        notEmpty: true,\n        format: 'email',\n        'x-exists': true,\n      },\n    },\n  };\n  return schemas;\n};\n","module.exports = app => {\n  const schemas = {};\n  schemas.passwordChange = {\n    type: 'object',\n    properties: {\n      passwordOld: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Old Password',\n        ebParams: {\n          secure: true,\n        },\n        notEmpty: true,\n        minLength: 6,\n      },\n      passwordNew: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'New Password',\n        ebParams: {\n          secure: true,\n        },\n        notEmpty: true,\n        minLength: 6,\n      },\n      passwordNewAgain: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'New Password Again',\n        ebParams: {\n          secure: true,\n        },\n        notEmpty: true,\n        const: { $data: '1/passwordNew' },\n      },\n    },\n  };\n  return schemas;\n};\n","module.exports = app => {\n  const schemas = {};\n  schemas.passwordForgot = {\n    type: 'object',\n    properties: {\n      email: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Email',\n        notEmpty: true,\n        format: 'email',\n        'x-passwordForgotEmail': true,\n      },\n    },\n  };\n  return schemas;\n};\n","module.exports = app => {\n  const schemas = {};\n  schemas.passwordReset = {\n    type: 'object',\n    properties: {\n      passwordNew: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'New Password',\n        ebParams: {\n          secure: true,\n        },\n        notEmpty: true,\n        minLength: 6,\n      },\n      passwordNewAgain: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'New Password Again',\n        ebParams: {\n          secure: true,\n        },\n        notEmpty: true,\n        const: { $data: '1/passwordNew' },\n      },\n    },\n  };\n  return schemas;\n};\n","module.exports = app => {\n  const schemas = {};\n  schemas.signin = {\n    type: 'object',\n    properties: {\n      auth: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Your Username/Mobile/Email',\n        notEmpty: true,\n      },\n      password: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Your Password',\n        ebParams: {\n          secure: true,\n        },\n        notEmpty: true,\n        minLength: 6,\n      },\n      rememberMe: {\n        type: 'boolean',\n        ebType: 'toggle',\n        ebTitle: 'Remember Me',\n      },\n    },\n  };\n  return schemas;\n};\n","module.exports = app => {\n  const schemas = {};\n  schemas.signup = {\n    type: 'object',\n    properties: {\n      userName: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Username',\n        notEmpty: true,\n        'x-exists': true,\n      },\n      realName: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Realname',\n        notEmpty: true,\n      },\n      email: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Email',\n        notEmpty: true,\n        format: 'email',\n        'x-exists': true,\n      },\n      // mobile: {\n      //   type: 'string',\n      //   ebType: 'text',\n      //   ebTitle: 'Mobile',\n      //   notEmpty: true,\n      //   'x-exists': true,\n      // },\n      password: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Password',\n        ebParams: {\n          secure: true,\n        },\n        notEmpty: true,\n        minLength: 6,\n      },\n      passwordAgain: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Password Again',\n        ebParams: {\n          secure: true,\n        },\n        notEmpty: true,\n        const: { $data: '1/password' },\n      },\n    },\n  };\n  return schemas;\n};\n","const emailConfirm = require('./schema/emailConfirm.js');\nconst passwordChange = require('./schema/passwordChange.js');\nconst passwordForgot = require('./schema/passwordForgot.js');\nconst passwordReset = require('./schema/passwordReset.js');\nconst signin = require('./schema/signin.js');\nconst signup = require('./schema/signup.js');\n\nmodule.exports = app => {\n  const schemas = {};\n  Object.assign(schemas, emailConfirm(app));\n  Object.assign(schemas, passwordChange(app));\n  Object.assign(schemas, passwordForgot(app));\n  Object.assign(schemas, passwordReset(app));\n  Object.assign(schemas, signin(app));\n  Object.assign(schemas, signup(app));\n  // ok\n  return schemas;\n};\n","module.exports = app => {\n  class AuthController extends app.Controller {\n    async signin() {\n      // data: { auth, password, rememberMe }\n      const data = this.ctx.request.body.data;\n      const state = this.ctx.request.body.state;\n      const res = await this.service.auth.signin({ data, state });\n      this.ctx.success(res);\n    }\n\n    async signup() {\n      const { userName, realName, email, mobile, password } = this.ctx.request.body.data;\n      const state = this.ctx.request.body.state;\n      const res = await this.service.auth.signup({\n        user: this.ctx.state.user.agent,\n        state,\n        userName,\n        realName,\n        email,\n        mobile,\n        password,\n      });\n      this.ctx.success(res);\n    }\n\n    async passwordChange() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const { passwordOld, passwordNew } = this.ctx.request.body.data;\n      await this.service.auth.passwordChange({ passwordOld, passwordNew, userId: this.ctx.state.user.agent.id });\n      this.ctx.success();\n    }\n\n    async passwordForgot() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const { email } = this.ctx.request.body.data;\n      await this.service.auth.passwordForgot({ email });\n      this.ctx.success();\n    }\n\n    async passwordReset() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const { passwordNew } = this.ctx.request.body.data;\n      const token = this.ctx.request.body.token;\n      await this.service.auth.passwordReset({ passwordNew, token });\n      this.ctx.success();\n    }\n\n    async emailConfirm() {\n      const { email } = this.ctx.request.body.data;\n      await this.service.auth.emailConfirm({ email, user: this.ctx.state.user.agent });\n      this.ctx.success();\n    }\n\n    async emailConfirmation() {\n      const token = this.ctx.request.query.token;\n      await this.service.auth.emailConfirmation({ token });\n      // this.ctx.success();\n    }\n\n    async checkStatus() {\n      const res = await this.service.auth.checkStatus({ user: this.ctx.state.user.agent });\n      this.ctx.success(res);\n    }\n  }\n  return AuthController;\n};\n","const auth = require('./controller/auth.js');\n\nmodule.exports = app => {\n  const controllers = {\n    auth,\n  };\n  return controllers;\n};\n","const routes = require('./routes.js');\nconst services = require('./services.js');\nconst models = require('./models.js');\nconst config = require('./config/config.js');\nconst locales = require('./config/locales.js');\nconst errors = require('./config/errors.js');\nconst metaFn = require('./meta.js');\n\nmodule.exports = app => {\n  // beans\n  const beans = require('./beans.js')(app);\n  // controllers\n  const controllers = require('./controllers.js')(app);\n  return {\n    beans,\n    routes,\n    controllers,\n    services,\n    models,\n    config,\n    locales,\n    errors,\n    meta: metaFn(app),\n  };\n};\n","module.exports = app => {\n  // auth\n  const auth = require('./config/passport/auth.js')(app);\n  // keywords\n  const keywords = require('./config/validation/keywords.js')(app);\n  // schemas\n  const schemas = require('./config/validation/schemas.js')(app);\n  return {\n    auth,\n    validation: {\n      validators: {},\n      keywords: {\n        'x-exists': keywords.exists,\n        'x-passwordForgotEmail': keywords.passwordForgotEmail,\n      },\n      schemas,\n    },\n    event: {\n      implementations: {\n        'a-base:accountMigration': 'accountMigration',\n      },\n    },\n  };\n};\n","module.exports = app => {\n  class AuthSimple extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aAuthSimple', options: { disableDeleted: true } });\n    }\n  }\n\n  return AuthSimple;\n};\n","const authSimple = require('./model/authSimple.js');\n\nmodule.exports = {\n  authSimple,\n};\n","module.exports = [\n  {\n    method: 'post',\n    path: 'auth/signin',\n    controller: 'auth',\n    middlewares: 'captchaVerify',\n    meta: {\n      captchaVerify: { scene: { name: 'signin' } },\n    },\n  },\n  {\n    method: 'post',\n    path: 'auth/signup',\n    controller: 'auth',\n    middlewares: 'captchaVerify,validate',\n    meta: {\n      captchaVerify: { scene: { name: 'signup' } },\n      validate: { validator: 'signup' },\n    },\n  },\n  {\n    method: 'post',\n    path: 'auth/passwordChange',\n    controller: 'auth',\n    middlewares: 'captchaVerify,validate',\n    meta: {\n      captchaVerify: { scene: { name: 'passwordChange' } },\n      validate: { validator: 'passwordChange' },\n    },\n  },\n  {\n    method: 'post',\n    path: 'auth/passwordForgot',\n    controller: 'auth',\n    middlewares: 'validate',\n    meta: { validate: { validator: 'passwordForgot' } },\n  },\n  {\n    method: 'post',\n    path: 'auth/passwordReset',\n    controller: 'auth',\n    middlewares: 'validate',\n    meta: { validate: { validator: 'passwordReset' } },\n  },\n  {\n    method: 'post',\n    path: 'auth/emailConfirm',\n    controller: 'auth',\n    middlewares: 'validate',\n    meta: { validate: { validator: 'emailConfirm' } },\n  },\n  { method: 'get', path: 'auth/emailConfirmation', controller: 'auth' },\n  { method: 'post', path: 'auth/checkStatus', controller: 'auth', meta: { auth: { user: true } } },\n];\n","module.exports = app => {\n  // const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Auth extends app.Service {\n    // mobile: not use\n    async signup({ user, state = 'login', userName, realName, email, /* mobile,*/ password }) {\n      return await this.ctx.bean.authSimple.signup({ user, state, userName, realName, email, /* mobile,*/ password });\n    }\n\n    // data: { auth, password, rememberMe }\n    async signin({ data, state = 'login' }) {\n      return await this.ctx.bean.authSimple.signin({ data, state });\n    }\n\n    async add({ userId, password }) {\n      return await this.ctx.bean.authSimple.add({ userId, password });\n    }\n\n    async passwordChange({ passwordOld, passwordNew, userId }) {\n      return await this.ctx.bean.authSimple.passwordChange({ passwordOld, passwordNew, userId });\n    }\n\n    async passwordReset({ passwordNew, token }) {\n      return await this.ctx.bean.authSimple.passwordReset({ passwordNew, token });\n    }\n\n    async passwordForgot({ email }) {\n      return await this.ctx.bean.authSimple.passwordForgot({ email });\n    }\n\n    async emailConfirm({ email, user }) {\n      return await this.ctx.bean.authSimple.emailConfirm({ email, user });\n    }\n\n    // invoke by user clicking the link\n    async emailConfirmation({ token }) {\n      return await this.ctx.bean.authSimple.emailConfirmation({ token });\n    }\n\n    async checkStatus({ user }) {\n      return await this.ctx.bean.authSimple.checkStatus({ user });\n    }\n  }\n\n  return Auth;\n};\n","const auth = require('./service/auth.js');\nmodule.exports = {\n  auth,\n};\n","module.exports = require(\"crypto\");","module.exports = require(\"passport-strategy\");","module.exports = require(\"util\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(421);\n",""],"names":[],"sourceRoot":""}