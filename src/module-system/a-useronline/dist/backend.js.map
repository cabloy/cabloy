{"version":3,"file":"backend.js","mappings":";;;;;;AAAA;AACA;AACA;AACA;;;;;;;;ACHA;AACA;AACA,mBAAmB,gCAAgC;AACnD;AACA,uCAAuC,gCAAgC;AACvE;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,eAAe;AACf;;AAEA,iBAAiB,+BAA+B;AAChD;AACA,sCAAsC,+BAA+B;AACrE;AACA;AACA;AACA;AACA;AACA;;AAEA,yBAAyB,0BAA0B;AACnD;AACA,iCAAiC,0BAA0B;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB,YAAY;AACZ;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,iCAAiC;AACpD;AACA,2BAA2B,iCAAiC;AAC5D;AACA;AACA;AACA;AACA;;AAEA,kBAAkB,6CAA6C;AAC/D;AACA,0BAA0B,6CAA6C;AACvE;AACA;AACA;AACA;;AAEA,mBAAmB,+BAA+B;AAClD;AACA,2BAA2B,+BAA+B;AAC1D;AACA;AACA;AACA,OAAO;AACP;;AAEA,6BAA6B,iDAAiD;AAC9E;AACA,iDAAiD,iDAAiD;AAClG;AACA;AACA;AACA;AACA,yDAAyD,iBAAiB;AAC1E;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACvHA;AACA;AACA,mBAAmB,gCAAgC;AACnD;AACA,uCAAuC,gCAAgC;AACvE;AACA;AACA;AACA,OAAO;AACP;AACA,eAAe;AACf;;AAEA,iBAAiB,+BAA+B;AAChD;AACA,sCAAsC,+BAA+B;AACrE;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,iCAAiC;AACpD;AACA,2BAA2B,iCAAiC;AAC5D;AACA;AACA;AACA;AACA;;AAEA,kBAAkB,6CAA6C;AAC/D;AACA,0BAA0B,6CAA6C;AACvE;AACA;AACA;AACA;;AAEA,mBAAmB,+BAA+B;AAClD;AACA,2BAA2B,+BAA+B;AAC1D;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;AC1DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,qBAAqB,eAAe;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,qBAAqB;AACtE;AACA;AACA,2DAA2D,qBAAqB;AAChF;AACA;AACA;AACA;;AAEA,sBAAsB,MAAM;AAC5B;AACA;AACA,oDAAoD,QAAQ;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA,oBAAoB,MAAM;AAC1B;AACA,+CAA+C,MAAM;AACrD;AACA,4BAA4B,MAAM;AAClC;AACA,2CAA2C,mBAAmB;AAC9D;;AAEA,qBAAqB,MAAM;AAC3B;AACA,0CAA0C,wBAAwB,IAAI,SAAS,UAAU;AACzF;;AAEA,oCAAoC,sBAAsB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,SAAS;AAClD;;AAEA;AACA;AACA;;AAEA,8BAA8B,qBAAqB;AACnD;AACA;AACA,kDAAkD,QAAQ;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA,qCAAqC,qBAAqB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACrLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY,iEAAiE;AAC7E;AACA,YAAY,oEAAoE;AAChF;AACA,qDAAqD,yCAAyC;AAC9F;AACA;AACA;AACA,YAAY,iEAAiE;AAC7E;AACA,qDAAqD,gDAAgD;AACrG;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;ACpEA,uBAAuB,mBAAO,CAAC,GAA2B;AAC1D,uBAAuB,mBAAO,CAAC,GAA2B;AAC1D,8BAA8B,mBAAO,CAAC,GAAkC;AACxE,uBAAuB,mBAAO,CAAC,GAA2B;;AAE1D;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACRA;AACA;;;;;;;;ACDA;AACA;AACA;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACLA;AACA,WAAW,mBAAO,CAAC,GAAmB;AACtC,WAAW,mBAAO,CAAC,EAAmB;AACtC;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,mFAAmF;AAC7F;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB,qBAAqB;AACrB,mBAAmB;AACnB,iBAAiB;AACjB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,iBAAiB;AACjB,eAAe;AACf;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,iBAAiB;AACjB,eAAe;AACf;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjFA,iCAAiC,mBAAO,CAAC,GAAsC;;AAE/E;AACA;AACA;AACA;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,QAAQ;AACR;AACA;AACA;;;;;;;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;;;;;;;;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;;;;;;;;AC/BA,mBAAmB,mBAAO,CAAC,GAAwB;AACnD,0BAA0B,mBAAO,CAAC,GAA+B;;AAEjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;;;;;;;ACZA,mBAAmB,mBAAO,CAAC,GAA4B;;AAEvD;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA,eAAe,mBAAO,CAAC,EAAoB;AAC3C,gBAAgB,mBAAO,CAAC,EAAqB;AAC7C,eAAe,mBAAO,CAAC,GAAoB;;AAE3C;AACA;AACA,eAAe,mBAAO,CAAC,GAAW;AAClC;AACA,gBAAgB,mBAAO,CAAC,GAAY;AACpC;AACA,iBAAiB,mBAAO,CAAC,GAAa;AACtC;AACA,sBAAsB,mBAAO,CAAC,EAAkB;AAChD;AACA,mBAAmB,mBAAO,CAAC,GAAe;AAC1C;AACA,iBAAiB,mBAAO,CAAC,GAAa;AACtC;AACA,eAAe,mBAAO,CAAC,GAAW;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChCA;AACA;AACA;AACA,kBAAkB,mBAAO,CAAC,GAAgC;AAC1D;AACA,wBAAwB,mBAAO,CAAC,GAA4B;AAC5D,0BAA0B,mBAAO,CAAC,GAA8B;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,gCAAgC;AACtD;AACA;AACA,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,qBAAqB;AACrB;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,OAAO;AACP,kBAAkB;AAClB;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;;;;;;;;ACtGA;AACA;AACA;AACA,mBAAmB,iCAAiC,yBAAyB;AAC7E;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA,mBAAmB,wCAAwC,yBAAyB;AACpF;AACA;AACA;AACA;;;;;;;;ACPA,mBAAmB,mBAAO,CAAC,GAAuB;AAClD,0BAA0B,mBAAO,CAAC,GAA8B;;AAEhE;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS,yEAAyE;AAChG,KAAK;AACL;AACA;AACA;;;;;;;;ACVA;AACA;AACA,oBAAoB,KAAK;AACzB,yDAAyD,gBAAgB;AACzE,qBAAqB;AACrB,+CAA+C,MAAM;AACrD;AACA;;AAEA;AACA;;;;;;;;ACVA,mBAAmB,mBAAO,CAAC,EAAyB;;AAEpD;AACA;AACA;AACA;AACA;AACA;;;;;;;UCPA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;UEtBA;UACA;UACA;UACA","sources":["webpack://egg-born-module-a-useronline/./backend/src/aops.js","webpack://egg-born-module-a-useronline/./backend/src/bean/atom.userOnline.js","webpack://egg-born-module-a-useronline/./backend/src/bean/atom.userOnlineHistory.js","webpack://egg-born-module-a-useronline/./backend/src/bean/bean.userOnline.js","webpack://egg-born-module-a-useronline/./backend/src/bean/version.manager.js","webpack://egg-born-module-a-useronline/./backend/src/beans.js","webpack://egg-born-module-a-useronline/./backend/src/config/config.js","webpack://egg-born-module-a-useronline/./backend/src/config/errors.js","webpack://egg-born-module-a-useronline/./backend/src/config/locale/en-us.js","webpack://egg-born-module-a-useronline/./backend/src/config/locale/zh-cn.js","webpack://egg-born-module-a-useronline/./backend/src/config/locales.js","webpack://egg-born-module-a-useronline/./backend/src/config/static/layout/layoutAtomListUserOnline.js","webpack://egg-born-module-a-useronline/./backend/src/config/static/layouts.js","webpack://egg-born-module-a-useronline/./backend/src/config/static/resources.js","webpack://egg-born-module-a-useronline/./backend/src/config/validation/schema/userOnline.js","webpack://egg-born-module-a-useronline/./backend/src/config/validation/schema/userOnlineHistory.js","webpack://egg-born-module-a-useronline/./backend/src/config/validation/schemas.js","webpack://egg-born-module-a-useronline/./backend/src/controller/userOnline.js","webpack://egg-born-module-a-useronline/./backend/src/controllers.js","webpack://egg-born-module-a-useronline/./backend/src/main.js","webpack://egg-born-module-a-useronline/./backend/src/meta.js","webpack://egg-born-module-a-useronline/./backend/src/model/userOnline.js","webpack://egg-born-module-a-useronline/./backend/src/model/userOnlineHistory.js","webpack://egg-born-module-a-useronline/./backend/src/models.js","webpack://egg-born-module-a-useronline/./backend/src/routes.js","webpack://egg-born-module-a-useronline/./backend/src/service/userOnline.js","webpack://egg-born-module-a-useronline/./backend/src/services.js","webpack://egg-born-module-a-useronline/webpack/bootstrap","webpack://egg-born-module-a-useronline/webpack/before-startup","webpack://egg-born-module-a-useronline/webpack/startup","webpack://egg-born-module-a-useronline/webpack/after-startup"],"sourcesContent":["module.exports = app => {\n  const aops = {};\n  return aops;\n};\n","module.exports = app => {\n  class Atom extends app.meta.AtomBase {\n    async create({ atomClass, item, options, user }) {\n      // super\n      const key = await super.create({ atomClass, item, options, user });\n      // add userOnline\n      const res = await this.ctx.model.userOnline.insert({\n        atomId: key.atomId,\n        userId: item.userId,\n      });\n      // return key\n      return { atomId: key.atomId, itemId: res.insertId };\n    }\n\n    async read({ atomClass, options, key, user }) {\n      // super\n      const item = await super.read({ atomClass, options, key, user });\n      if (!item) return null;\n      // meta\n      await this._getMeta(item, options);\n      // ok\n      return item;\n    }\n\n    async selectBefore({ atomClass, options, user }) {\n      // super\n      await super.selectBefore({ atomClass, options, user });\n      // orders\n      for (const order of options.orders) {\n        if (order[0] === 'f.onlineStatus') {\n          order[0] = 'f.expireTime';\n        }\n      }\n      // where\n      for (const key of Object.keys(options.where)) {\n        if (key === 'f.onlineStatus') {\n          let clause = options.where[key];\n          if (clause.val === 1) {\n            // offline\n            clause = { op: '<=', val: new Date() };\n          } else {\n            // online\n            clause = { op: '>', val: new Date() };\n          }\n          delete options.where['f.onlineStatus'];\n          options.where['f.expireTime'] = clause;\n        }\n      }\n    }\n\n    async select({ atomClass, options, items, user }) {\n      // super\n      await super.select({ atomClass, options, items, user });\n      // meta\n      for (const item of items) {\n        await this._getMeta(item, options);\n      }\n    }\n\n    async write({ atomClass, target, key, item, options, user }) {\n      // super\n      await super.write({ atomClass, target, key, item, options, user });\n      // update userOnline\n      const data = await this.ctx.model.userOnline.prepareData(item);\n      await this.ctx.model.userOnline.update(data);\n    }\n\n    async delete({ atomClass, key, options, user }) {\n      // super\n      await super.delete({ atomClass, key, options, user });\n      // delete userOnline\n      await this.ctx.model.userOnline.delete({\n        id: key.itemId,\n      });\n    }\n\n    async checkRightAction({ atom, atomClass, action, stage, user, checkFlow }) {\n      // super\n      const res = await super.checkRightAction({ atom, atomClass, action, stage, user, checkFlow });\n      if (!res) return res;\n      if (atom.atomStage !== 1) return res;\n      if (action !== 101) return res;\n      // kickOut\n      const item = await this.ctx.model.userOnline.get({ id: atom.itemId });\n      if (action === 101 && this._getOnlineStatus(item) === 2) return res;\n      return null;\n    }\n\n    _getOnlineStatus(item) {\n      return item.expireTime <= new Date() ? 1 : 2;\n    }\n\n    async _translate(item) {\n      item.onlineStatus = this._getOnlineStatus(item);\n      const dictItem = await this.ctx.bean.dict.findItem({\n        dictKey: 'a-dictbooster:dictOnlineStatus',\n        code: item.onlineStatus,\n      });\n      item._onlineStatusTitle = dictItem.titleFull;\n      item._onlineStatusTitleLocale = dictItem.titleLocaleFull;\n    }\n\n    async _getMeta(item, options) {\n      // layout: list/table/mobile/pc\n      const layout = options && options.layout;\n      // online status\n      await this._translate(item);\n      // meta\n      const meta = this._ensureItemMeta(item);\n      // meta.flags\n      if (layout !== 'table' && item.onlineStatus === 2) {\n        meta.flags.push(item._onlineStatusTitleLocale);\n      }\n      // meta.summary\n      meta.summary = item.description;\n    }\n  }\n\n  return Atom;\n};\n","module.exports = app => {\n  class Atom extends app.meta.AtomBase {\n    async create({ atomClass, item, options, user }) {\n      // super\n      const key = await super.create({ atomClass, item, options, user });\n      // add userOnlineHistory\n      const res = await this.ctx.model.userOnlineHistory.insert({\n        atomId: key.atomId,\n      });\n      // return key\n      return { atomId: key.atomId, itemId: res.insertId };\n    }\n\n    async read({ atomClass, options, key, user }) {\n      // super\n      const item = await super.read({ atomClass, options, key, user });\n      if (!item) return null;\n      // meta\n      this._getMeta(item);\n      // ok\n      return item;\n    }\n\n    async select({ atomClass, options, items, user }) {\n      // super\n      await super.select({ atomClass, options, items, user });\n      // meta\n      for (const item of items) {\n        this._getMeta(item);\n      }\n    }\n\n    async write({ atomClass, target, key, item, options, user }) {\n      // super\n      await super.write({ atomClass, target, key, item, options, user });\n      // update userOnlineHistory\n      const data = await this.ctx.model.userOnlineHistory.prepareData(item);\n      await this.ctx.model.userOnlineHistory.update(data);\n    }\n\n    async delete({ atomClass, key, options, user }) {\n      // super\n      await super.delete({ atomClass, key, options, user });\n      // delete userOnlineHistory\n      await this.ctx.model.userOnlineHistory.delete({\n        id: key.itemId,\n      });\n    }\n\n    _getMeta(item) {\n      const meta = this._ensureItemMeta(item);\n      // meta.flags\n      // meta.summary\n      meta.summary = item.description;\n    }\n  }\n\n  return Atom;\n};\n","module.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  const __atomClassUserOnline = {\n    module: moduleInfo.relativeName,\n    atomClassName: 'userOnline',\n  };\n  const __atomClassUserOnlineHistory = {\n    module: moduleInfo.relativeName,\n    atomClassName: 'userOnlineHistory',\n  };\n  class UserOnline extends ctx.app.meta.BeanModuleBase {\n    constructor(moduleName) {\n      super(ctx, 'userOnline');\n      this.moduleName = moduleName || ctx.module.info.relativeName;\n    }\n\n    get modelUserOnline() {\n      return ctx.model.module(moduleInfo.relativeName).userOnline;\n    }\n\n    get configUserOnline() {\n      return ctx.config.module(moduleInfo.relativeName);\n    }\n\n    get configUserOnlineExpired() {\n      return this.configUserOnline.userOnline.expired;\n    }\n\n    async register({ user, isLogin }) {\n      user = user.agent || user.op;\n      // data\n      const data = {\n        onlineIPLast: ctx.ip,\n        onlineTimeLast: new Date(),\n        expireTime: this._combineExpireTime(),\n      };\n      // userOnline\n      const res = await this._insertUserOnline({ user, data, isLogin });\n      if (res) {\n        // userOnlineHistory\n        const res2 = await this._insertUserOnlineHistory({ user, data, isLogin });\n        Object.assign(res, res2);\n      }\n      return res;\n    }\n\n    async heartBeat({ user }) {\n      user = user.agent || user.op;\n      const userId = user.id;\n      const item = await this.modelUserOnline.get({ userId });\n      if (!item) return false;\n      if (item.expireTime <= Date.now()) return false;\n      // Renewal\n      if (item.expireTime - Date.now() < this.configUserOnlineExpired / 2) {\n        await this.modelUserOnline.update({\n          id: item.id,\n          expireTime: this._combineExpireTime(),\n        });\n      }\n      return true;\n    }\n\n    async kickOut({ user }) {\n      // redis\n      await ctx.bean.auth._clearRedisAuthAll({ user });\n      // offline\n      await this._offline({ user });\n      // publish\n      await this.sendMessageSystemLogout({ user, type: 'all' });\n    }\n\n    async _offline({ user }) {\n      const userId = user.id;\n      await this.modelUserOnline.update({ expireTime: new Date() }, { where: { userId } });\n    }\n\n    async sendMessageSystemLogout({ user, type, provider }) {\n      const userId = user.id;\n      // content\n      const content = {\n        code: 401,\n        message: 'logout',\n        type,\n      };\n      if (provider) {\n        content.provider = provider;\n      }\n      // send message-system\n      const message = {\n        userIdTo: userId,\n        content,\n      };\n      ctx.bean.io.publishMessageSystem({ message });\n    }\n\n    _combineExpireTime() {\n      return new Date(Date.now() + this.configUserOnlineExpired);\n    }\n\n    async _insertUserOnline({ user, data, isLogin }) {\n      const userId = user.id;\n      // check if exists\n      let item = await this.modelUserOnline.get({ userId });\n      if (!item) {\n        //   create\n        const atomKey = await ctx.bean.atom.create({\n          atomClass: __atomClassUserOnline,\n          user,\n          item: {\n            atomName: user.userName,\n            userId,\n          },\n        });\n        item = {\n          id: atomKey.itemId,\n          loginCount: 0,\n          onlineCount: 0,\n          expireTime: 0,\n        };\n      }\n      // isLogin\n      if (isLogin) {\n        data = {\n          loginCount: item.loginCount + 1,\n          loginIPLast: data.onlineIPLast,\n          loginTimeLast: data.onlineTimeLast,\n          onlineCount: item.onlineCount + 1,\n          ...data,\n        };\n      } else {\n        // check expireTime\n        if (item.expireTime > Date.now()) return null;\n        data = {\n          onlineCount: item.onlineCount + 1,\n          ...data,\n        };\n      }\n      // update\n      await this.modelUserOnline.update({\n        id: item.id,\n        ...data,\n      });\n      // ok\n      return {\n        userOnlineId: item.id,\n      };\n    }\n\n    async _insertUserOnlineHistory({ user, data, isLogin }) {\n      const userId = user.id;\n      //   atomName\n      const atomName = user.userName;\n      //   create\n      const atomKey = await ctx.bean.atom.create({\n        atomClass: __atomClassUserOnlineHistory,\n        user,\n        item: {\n          atomName,\n        },\n      });\n      //   write\n      await ctx.bean.atom.write({\n        key: atomKey,\n        item: {\n          userId,\n          onlineIP: data.onlineIPLast,\n          onlineTime: data.onlineTimeLast,\n          isLogin,\n        },\n        options: {\n          ignoreValidate: true,\n        },\n        user,\n      });\n      // ok\n      return {\n        userOnlineHistoryId: atomKey.itemId,\n      };\n    }\n  }\n  return UserOnline;\n};\n","module.exports = app => {\n  class Version extends app.meta.BeanBase {\n    async update(options) {\n      if (options.version === 1) {\n        // create table: aUserOnline\n        let sql = `\n          CREATE TABLE aUserOnline (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            atomId int(11) DEFAULT '0',\n            userId int(11) DEFAULT '0',\n            loginCount int(11) DEFAULT '0',\n            loginIPLast varchar(50) DEFAULT NULL,\n            loginTimeLast timestamp DEFAULT NULL,\n            onlineCount int(11) DEFAULT '0',\n            onlineIPLast varchar(50) DEFAULT NULL,\n            onlineTimeLast timestamp DEFAULT NULL,\n            expireTime timestamp DEFAULT NULL,\n            PRIMARY KEY (id)\n          )\n        `;\n        await this.ctx.model.query(sql);\n        // create table: aUserOnlineHistory\n        sql = `\n          CREATE TABLE aUserOnlineHistory (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            atomId int(11) DEFAULT '0',\n            userId int(11) DEFAULT '0',\n            onlineIP varchar(50) DEFAULT NULL,\n            onlineTime timestamp DEFAULT NULL,\n            isLogin int(11) DEFAULT '0',\n            PRIMARY KEY (id)\n          )\n        `;\n        await this.ctx.model.query(sql);\n      }\n    }\n\n    async init(options) {\n      if (options.version === 1) {\n        // add role rights\n        let roleRights = [\n          //\n          { roleName: 'system', action: 'read', scopeNames: 'authenticated' },\n          // custom\n          { roleName: 'system', action: 'kickOut', scopeNames: 'authenticated' },\n        ];\n        await this.ctx.bean.role.addRoleRightBatch({ atomClassName: 'userOnline', roleRights });\n        //\n        roleRights = [\n          //\n          { roleName: 'system', action: 'read', scopeNames: 'authenticated' },\n        ];\n        await this.ctx.bean.role.addRoleRightBatch({ atomClassName: 'userOnlineHistory', roleRights });\n      }\n    }\n\n    async test() {}\n  }\n\n  return Version;\n};\n","const versionManager = require('./bean/version.manager.js');\nconst atomUserOnline = require('./bean/atom.userOnline.js');\nconst atomUserOnlineHistory = require('./bean/atom.userOnlineHistory.js');\nconst beanUserOnline = require('./bean/bean.userOnline.js');\n\nmodule.exports = app => {\n  const beans = {\n    // version\n    'version.manager': {\n      mode: 'app',\n      bean: versionManager,\n    },\n    // atom\n    'atom.userOnline': {\n      mode: 'app',\n      bean: atomUserOnline,\n    },\n    'atom.userOnlineHistory': {\n      mode: 'app',\n      bean: atomUserOnlineHistory,\n    },\n    // global\n    userOnline: {\n      mode: 'ctx',\n      bean: beanUserOnline,\n      global: true,\n    },\n  };\n  return beans;\n};\n","// eslint-disable-next-line\nmodule.exports = appInfo => {\n  const config = {};\n  // userOnline\n  config.userOnline = {\n    expired: 20 * 60 * 1000, // 20 minutes\n  };\n  return config;\n};\n","// error code should start from 1001\nmodule.exports = {};\n","module.exports = {\n  ActionKickOut: 'Kick Out',\n};\n","module.exports = {\n  ActionKickOut: '下线',\n  'Online Users': '在线用户',\n  'Online Users(History)': '在线用户（历史）',\n  'Users Status': '用户状态',\n};\n","module.exports = {\n  'en-us': require('./locale/en-us.js'),\n  'zh-cn': require('./locale/zh-cn.js'),\n};\n","module.exports = app => {\n  // const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  const content = {\n    info: {\n      ordersBase: [\n        //\n        { name: 'onlineStatus', title: 'Status', by: 'desc', tableAlias: 'f', default: true },\n      ],\n    },\n    layouts: {\n      table: {\n        blocks: {\n          items: {\n            columns: [\n              {\n                dataIndex: 'atomName',\n                title: 'Username',\n                align: 'left',\n                component: {\n                  module: 'a-baselayout',\n                  name: 'listLayoutTableCellAtomName',\n                  options: {\n                    props: {\n                      mapper: {\n                        avatar: true,\n                      },\n                    },\n                  },\n                },\n              },\n              {\n                dataIndex: 'onlineStatus',\n                title: 'Status',\n                align: 'left',\n                params: {\n                  computed: {\n                    expression: 'record._onlineStatusTitleLocale',\n                  },\n                },\n              },\n              {\n                dataIndex: 'loginCount',\n                title: 'LoginCount',\n                align: 'left',\n              },\n              {\n                dataIndex: 'onlineCount',\n                title: 'OnlineCount',\n                align: 'left',\n              },\n              {\n                dataIndex: 'onlineIPLast',\n                title: 'OnlineIPLast',\n                align: 'left',\n              },\n              {\n                dataIndex: 'onlineTimeLast',\n                title: 'OnlineTimeLast',\n                align: 'center',\n                params: {\n                  dateFormat: {\n                    lines: true,\n                  },\n                },\n              },\n            ],\n          },\n        },\n      },\n    },\n  };\n  const layout = {\n    atomName: 'Online Users',\n    atomStaticKey: 'layoutAtomListUserOnline',\n    atomRevision: 0,\n    description: '',\n    layoutTypeCode: 3,\n    content: JSON.stringify(content),\n    resourceRoles: 'root',\n  };\n  return layout;\n};\n","const layoutAtomListUserOnline = require('./layout/layoutAtomListUserOnline.js');\n\nmodule.exports = app => {\n  const layouts = [layoutAtomListUserOnline(app)];\n  return layouts;\n};\n","module.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  const resources = [\n    // menu\n    // {\n    //   atomName: 'Create UserOnline',\n    //   atomStaticKey: 'createUserOnline',\n    //   atomRevision: 0,\n    //   atomCategoryId: 'a-base:menu.Create',\n    //   resourceType: 'a-base:menu',\n    //   resourceConfig: JSON.stringify({\n    //     module: moduleInfo.relativeName,\n    //     atomClassName: 'userOnline',\n    //     atomAction: 'create',\n    //   }),\n    //   resourceRoles: 'authenticated',\n    // },\n    {\n      atomName: 'Users Status',\n      atomStaticKey: 'listUserStatus',\n      atomRevision: 1,\n      atomCategoryId: 'a-base:menu.Tools',\n      resourceType: 'a-base:menu',\n      resourceConfig: JSON.stringify({\n        module: moduleInfo.relativeName,\n        atomClassName: 'userOnline',\n        atomAction: 'read',\n      }),\n      resourceIcon: '::people',\n      appKey: 'a-appbooster:appSystem',\n      resourceRoles: 'template.system',\n    },\n    // {\n    //   atomName: 'Online Users(History)',\n    //   atomStaticKey: 'listUserOnlineHistory',\n    //   atomRevision: 0,\n    //   atomCategoryId: 'a-base:menu.List',\n    //   resourceType: 'a-base:menu',\n    //   resourceConfig: JSON.stringify({\n    //     module: moduleInfo.relativeName,\n    //     atomClassName: 'userOnlineHistory',\n    //     atomAction: 'read',\n    //   }),\n    //   resourceRoles: 'template.system',\n    // },\n  ];\n  return resources;\n};\n","module.exports = app => {\n  const schemas = {};\n  // userOnline\n  schemas.userOnline = {\n    type: 'object',\n    properties: {\n      // Basic Info\n      __groupBasicInfo: {\n        ebType: 'group-flatten',\n        ebTitle: 'Basic Info',\n      },\n      atomName: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Username',\n        notEmpty: true,\n      },\n      onlineStatus: {\n        type: 'number',\n        ebType: 'dict',\n        ebTitle: 'Status',\n        ebParams: {\n          dictKey: 'a-dictbooster:dictOnlineStatus',\n          mode: 'select',\n        },\n      },\n      // Online Info\n      __groupOnlineInfo: {\n        ebType: 'group-flatten',\n        ebTitle: 'Online Info',\n      },\n      loginCount: {\n        type: 'number',\n        ebType: 'text',\n        ebTitle: 'LoginCount',\n      },\n      onlineCount: {\n        type: 'number',\n        ebType: 'text',\n        ebTitle: 'OnlineCount',\n      },\n      onlineIPLast: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'OnlineIPLast',\n      },\n      onlineTimeLast: {\n        type: ['object', 'null'],\n        ebType: 'text',\n        ebTitle: 'OnlineTimeLast',\n        ebParams: {\n          dateFormat: true,\n        },\n      },\n    },\n  };\n  // userOnline search\n  schemas.userOnlineSearch = {\n    type: 'object',\n    properties: {\n      onlineStatus: {\n        type: 'number',\n        ebType: 'dict',\n        ebTitle: 'Status',\n        ebParams: {\n          dictKey: 'a-dictbooster:dictOnlineStatus',\n          mode: 'select',\n        },\n        ebOptionsBlankAuto: true,\n      },\n    },\n  };\n  return schemas;\n};\n","module.exports = app => {\n  const schemas = {};\n  // userOnlineHistory\n  schemas.userOnlineHistory = {\n    type: 'object',\n    properties: {\n      atomName: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Name',\n        notEmpty: true,\n      },\n      description: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Description',\n      },\n    },\n  };\n  // userOnlineHistory search\n  schemas.userOnlineHistorySearch = {\n    type: 'object',\n    properties: {\n      description: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Description',\n      },\n    },\n  };\n  return schemas;\n};\n","const userOnline = require('./schema/userOnline.js');\nconst userOnlineHistory = require('./schema/userOnlineHistory.js');\n\nmodule.exports = app => {\n  const schemas = {};\n  // userOnline\n  Object.assign(schemas, userOnline(app));\n  // userOnlineHistory\n  Object.assign(schemas, userOnlineHistory(app));\n  // ok\n  return schemas;\n};\n","module.exports = app => {\n  class userOnlineController extends app.Controller {\n    async kickOut() {\n      const res = await this.ctx.service.userOnline.kickOut({\n        key: this.ctx.request.body.key,\n        // user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n  }\n\n  return userOnlineController;\n};\n","const userOnline = require('./controller/userOnline.js');\n\nmodule.exports = app => {\n  const controllers = {\n    userOnline,\n  };\n  return controllers;\n};\n","const config = require('./config/config.js');\nconst locales = require('./config/locales.js');\nconst errors = require('./config/errors.js');\n\nmodule.exports = app => {\n  // aops\n  const aops = require('./aops.js')(app);\n  // beans\n  const beans = require('./beans.js')(app);\n  // routes\n  const routes = require('./routes.js')(app);\n  // controllers\n  const controllers = require('./controllers.js')(app);\n  // services\n  const services = require('./services.js')(app);\n  // models\n  const models = require('./models.js')(app);\n  // meta\n  const meta = require('./meta.js')(app);\n\n  return {\n    aops,\n    beans,\n    routes,\n    controllers,\n    services,\n    models,\n    config,\n    locales,\n    errors,\n    meta,\n  };\n};\n","module.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  // schemas\n  const schemas = require('./config/validation/schemas.js')(app);\n  // static\n  const staticLayouts = require('./config/static/layouts.js')(app);\n  const staticResources = require('./config/static/resources.js')(app);\n  // meta\n  const meta = {\n    base: {\n      atoms: {\n        userOnline: {\n          info: {\n            bean: 'userOnline',\n            title: 'Online Users',\n            tableName: 'aUserOnline',\n            language: false,\n            category: false,\n            tag: false,\n            simple: true,\n            history: false,\n            inner: true,\n            comment: false,\n            attachment: false,\n            layout: {\n              config: {\n                atomList: 'layoutAtomListUserOnline',\n              },\n            },\n          },\n          actions: {\n            kickOut: {\n              code: 101,\n              title: 'ActionKickOut',\n              actionModule: moduleInfo.relativeName,\n              actionComponent: 'action',\n              icon: { f7: ':outline:log-out-outline' },\n              // enableOnOpened: true,\n              stage: 'formal',\n            },\n          },\n          validator: 'userOnline',\n          search: {\n            validator: 'userOnlineSearch',\n          },\n        },\n        userOnlineHistory: {\n          info: {\n            bean: 'userOnlineHistory',\n            title: 'Online Users(History)',\n            tableName: 'aUserOnlineHistory',\n            language: false,\n            category: false,\n            tag: false,\n            simple: true,\n            history: false,\n            inner: true,\n            comment: false,\n            attachment: false,\n          },\n          actions: {},\n          validator: 'userOnlineHistory',\n          search: {\n            validator: 'userOnlineHistorySearch',\n          },\n        },\n      },\n      statics: {\n        'a-baselayout.layout': {\n          items: staticLayouts,\n        },\n        'a-base.resource': {\n          items: staticResources,\n        },\n      },\n    },\n    validation: {\n      validators: {\n        userOnline: {\n          schemas: 'userOnline',\n        },\n        userOnlineSearch: {\n          schemas: 'userOnlineSearch',\n        },\n        userOnlineHistory: {\n          schemas: 'userOnlineHistory',\n        },\n        userOnlineHistorySearch: {\n          schemas: 'userOnlineHistorySearch',\n        },\n      },\n      keywords: {},\n      schemas,\n    },\n    index: {\n      indexes: {\n        aUserOnline: 'createdAt,updatedAt,atomId,userId,onlineTimeLast,expireTime',\n        aUserOnlineHistory: 'createdAt,updatedAt,atomId,userId,onlineTime',\n      },\n    },\n  };\n  return meta;\n};\n","module.exports = app => {\n  class UserOnline extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aUserOnline', options: { disableDeleted: false } });\n    }\n  }\n  return UserOnline;\n};\n","module.exports = app => {\n  class UserOnlineHistory extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aUserOnlineHistory', options: { disableDeleted: false } });\n    }\n  }\n  return UserOnlineHistory;\n};\n","const userOnline = require('./model/userOnline.js');\nconst userOnlineHistory = require('./model/userOnlineHistory.js');\n\nmodule.exports = app => {\n  const models = {\n    userOnline,\n    userOnlineHistory,\n  };\n  return models;\n};\n","module.exports = app => {\n  const routes = [\n    {\n      method: 'post',\n      path: 'userOnline/kickOut',\n      controller: 'userOnline',\n      meta: { right: { type: 'atom', atomClass: 'a-useronline:userOnline', action: 'kickOut' } },\n    },\n  ];\n  return routes;\n};\n","module.exports = app => {\n  class userOnline extends app.Service {\n    async kickOut({ key }) {\n      const item = await this.ctx.model.userOnline.get({ id: key.itemId });\n      const user = { id: item.userId };\n      await this.ctx.bean.userOnline.kickOut({ user });\n    }\n  }\n\n  return userOnline;\n};\n","const userOnline = require('./service/userOnline.js');\n\nmodule.exports = app => {\n  const services = {\n    userOnline,\n  };\n  return services;\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(421);\n",""],"names":[],"sourceRoot":""}