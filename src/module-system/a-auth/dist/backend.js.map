{"version":3,"file":"backend.js","mappings":";;;;;;AAAA;AACA;AACA;AACA;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0BAA0B,sBAAsB;AAChD,kCAAkC,OAAO,GAAG,aAAa;AACzD;AACA;AACA;;AAEA,4BAA4B,0BAA0B;AACtD;AACA,0BAA0B,KAAK,IAAI;AACnC;AACA;AACA;AACA;AACA;AACA,qBAAqB,wBAAwB;AAC7C;AACA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;;AAEA,6BAA6B,qCAAqC;AAClE,kCAAkC,OAAO,GAAG,aAAa;AACzD,sDAAsD,sBAAsB;AAC5E;AACA,0EAA0E,iBAAiB;AAC3F,kCAAkC,gBAAgB,iBAAiB,cAAc;AACjF;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA,+BAA+B,kDAAkD;AACjF;AACA;AACA,yBAAyB,wBAAwB;AACjD,mBAAmB,qCAAqC;AACxD;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,mCAAmC;AACxD,SAAS;AACT,OAAO;AACP;;AAEA,+BAA+B,qCAAqC;AACpE,sDAAsD,sBAAsB;AAC5E,0DAA0D,cAAc;AACxE;AACA,0CAA0C,OAAO,GAAG,aAAa,EAAE,cAAc;AACjF,6CAA6C,OAAO,GAAG,aAAa,EAAE,cAAc;AACpF;AACA;;AAEA,sCAAsC,sBAAsB;AAC5D;AACA,qDAAqD,sBAAsB;AAC3E;AACA;AACA;AACA,6CAA6C,OAAO,GAAG,aAAa;AACpE,yDAAyD,OAAO,GAAG,cAAc;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,QAAQ,iBAAiB;AAC3C,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,kBAAkB,QAAQ,iBAAiB;AAC3C,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;;;;;;;AClJA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,kCAAkC,OAAO,GAAG,aAAa;AACzD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,gBAAgB;AACpF,mCAAmC;AACnC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,iBAAiB;AACrF,mCAAmC;AACnC;AACA;AACA;AACA;AACA;;AAEA,gCAAgC,sBAAsB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,sBAAsB;AACtC,OAAO;AACP;;AAEA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;;AAEA,2CAA2C,UAAU;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,YAAY,GAAG,cAAc;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uEAAuE,sBAAsB;AAC7F,cAAc,qCAAqC;AACnD;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,OAAO,GAAG,aAAa;AACzD;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;;AAEA;AACA,cAAc,qDAAqD;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC,QAAQ;AACR,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACnQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACZA;AACA;AACA,kBAAkB,2DAA2D;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,uBAAuB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACxDA;AACA;AACA,yBAAyB,2CAA2C;AACpE,kCAAkC,OAAO,GAAG,aAAa;AACzD,uEAAuE,sBAAsB;AAC7F;AACA;AACA,sEAAsE,iBAAiB;AACvF;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,cAAc,wBAAwB;AACtC;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;;;;;;;AC9FA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,oBAAoB;AAChE,OAAO;AACP;AACA;AACA;AACA,mDAAmD,MAAM;AACzD,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,sBAAsB;AAClE;AACA,qDAAqD,MAAM;AAC3D,OAAO;AACP;AACA;;AAEA;AACA;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;;;;;;;ACzBA,uBAAuB,mBAAO,CAAC,GAA2B;AAC1D,8BAA8B,mBAAO,CAAC,EAAkC;AACxE,sBAAsB,mBAAO,CAAC,GAA0B;AACxD,qCAAqC,mBAAO,CAAC,GAAyC;AACtF,gCAAgC,mBAAO,CAAC,GAAoC;AAC5E,+BAA+B,mBAAO,CAAC,EAAmC;AAC1E,kCAAkC,mBAAO,CAAC,GAAsC;AAChF,yBAAyB,mBAAO,CAAC,GAA6B;AAC9D,8BAA8B,mBAAO,CAAC,GAAkC;;AAExE;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;ACzDA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;;;;;;;;AC5CA;AACA;;;;;;;;ACDA;AACA;AACA;AACA;;;;;;;;ACHA;AACA;AACA;AACA;AACA;;;;;;;;ACJA;AACA,WAAW,mBAAO,CAAC,GAAmB;AACtC,WAAW,mBAAO,CAAC,EAAmB;AACtC;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;;;;;;;;AC9BA,eAAe,mBAAO,CAAC,GAAoB;;AAE3C;AACA;AACA;AACA;AACA;;;;;;;;ACNA;AACA;AACA;AACA;;;;;;;;ACHA,eAAe,mBAAO,CAAC,EAAoB;AAC3C,gBAAgB,mBAAO,CAAC,EAAqB;AAC7C,eAAe,mBAAO,CAAC,GAAoB;AAC3C,4BAA4B,mBAAO,CAAC,EAAkC;;AAEtE;AACA;AACA;;AAEA;AACA,eAAe,mBAAO,CAAC,GAAW;AAClC;AACA,gBAAgB,mBAAO,CAAC,GAAY;AACpC;AACA,iBAAiB,mBAAO,CAAC,GAAa;AACtC;AACA,sBAAsB,mBAAO,CAAC,EAAkB;AAChD;AACA,mBAAmB,mBAAO,CAAC,GAAe;AAC1C;AACA,iBAAiB,mBAAO,CAAC,GAAa;AACtC;AACA,eAAe,mBAAO,CAAC,GAAW;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACpCA;AACA,kBAAkB,mBAAO,CAAC,GAAgC;AAC1D;AACA;AACA,eAAe;AACf,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,kBAAkB;AAClB;AACA,KAAK;AACL;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;;;;;;;;ACtBA;AACA;AACA;AACA,mBAAmB,2BAA2B,wBAAwB;AACtE;AACA;;AAEA;AACA;;;;;;;;ACRA;AACA;AACA;AACA,mBAAmB,mCAAmC,wBAAwB;AAC9E;AACA;;AAEA;AACA;;;;;;;;ACRA,aAAa,mBAAO,CAAC,GAAiB;AACtC,qBAAqB,mBAAO,CAAC,GAAyB;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACTA;AACA;AACA;AACA;;;;;;;;ACHA;AACA;AACA;AACA;;;;;;;UCHA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;UEtBA;UACA;UACA;UACA","sources":["webpack://egg-born-module-a-auth/./backend/src/aops.js","webpack://egg-born-module-a-auth/./backend/src/bean/bean.authProvider.js","webpack://egg-born-module-a-auth/./backend/src/bean/bean.authProviderCache.js","webpack://egg-born-module-a-auth/./backend/src/bean/broadcast.authProviderChanged.js","webpack://egg-born-module-a-auth/./backend/src/bean/local.authProviderBase.js","webpack://egg-born-module-a-auth/./backend/src/bean/local.passport.js","webpack://egg-born-module-a-auth/./backend/src/bean/startup.cacheAuthProviders.js","webpack://egg-born-module-a-auth/./backend/src/bean/startup.registerPassport.js","webpack://egg-born-module-a-auth/./backend/src/bean/startup.registerRouters.js","webpack://egg-born-module-a-auth/./backend/src/bean/version.manager.js","webpack://egg-born-module-a-auth/./backend/src/beans.js","webpack://egg-born-module-a-auth/./backend/src/config/config.js","webpack://egg-born-module-a-auth/./backend/src/config/errors.js","webpack://egg-born-module-a-auth/./backend/src/config/locale/en-us.js","webpack://egg-born-module-a-auth/./backend/src/config/locale/zh-cn.js","webpack://egg-born-module-a-auth/./backend/src/config/locales.js","webpack://egg-born-module-a-auth/./backend/src/config/validation/schema/oauth2.js","webpack://egg-born-module-a-auth/./backend/src/config/validation/schemas.js","webpack://egg-born-module-a-auth/./backend/src/controllers.js","webpack://egg-born-module-a-auth/./backend/src/main.js","webpack://egg-born-module-a-auth/./backend/src/meta.js","webpack://egg-born-module-a-auth/./backend/src/model/auth.js","webpack://egg-born-module-a-auth/./backend/src/model/authProvider.js","webpack://egg-born-module-a-auth/./backend/src/models.js","webpack://egg-born-module-a-auth/./backend/src/routes.js","webpack://egg-born-module-a-auth/./backend/src/services.js","webpack://egg-born-module-a-auth/webpack/bootstrap","webpack://egg-born-module-a-auth/webpack/before-startup","webpack://egg-born-module-a-auth/webpack/startup","webpack://egg-born-module-a-auth/webpack/after-startup"],"sourcesContent":["module.exports = app => {\n  const aops = {};\n  return aops;\n};\n","module.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class AuthProvider {\n    get modelAuthProvider() {\n      return ctx.model.module(moduleInfo.relativeName).authProvider;\n    }\n    get localPassport() {\n      return ctx.bean.local.module(moduleInfo.relativeName).passport;\n    }\n\n    getAuthProviderBase({ module, providerName }) {\n      const providerFullName = `${module}:${providerName}`;\n      const authProviders = ctx.bean.base.authProviders();\n      return authProviders[providerFullName];\n    }\n\n    async getAuthProvider({ id, module, providerName }) {\n      // ctx.instance maybe not exists\n      const data = id ? { id } : { module, providerName };\n      const res = await this.modelAuthProvider.get(data);\n      if (res) return res;\n      if (!module || !providerName) throw new Error('Invalid arguments');\n      // lock\n      return await ctx.meta.util.lock({\n        resource: `${moduleInfo.relativeName}.authProvider.register`,\n        fn: async () => {\n          return await ctx.meta.util.executeBeanIsolate({\n            beanModule: moduleInfo.relativeName,\n            beanFullName: 'authProvider',\n            context: { module, providerName },\n            fn: '_registerAuthProviderLock',\n          });\n        },\n      });\n    }\n\n    createAuthProviderBean({ module, providerName, providerScene }) {\n      const providerFullName = `${module}:${providerName}`;\n      const authProvider = this.getAuthProviderBase({ module, providerName });\n      const beanName = authProvider.meta.bean;\n      if (!beanName) throw new Error(`auth provider bean not specified: ${providerFullName}`);\n      return ctx.bean._newBean(`${beanName.module}.auth.provider.${beanName.name}`, {\n        authProvider,\n        providerModule: module,\n        providerName,\n        providerScene: authProvider.meta.scene ? providerScene : null,\n      });\n    }\n\n    async authenticateDirect({ module, providerName, providerScene, query, body }) {\n      return await ctx.meta.util.executeBeanIsolate({\n        beanModule: moduleInfo.relativeName,\n        beanFullName: `${moduleInfo.relativeName}.local.passport`,\n        context: { module, providerName, providerScene },\n        fn: 'authenticate',\n        ctxParent: {\n          session: ctx.session,\n          cookies: ctx.cookies,\n          user: ctx.user,\n          state: ctx.state,\n          request: { headers: ctx.headers, query, body },\n        },\n      });\n    }\n\n    _combineAuthenticateUrls({ module, providerName, providerScene }) {\n      const authProvider = this.getAuthProviderBase({ module, providerName });\n      const urlParamScene = authProvider.meta.scene ? `/${providerScene}` : '';\n      return {\n        loginURL: `/api/a/auth/passport/${module}/${providerName}${urlParamScene}`,\n        callbackURL: `/api/a/auth/passport/${module}/${providerName}${urlParamScene}/callback`,\n      };\n    }\n\n    async _registerAuthProviderLock({ module, providerName }) {\n      // get\n      const res = await this.modelAuthProvider.get({ module, providerName });\n      if (res) return res;\n      // data\n      // const _authProviders = ctx.bean.base.authProviders();\n      // const _provider = _authProviders[`${module}:${providerName}`];\n      // if (!_provider) throw new Error(`authProvider ${module}:${providerName} not found!`);\n      const data = {\n        module,\n        providerName,\n        // config: JSON.stringify(_provider.config),\n        disabled: 0,\n      };\n      // insert\n      const res2 = await this.modelAuthProvider.insert(data);\n      data.id = res2.insertId;\n      return data;\n    }\n\n    _registerRouters() {\n      // url pattern\n      const urlPattern = /\\/api\\/a\\/auth\\/passport\\/(.+)$/;\n      // authenticate\n      const authenticate = _createAuthenticate();\n      // middlewares\n      const middlewaresPost = [];\n      const middlewaresGet = [];\n      if (!ctx.app.meta.isTest) middlewaresPost.push('inner');\n      middlewaresPost.push(authenticate);\n      middlewaresGet.push(authenticate);\n      // mount routes\n      const routes = [\n        {\n          name: 'get:api-a-auth-passport',\n          method: 'get',\n          path: urlPattern,\n          middlewares: middlewaresGet,\n          meta: { auth: { enable: false } },\n        },\n        {\n          name: 'post:api-a-auth-passport',\n          method: 'post',\n          path: urlPattern,\n          middlewares: middlewaresPost,\n          meta: { auth: { enable: false } },\n        },\n      ];\n      for (const route of routes) {\n        ctx.app.meta.router.unRegister(route.name);\n        ctx.app.meta.router.register(moduleInfo, route);\n      }\n    }\n  }\n  return AuthProvider;\n};\n\nfunction _createAuthenticate() {\n  return async function (ctx, next) {\n    const urlPattern = ctx.params[0];\n    const [module, providerName, providerScene] = urlPattern.split('/');\n    ctx.params.module = module;\n    ctx.params.providerName = providerName;\n    ctx.params.providerScene = providerScene;\n    // authenticate\n    await ctx.bean.local.module('a-auth').passport.authenticate({\n      module,\n      providerName,\n      providerScene,\n      next,\n    });\n  };\n}\n","const __authProvidersConfigCache = {};\nconst __authProvidersConfigCache_login = {};\nconst __authProvidersConfigCache_admin = {};\n\nmodule.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class AuthProviderCache {\n    get configModule() {\n      return ctx.config.module(moduleInfo.relativeName);\n    }\n\n    getAuthProvidersConfigCache() {\n      return __authProvidersConfigCache[ctx.subdomain];\n    }\n\n    getAuthProviderConfigCache(module, providerName) {\n      const providerFullName = `${module}:${providerName}`;\n      return __authProvidersConfigCache[ctx.subdomain][providerFullName];\n    }\n\n    getAuthProvidersConfigForLogin() {\n      if (!__authProvidersConfigCache_login[ctx.subdomain]) {\n        __authProvidersConfigCache_login[ctx.subdomain] = {};\n      }\n      let providersConfigForLogin = __authProvidersConfigCache_login[ctx.subdomain][ctx.locale];\n      if (!providersConfigForLogin) {\n        const listMap = this._getAuthProvidersConfigForLogin_list({ forLogin: true });\n        if (!listMap) return null; // for try to get info at next time\n        providersConfigForLogin = this._getAuthProvidersConfigForLogin_order(listMap);\n        __authProvidersConfigCache_login[ctx.subdomain][ctx.locale] = providersConfigForLogin;\n      }\n      return providersConfigForLogin;\n    }\n\n    getAuthProvidersConfigForAdmin() {\n      if (!__authProvidersConfigCache_admin[ctx.subdomain]) {\n        __authProvidersConfigCache_admin[ctx.subdomain] = {};\n      }\n      let providersConfigForAdmin = __authProvidersConfigCache_admin[ctx.subdomain][ctx.locale];\n      if (!providersConfigForAdmin) {\n        const listMap = this._getAuthProvidersConfigForLogin_list({ forLogin: false });\n        if (!listMap) return null; // for try to get info at next time\n        providersConfigForAdmin = this._getAuthProvidersConfigForLogin_order(listMap);\n        __authProvidersConfigCache_admin[ctx.subdomain][ctx.locale] = providersConfigForAdmin;\n      }\n      return providersConfigForAdmin;\n    }\n\n    async authProviderChanged({ module, providerName }) {\n      // change self\n      await this._cacheAuthProviderConfig(module, providerName);\n      // broadcast\n      ctx.meta.util.broadcastEmit({\n        module: 'a-auth',\n        broadcastName: 'authProviderChanged',\n        data: { module, providerName },\n      });\n    }\n\n    purgeScene(scene) {\n      const res = ctx.bean.util.extend({}, scene);\n      delete res.__valid;\n      delete res.titleLocale;\n      return res;\n    }\n\n    _getAuthProvidersConfigForLogin_list({ forLogin }) {\n      const listMap = {};\n      //\n      const providersConfigCache = this.getAuthProvidersConfigCache();\n      for (const providerFullName in providersConfigCache) {\n        const providerConfigCache = providersConfigCache[providerFullName];\n        const providerConfigForLogin = this._getAuthProviderConfigForLogin(\n          providerFullName,\n          providerConfigCache,\n          forLogin\n        );\n        if (providerConfigForLogin) {\n          listMap[providerFullName] = providerConfigForLogin;\n        }\n      }\n      if (Object.keys(listMap).length === 0) return null;\n      return listMap;\n    }\n\n    _getAuthProvidersConfigForLogin_order(listMap) {\n      const list = [];\n      for (const item of this.configModule.login.providers) {\n        const key = `${item.module}:${item.provider}`;\n        const provider = listMap[key];\n        if (provider) {\n          list.push(provider);\n          delete listMap[key];\n        }\n      }\n      // the rest\n      for (const key in listMap) {\n        list.push(listMap[key]);\n      }\n      return list;\n    }\n\n    _getAuthProviderConfigForLogin(providerFullName, providerConfigCache, forLogin) {\n      const [module, providerName] = providerFullName.split(':');\n      const authProvider = ctx.bean.authProvider.getAuthProviderBase({ module, providerName });\n      const { providerItem, configProviderScenes } = providerConfigCache;\n      const providerConfigForLogin = {\n        module,\n        providerName,\n        meta: authProvider.meta,\n        metaScenes: authProvider.scenes,\n        scenes: {},\n      };\n      if (!forLogin) {\n        // admin\n        providerConfigForLogin.providerItem = providerItem;\n      }\n      for (const sceneName in configProviderScenes) {\n        const configProviderScene = configProviderScenes[sceneName];\n        const titleLocale = ctx.text(configProviderScene.title);\n        if (forLogin) {\n          // login\n          if (configProviderScene.__valid) {\n            providerConfigForLogin.scenes[sceneName] = {\n              title: configProviderScene.title,\n              titleLocale,\n            };\n          }\n        } else {\n          // admin\n          providerConfigForLogin.scenes[sceneName] = {\n            ...configProviderScene,\n            titleLocale,\n          };\n        }\n      }\n      if (Object.keys(providerConfigForLogin.scenes).length === 0) return null;\n      return providerConfigForLogin;\n    }\n\n    async _cacheAuthProvidersConfig() {\n      if (!__authProvidersConfigCache[ctx.subdomain]) {\n        __authProvidersConfigCache[ctx.subdomain] = {};\n      }\n      const authProviders = ctx.bean.base.authProviders();\n      for (const key in authProviders) {\n        const [module, providerName] = key.split(':');\n        await this._cacheAuthProviderConfig(module, providerName);\n      }\n    }\n\n    async _cacheAuthProviderConfig(module, providerName) {\n      // clear login cache, because some provider changed\n      __authProvidersConfigCache_login[ctx.subdomain] = {};\n      __authProvidersConfigCache_admin[ctx.subdomain] = {};\n      //\n      if (!__authProvidersConfigCache[ctx.subdomain]) {\n        __authProvidersConfigCache[ctx.subdomain] = {};\n      }\n      // bean\n      const providerFullName = `${module}:${providerName}`;\n      const beanProvider = ctx.bean.authProvider.createAuthProviderBean({\n        module,\n        providerName,\n        providerScene: null,\n      });\n      // config provider\n      const configProviderCache = await this._cacheAuthProviderConfig_provider(module, providerName, beanProvider);\n      __authProvidersConfigCache[ctx.subdomain][providerFullName] = configProviderCache;\n      // config provider scenes\n      await this._cacheAuthProviderConfig_providerScenes(configProviderCache, beanProvider);\n    }\n\n    async _cacheAuthProviderConfig_provider(module, providerName, beanProvider) {\n      const authProvider = beanProvider.authProvider;\n      // config default\n      const configDefault = await beanProvider.getConfigDefault();\n      // provider item\n      const providerItem = await ctx.bean.authProvider.getAuthProvider({\n        module,\n        providerName,\n      });\n      // combine\n      let configProvider;\n      if (authProvider.meta.scene) {\n        // scene: true\n        const itemScenes = providerItem.scenes ? JSON.parse(providerItem.scenes) : null;\n        const scenes = ctx.bean.util.extend({}, configDefault && configDefault.scenes, itemScenes);\n        configProvider = {\n          scenes,\n        };\n      } else {\n        // scene: false\n        const itemConfig = providerItem.config ? JSON.parse(providerItem.config) : null;\n        configProvider = ctx.bean.util.extend({}, configDefault, itemConfig);\n      }\n      return {\n        authProvider,\n        providerItem,\n        configProvider,\n        configProviderScenes: {},\n      };\n    }\n\n    async _cacheAuthProviderConfig_providerScenes(configProviderCache, beanProvider) {\n      const { configProviderScenes, configProvider, providerItem } = configProviderCache;\n      const authProvider = beanProvider.authProvider;\n      if (authProvider.meta.scene) {\n        for (const sceneName in configProvider.scenes) {\n          const providerScene = configProvider.scenes[sceneName];\n          configProviderScenes[sceneName] = await this._cacheAuthProviderConfig_providerScene(\n            configProvider,\n            providerItem,\n            beanProvider,\n            providerScene,\n            sceneName\n          );\n        }\n      } else {\n        configProviderScenes.default = await this._cacheAuthProviderConfig_providerScene(\n          configProvider,\n          providerItem,\n          beanProvider,\n          null,\n          null\n        );\n      }\n      return configProviderScenes;\n    }\n\n    async _cacheAuthProviderConfig_providerScene(configProvider, providerItem, beanProvider, providerScene, sceneName) {\n      //\n      const authProvider = beanProvider.authProvider;\n      // create new beanProvider as providerScene specified\n      if (authProvider.meta.scene) {\n        beanProvider = ctx.bean.authProvider.createAuthProviderBean({\n          module: beanProvider.providerModule,\n          providerName: beanProvider.providerName,\n          providerScene: sceneName,\n        });\n      }\n      //\n      let configProviderScene;\n      if (authProvider.meta.scene) {\n        // scene: true\n        configProviderScene = { ...providerScene };\n      } else {\n        configProviderScene = { ...configProvider };\n      }\n      // adjustConfigForCache\n      configProviderScene = await beanProvider.adjustConfigForCache(configProviderScene);\n      // providerSceneValid\n      configProviderScene.__valid =\n        !providerItem.disabled && !configProviderScene.disabled && beanProvider.checkConfigValid(configProviderScene);\n      // ok\n      return configProviderScene;\n    }\n  }\n  return AuthProviderCache;\n};\n","module.exports = app => {\n  class Broadcast extends app.meta.BeanBase {\n    async execute(context) {\n      const sameAsCaller = context.sameAsCaller;\n      const data = context.data;\n      if (!sameAsCaller) {\n        await this.ctx.bean.authProviderCache._cacheAuthProviderConfig(data.module, data.providerName);\n      }\n    }\n  }\n\n  return Broadcast;\n};\n","module.exports = ctx => {\n  class IAuthProviderBase {\n    constructor({ authProvider, providerModule, providerName, providerScene }) {\n      this.authProvider = authProvider;\n      this.providerModule = providerModule;\n      this.providerName = providerName;\n      this.providerScene = providerScene;\n    }\n    // should be overrided\n    async getConfigDefault() {\n      throw new Error('getConfigDefault not implemented');\n    }\n    //\n    async adjustConfigForCache(config) {\n      return config;\n    }\n    async adjustConfigForAuthenticate(config) {\n      return config;\n    }\n    // should be overrided\n    checkConfigValid(/* config */) {\n      throw new Error('checkConfigValid not implemented');\n    }\n    // should be overrided\n    getStrategy() {\n      throw new Error('getStrategy not implemented');\n    }\n    // should be overrided\n    async onVerify(/* ...args */) {\n      throw new Error('onVerify not implemented');\n    }\n    get configProviderCache() {\n      return ctx.bean.authProviderCache.getAuthProviderConfigCache(this.providerModule, this.providerName);\n    }\n    get configProviderScene() {\n      const { configProviderScenes } = this.configProviderCache;\n      if (this.authProvider.meta.scene) {\n        return configProviderScenes[this.providerScene];\n      }\n      return configProviderScenes.default;\n    }\n    get providerSceneValid() {\n      return this.configProviderScene.__valid;\n    }\n    get allowStrategyMock() {\n      return (ctx.app.meta.isTest || ctx.app.meta.isLocal) && ctx.host.indexOf('localhost:') === 0;\n    }\n    get metaScene() {\n      if (this.authProvider.meta.scene) {\n        const scene = this.authProvider.scenes && this.authProvider.scenes[this.providerScene];\n        return (scene && scene.meta) || this.authProvider.meta;\n      }\n      return this.authProvider.meta;\n    }\n  }\n  return IAuthProviderBase;\n};\n","module.exports = ctx => {\n  class Passport {\n    async authenticate({ module, providerName, providerScene, next }) {\n      const providerFullName = `${module}:${providerName}`;\n      const authProvider = ctx.bean.authProvider.getAuthProviderBase({ module, providerName });\n      // provider scene\n      if (authProvider.meta.scene && !providerScene) {\n        throw new Error(`should set provider scene on callback url: ${providerFullName}`);\n      }\n      // bean\n      const beanProvider = ctx.bean.authProvider.createAuthProviderBean({\n        module,\n        providerName,\n        providerScene,\n      });\n      if (!beanProvider.providerSceneValid) ctx.throw.module('a-base', 1015);\n      // urls\n      const { loginURL, callbackURL } = ctx.bean.authProvider._combineAuthenticateUrls({\n        module,\n        providerName,\n        providerScene,\n      });\n      // returnTo\n      if (ctx.url.indexOf(callbackURL) === -1) {\n        if (ctx.request.query && ctx.request.query.returnTo) {\n          ctx.session.returnTo = ctx.request.query.returnTo;\n          ctx.session['x-scene'] = ctx.bean.util.getFrontScene();\n        } else {\n          delete ctx.session.returnTo; // force to delete\n          delete ctx.session['x-scene'];\n        }\n      }\n      // config\n      const config = {};\n      config.passReqToCallback = true;\n      config.failWithError = false;\n      config.loginURL = ctx.bean.base.getAbsoluteUrl(loginURL);\n      config.callbackURL = ctx.bean.base.getAbsoluteUrl(callbackURL);\n      config.state = ctx.request.query.state;\n      config.successRedirect = config.successReturnToOrRedirect =\n        beanProvider.metaScene.mode === 'redirect' ? '/' : false;\n      // strategy\n      const strategy = await _createProviderStrategy(ctx, authProvider, beanProvider);\n      // invoke authenticate\n      const authenticate = ctx.app.passport.authenticate(strategy, config);\n      await authenticate(ctx, next || function () {});\n    }\n  }\n  return Passport;\n};\n\nasync function _createProviderStrategy(ctx, authProvider, beanProvider) {\n  // config\n  let config = {};\n  config.passReqToCallback = true;\n  config.failWithError = false;\n  config.successRedirect = config.successReturnToOrRedirect = beanProvider.metaScene.mode === 'redirect' ? '/' : false;\n  // combine\n  config = ctx.bean.util.extend({}, beanProvider.configProviderScene, config);\n  // config.beanProvider = beanProvider;\n  // adjust\n  config = await beanProvider.adjustConfigForAuthenticate(config);\n  // strategy\n  const Strategy = beanProvider.getStrategy();\n  return new Strategy(config, _createStrategyCallback(beanProvider));\n}\n\nfunction _createStrategyCallback(beanProvider) {\n  // req, ...args, done\n  return async function (req, ...args) {\n    const ctx = req.ctx;\n    const done = args[args.length - 1];\n    args = args.slice(0, args.length - 1);\n    // state: login/associate\n    const state = ctx.request.query.state || 'login';\n    args.push(state);\n    try {\n      // onVerify\n      const verifyUser = await beanProvider.onVerify(...args);\n      if (!verifyUser) {\n        done(null, null);\n        return;\n      }\n      // check if verifyUser\n      if (verifyUser.op && verifyUser.agent && verifyUser.provider) {\n        done(null, verifyUser);\n        return;\n      }\n      // doVerify, because verifyUser is profileUser\n      ctx.app.passport.doVerify(req, verifyUser, done);\n    } catch (err) {\n      done(err, null);\n    }\n  };\n}\n","module.exports = app => {\n  class Startup extends app.meta.BeanBase {\n    async execute(/* context*/) {\n      // cache all authProviders\n      await this.ctx.bean.authProviderCache._cacheAuthProvidersConfig();\n    }\n  }\n\n  return Startup;\n};\n","module.exports = app => {\n  class Startup extends app.meta.BeanBase {\n    async execute() {\n      // verify\n      app.passport.verify(async (ctx, profileUser) => {\n        // state: login/associate\n        const state = ctx.request.query.state || 'login';\n        // user verify\n        return await ctx.bean.user.verify({ state, profileUser });\n      });\n      // serializeUser\n      app.passport.serializeUser(async (ctx, user) => {\n        ctx.state.user = user;\n        return await ctx.bean.auth.serializeUser({ user });\n      });\n      // deserializeUser\n      app.passport.deserializeUser(async (ctx, user) => {\n        if (!ctx.instance) {\n          return null;\n        }\n        if (ctx.state && ctx.state.user) {\n          return ctx.bean.auth._pruneUser({ user: ctx.state.user });\n        }\n        return await ctx.bean.auth.deserializeUser({ user });\n      });\n    }\n  }\n\n  return Startup;\n};\n","module.exports = app => {\n  class Startup extends app.meta.BeanBase {\n    async execute(/* context*/) {\n      // register routers\n      await this.ctx.bean.authProvider._registerRouters();\n    }\n  }\n\n  return Startup;\n};\n","module.exports = app => {\n  class Version extends app.meta.BeanBase {\n    async update(options) {\n      if (options.version === 1) {\n        // aAuthProvider: add scenes\n        let sql = `\n      ALTER TABLE aAuthProvider\n        ADD COLUMN scenes JSON DEFAULT NULL\n                `;\n        await this.ctx.model.query(sql);\n        // aAuth: add providerScene\n        sql = `\n      ALTER TABLE aAuth\n        ADD COLUMN providerScene varchar(255) DEFAULT NULL\n                `;\n        await this.ctx.model.query(sql);\n      }\n    }\n\n    async init(options) {}\n\n    async test() {}\n  }\n\n  return Version;\n};\n","const versionManager = require('./bean/version.manager.js');\nconst localAuthProviderBase = require('./bean/local.authProviderBase.js');\nconst localPassport = require('./bean/local.passport.js');\nconst broadcastAuthProviderChanged = require('./bean/broadcast.authProviderChanged.js');\nconst startupRegisterPassport = require('./bean/startup.registerPassport.js');\nconst startupRegisterRouters = require('./bean/startup.registerRouters.js');\nconst startupCacheAuthProviders = require('./bean/startup.cacheAuthProviders.js');\nconst beanAuthProvider = require('./bean/bean.authProvider.js');\nconst beanAuthProviderCache = require('./bean/bean.authProviderCache.js');\n\nmodule.exports = app => {\n  const beans = {\n    // version\n    'version.manager': {\n      mode: 'app',\n      bean: versionManager,\n    },\n    // local\n    'local.authProviderBase': {\n      mode: 'ctx',\n      bean: localAuthProviderBase,\n    },\n    'local.passport': {\n      mode: 'ctx',\n      bean: localPassport,\n    },\n    // broadcast\n    'broadcast.authProviderChanged': {\n      mode: 'app',\n      bean: broadcastAuthProviderChanged,\n    },\n    // startup\n    'startup.registerPassport': {\n      mode: 'app',\n      bean: startupRegisterPassport,\n    },\n    'startup.registerRouters': {\n      mode: 'app',\n      bean: startupRegisterRouters,\n    },\n    'startup.cacheAuthProviders': {\n      mode: 'app',\n      bean: startupCacheAuthProviders,\n    },\n    // global\n    authProvider: {\n      mode: 'ctx',\n      bean: beanAuthProvider,\n      global: true,\n    },\n    authProviderCache: {\n      mode: 'ctx',\n      bean: beanAuthProviderCache,\n      global: true,\n    },\n  };\n  return beans;\n};\n","// eslint-disable-next-line\nmodule.exports = appInfo => {\n  const config = {};\n\n  // startups\n  config.startups = {\n    registerPassport: {\n      bean: 'registerPassport',\n    },\n    registerRouters: {\n      bean: 'registerRouters',\n    },\n    cacheAuthProviders: {\n      bean: 'cacheAuthProviders',\n      instance: true,\n    },\n  };\n\n  // broadcasts\n  config.broadcasts = {\n    authProviderChanged: {\n      bean: 'authProviderChanged',\n    },\n  };\n\n  // login\n  config.login = {\n    providers: [\n      {\n        module: 'a-authsimple',\n        provider: 'authsimple',\n      },\n      {\n        module: 'a-authsms',\n        provider: 'authsms',\n      },\n      {\n        module: 'a-authgithub',\n        provider: 'authgithub',\n      },\n    ],\n  };\n\n  return config;\n};\n","// error code should start from 1001\nmodule.exports = {};\n","module.exports = {\n  AuthSelfBuiltApp: 'Self Built App',\n  AuthDefault: 'Default',\n};\n","module.exports = {\n  Auth: '认证',\n  AuthSelfBuiltApp: '自建应用',\n  AuthDefault: '默认',\n};\n","module.exports = {\n  'en-us': require('./locale/en-us.js'),\n  'zh-cn': require('./locale/zh-cn.js'),\n};\n","module.exports = app => {\n  const schemas = {};\n  schemas.oauth2 = {\n    type: 'object',\n    properties: {\n      __groupAuthInfo: {\n        ebType: 'group-flatten',\n        ebTitle: 'Auth Info',\n      },\n      title: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Title',\n        notEmpty: true,\n      },\n      clientID: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Client ID',\n        notEmpty: true,\n      },\n      clientSecret: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Client Secret',\n        notEmpty: true,\n      },\n    },\n  };\n  return schemas;\n};\n","const oauth2 = require('./schema/oauth2.js');\n\nmodule.exports = app => {\n  const schemas = {};\n  Object.assign(schemas, oauth2(app));\n  return schemas;\n};\n","module.exports = app => {\n  const controllers = {};\n  return controllers;\n};\n","const config = require('./config/config.js');\nconst locales = require('./config/locales.js');\nconst errors = require('./config/errors.js');\nconst IAuthProviderBaseFn = require('./bean/local.authProviderBase.js');\n\nmodule.exports = app => {\n  // base\n  app.meta.IAuthProviderBase = IAuthProviderBaseFn;\n\n  // aops\n  const aops = require('./aops.js')(app);\n  // beans\n  const beans = require('./beans.js')(app);\n  // routes\n  const routes = require('./routes.js')(app);\n  // controllers\n  const controllers = require('./controllers.js')(app);\n  // services\n  const services = require('./services.js')(app);\n  // models\n  const models = require('./models.js')(app);\n  // meta\n  const meta = require('./meta.js')(app);\n\n  return {\n    aops,\n    beans,\n    routes,\n    controllers,\n    services,\n    models,\n    config,\n    locales,\n    errors,\n    meta,\n  };\n};\n","module.exports = app => {\n  const schemas = require('./config/validation/schemas.js')(app);\n  const meta = {\n    base: {\n      atoms: {},\n    },\n    validation: {\n      validators: {\n        oauth2: {\n          schemas: 'oauth2',\n        },\n      },\n      keywords: {},\n      schemas,\n    },\n    settings: {\n      user: {\n        actionPath: '/a/user/user/authentications',\n      },\n    },\n  };\n  return meta;\n};\n","module.exports = app => {\n  class Auth extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aAuth', options: { disableDeleted: true } });\n    }\n  }\n\n  return Auth;\n};\n","module.exports = app => {\n  class AuthProvider extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aAuthProvider', options: { disableDeleted: true } });\n    }\n  }\n\n  return AuthProvider;\n};\n","const auth = require('./model/auth.js');\nconst authProvider = require('./model/authProvider.js');\n\nmodule.exports = app => {\n  const models = {\n    auth,\n    authProvider,\n  };\n  return models;\n};\n","module.exports = app => {\n  const routes = [];\n  return routes;\n};\n","module.exports = app => {\n  const services = {};\n  return services;\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(421);\n",""],"names":[],"sourceRoot":""}