{"version":3,"file":"backend.js","mappings":";;;;;;AAAA;AACA;AACA;AACA,eAAe,mBAAO,CAAC,GAAY;;;AAGnC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB;;;;;;;;ACdhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;;;;;;AC3BA;AACA;AACA;AACA;;;;;;;;ACHA,iBAAiB,mBAAO,CAAC,GAAU;AACnC;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,gCAAgC;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,gCAAgC;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA,eAAe;AACf;;AAEA,iBAAiB,+BAA+B;AAChD;AACA,sCAAsC,+BAA+B;AACrE;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,iCAAiC;AACpD;AACA,2BAA2B,iCAAiC;AAC5D;AACA;AACA;AACA;AACA;;AAEA,kBAAkB,6CAA6C;AAC/D;AACA,0BAA0B,6CAA6C;AACvE;AACA;AACA;AACA;;AAEA,mBAAmB,sBAAsB;AACzC;AACA;AACA,2BAA2B,sBAAsB;AACjD;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;;AAEA,6BAA6B,iDAAiD;AAC9E;AACA,iDAAiD,iDAAiD;AAClG;AACA;AACA;AACA;AACA;AACA,uDAAuD,iBAAiB;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACtIA,iBAAiB,mBAAO,CAAC,GAAgC;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,yBAAyB;AACvC;AACA,wDAAwD,wBAAwB;AAChF;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;;;;;;;;ACzCA,iBAAiB,mBAAO,CAAC,GAAU;AACnC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6BAA6B,sBAAsB;AACnD,+CAA+C,gBAAgB;AAC/D,qEAAqE,6BAA6B;AAClG;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA,8BAA8B,sBAAsB;AACpD,6CAA6C,gBAAgB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA,mBAAmB,wBAAwB;AAC3C;AACA,sDAAsD,UAAU;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,QAAQ;AACR;AACA;AACA;AACA,uDAAuD,qBAAqB;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kCAAkC;AAClC,wDAAwD,qBAAqB;AAC7E;AACA;AACA;AACA;AACA;;AAEA,+BAA+B,gBAAgB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iCAAiC,mBAAmB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gCAAgC,QAAQ;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6BAA6B,gBAAgB;AAC7C;AACA,oDAAoD,QAAQ;AAC5D;AACA;AACA;AACA;;AAEA,2BAA2B,gBAAgB;AAC3C;AACA,8CAA8C,QAAQ;AACtD;AACA,4CAA4C,YAAY;AACxD;;AAEA;AACA,2BAA2B,QAAQ,6DAA6D,QAAQ;AACxG;AACA;AACA;AACA,OAAO;AACP;AACA,4DAA4D,yBAAyB;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA,OAAO;AACP;AACA;AACA;;AAEA,6BAA6B,6BAA6B;AAC1D;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,UAAU;AACV,2DAA2D,kCAAkC;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gCAAgC,sCAAsC;AACtE;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACzNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,yBAAyB;AAC1C,OAAO;AACP;AACA,qCAAqC,OAAO,uBAAuB;AACnE;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACrBA,iBAAiB,mBAAO,CAAC,GAAU;AACnC;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,yCAAyC;AACzD;AACA,cAAc,mBAAmB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,QAAQ;AACvD;AACA;AACA,sCAAsC,SAAS;AAC/C;AACA;AACA,eAAe;AACf;;AAEA,mBAAmB,WAAW;AAC9B;AACA,cAAc,mBAAmB;AACjC;AACA;AACA;AACA;AACA;AACA,iDAAiD,QAAQ;AACzD;AACA;AACA;AACA,sCAAsC,SAAS;AAC/C;AACA;AACA,eAAe;AACf;;AAEA,gBAAgB,MAAM;AACtB;AACA,cAAc,SAAS;AACvB;AACA;;AAEA,iBAAiB,KAAK;AACtB;AACA,cAAc,mBAAmB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,SAAS;AAC/C;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;;;;;;;AC5EA,yBAAyB,mBAAO,CAAC,EAAsB;AACvD,uBAAuB,mBAAO,CAAC,GAAoB;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;ACvBA,aAAa,mBAAO,CAAC,EAAM;AAC3B,iBAAiB,mBAAO,CAAC,GAAU;AACnC,iBAAiB,mBAAO,CAAC,GAAgB;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU,6CAA6C;AACvD,UAAU,0DAA0D;AACpE,UAAU,2DAA2D;AACrE,UAAU,4DAA4D;AACtE,UAAU,4DAA4D;AACtE,UAAU,6DAA6D;AACvE,UAAU,sEAAsE;AAChF,UAAU,uEAAuE;AACjF,UAAU,iDAAiD;AAC3D,UAAU,iEAAiE;AAC3E;AACA,8CAA8C,uCAAuC;AACrF;;AAEA;AACA;AACA,iDAAiD,iDAAiD;AAClG;AACA;AACA;AACA,UAAU,iEAAiE;AAC3E,UAAU,kEAAkE;AAC5E,UAAU,mEAAmE;AAC7E,UAAU,kEAAkE;AAC5E,aAAa,iEAAiE;AAC9E,UAAU,qEAAqE;AAC/E,aAAa,sEAAsE;AACnF,UAAU,qEAAqE;AAC/E,UAAU,mFAAmF;AAC7F,UAAU,+EAA+E;AACzF;AACA,8CAA8C,qDAAqD;AACnG;;AAEA;AACA;AACA;AACA;AACA,iDAAiD,kBAAkB;AACnE;AACA,mEAAmE,UAAU;AAC7E;AACA,oDAAoD,uBAAuB;AAC3E;;AAEA,wCAAwC,UAAU;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,sBAAsB;AAC5E;;AAEA,6CAA6C,uBAAuB;AACpE;AACA,kDAAkD,wBAAwB;AAC1E;AACA,6BAA6B,aAAa;AAC1C;AACA;AACA,uCAAuC,yBAAyB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,iDAAiD,iCAAiC;AAClF;AACA;AACA;AACA;;;;;;;;ACvGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;;;;;;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACnCA,uBAAuB,mBAAO,CAAC,GAA2B;AAC1D,8BAA8B,mBAAO,CAAC,GAAkC;AACxE,qBAAqB,mBAAO,CAAC,GAAyB;AACtD,yBAAyB,mBAAO,CAAC,GAA8B;AAC/D,mBAAmB,mBAAO,CAAC,GAAuB;AAClD,qBAAqB,mBAAO,CAAC,GAAyB;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;AC1CA;AACA;AACA;AACA;AACA;;;;;;;;ACJA;AACA;AACA;AACA;;;;;;;;ACHA;AACA;AACA;AACA;AACA;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACVA;AACA,WAAW,mBAAO,CAAC,GAAmB;AACtC,WAAW,mBAAO,CAAC,EAAmB;AACtC;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wBAAwB;AACxC,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;;;;;;;ACzBA,iBAAiB,mBAAO,CAAC,GAAmB;AAC5C,aAAa,mBAAO,CAAC,GAAM;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;;;;;;;;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,eAAe;AACf;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,eAAe;AACf;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,eAAe;AACf;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACzDA,+BAA+B,mBAAO,CAAC,GAAoC;;AAE3E;AACA;AACA;AACA;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,QAAQ;AACR;AACA;AACA;;;;;;;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;;;;;;;;ACpGA,iBAAiB,mBAAO,CAAC,GAAsB;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;;;;;;;ACxBA,aAAa,mBAAO,CAAC,GAAsB;AAC3C,iBAAiB,mBAAO,CAAC,GAA0B;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACTA,eAAe,mBAAO,CAAC,EAAoB;AAC3C,gBAAgB,mBAAO,CAAC,EAAqB;AAC7C,eAAe,mBAAO,CAAC,GAAoB;;AAE3C;AACA;AACA,eAAe,mBAAO,CAAC,GAAW;AAClC;AACA,gBAAgB,mBAAO,CAAC,GAAY;AACpC;AACA,iBAAiB,mBAAO,CAAC,GAAa;AACtC;AACA,sBAAsB,mBAAO,CAAC,EAAkB;AAChD;AACA,mBAAmB,mBAAO,CAAC,GAAe;AAC1C;AACA,iBAAiB,mBAAO,CAAC,GAAa;AACtC;AACA,eAAe,mBAAO,CAAC,GAAW;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChCA,eAAe,mBAAO,CAAC,GAA2B;;AAElD;AACA;AACA;AACA;AACA;AACA,8GAA8G;AAC9G;AACA,EAAE;;AAEF;AACA;AACA,kBAAkB,mBAAO,CAAC,GAAgC;AAC1D;AACA,wBAAwB,mBAAO,CAAC,GAA4B;AAC5D,0BAA0B,mBAAO,CAAC,GAA8B;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,uCAAuC;AAC7D,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,sBAAsB,kCAAkC;AACxD,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,OAAO;AACP,kBAAkB;AAClB;AACA,KAAK;AACL;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;;;;;;;;ACrGA;AACA;AACA;AACA,mBAAmB,+BAA+B,yBAAyB;AAC3E;AACA;AACA;AACA;;;;;;;;ACPA,iBAAiB,mBAAO,CAAC,GAAqB;;AAE9C;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS,8EAA8E;AACrG,KAAK;AACL;AACA;AACA;AACA;AACA,cAAc,SAAS,+EAA+E;AACtG,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ,iBAAiB;AACvC,KAAK;AACL;AACA;AACA;;;;;;;;ACxBA;AACA;AACA;AACA,eAAe;AACf,mBAAmB,uBAAuB;AAC1C;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,gBAAgB,MAAM;AACtB,OAAO;AACP;AACA,qDAAqD,gBAAgB;AACrE;AACA;;AAEA;AACA;;;;;;;;AClBA;AACA;AACA,6BAA6B,WAAW;AACxC;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA,8BAA8B,WAAW;AACzC;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;;;;;;;;ACpBA,aAAa,mBAAO,CAAC,GAAmB;AACxC,iBAAiB,mBAAO,CAAC,GAAuB;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACTA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;UEtBA;UACA;UACA;UACA","sources":["webpack://egg-born-module-a-authopen/../../../node_modules/passport-strategy/lib/index.js","webpack://egg-born-module-a-authopen/../../../node_modules/passport-strategy/lib/strategy.js","webpack://egg-born-module-a-authopen/./backend/src/aops.js","webpack://egg-born-module-a-authopen/./backend/src/bean/atom.authOpen.js","webpack://egg-born-module-a-authopen/./backend/src/bean/auth.provider.open.js","webpack://egg-born-module-a-authopen/./backend/src/bean/bean.authOpen.js","webpack://egg-born-module-a-authopen/./backend/src/bean/event.accountMigration.js","webpack://egg-born-module-a-authopen/./backend/src/bean/local.token.js","webpack://egg-born-module-a-authopen/./backend/src/bean/version.manager.js","webpack://egg-born-module-a-authopen/./backend/src/bean/version/init1.js","webpack://egg-born-module-a-authopen/./backend/src/bean/version/initData1.js","webpack://egg-born-module-a-authopen/./backend/src/bean/version/update1.js","webpack://egg-born-module-a-authopen/./backend/src/beans.js","webpack://egg-born-module-a-authopen/./backend/src/config/config.js","webpack://egg-born-module-a-authopen/./backend/src/config/errors.js","webpack://egg-born-module-a-authopen/./backend/src/config/locale/en-us.js","webpack://egg-born-module-a-authopen/./backend/src/config/locale/zh-cn.js","webpack://egg-born-module-a-authopen/./backend/src/config/locales.js","webpack://egg-born-module-a-authopen/./backend/src/config/passport/auth.js","webpack://egg-born-module-a-authopen/./backend/src/config/passport/strategy.js","webpack://egg-born-module-a-authopen/./backend/src/config/static/layout/layoutAtomListAuthOpen.js","webpack://egg-born-module-a-authopen/./backend/src/config/static/layouts.js","webpack://egg-born-module-a-authopen/./backend/src/config/static/resources.js","webpack://egg-born-module-a-authopen/./backend/src/config/validation/schema/authOpen.js","webpack://egg-born-module-a-authopen/./backend/src/config/validation/schemas.js","webpack://egg-born-module-a-authopen/./backend/src/controller/auth.js","webpack://egg-born-module-a-authopen/./backend/src/controller/authOpen.js","webpack://egg-born-module-a-authopen/./backend/src/controllers.js","webpack://egg-born-module-a-authopen/./backend/src/main.js","webpack://egg-born-module-a-authopen/./backend/src/meta.js","webpack://egg-born-module-a-authopen/./backend/src/model/authOpen.js","webpack://egg-born-module-a-authopen/./backend/src/models.js","webpack://egg-born-module-a-authopen/./backend/src/routes.js","webpack://egg-born-module-a-authopen/./backend/src/service/auth.js","webpack://egg-born-module-a-authopen/./backend/src/service/authOpen.js","webpack://egg-born-module-a-authopen/./backend/src/services.js","webpack://egg-born-module-a-authopen/external commonjs2 \"require3\"","webpack://egg-born-module-a-authopen/external node-commonjs \"path\"","webpack://egg-born-module-a-authopen/external node-commonjs \"util\"","webpack://egg-born-module-a-authopen/webpack/bootstrap","webpack://egg-born-module-a-authopen/webpack/before-startup","webpack://egg-born-module-a-authopen/webpack/startup","webpack://egg-born-module-a-authopen/webpack/after-startup"],"sourcesContent":["/**\n * Module dependencies.\n */\nvar Strategy = require('./strategy');\n\n\n/**\n * Expose `Strategy` directly from package.\n */\nexports = module.exports = Strategy;\n\n/**\n * Export constructors.\n */\nexports.Strategy = Strategy;\n","/**\n * Creates an instance of `Strategy`.\n *\n * @constructor\n * @api public\n */\nfunction Strategy() {\n}\n\n/**\n * Authenticate request.\n *\n * This function must be overridden by subclasses.  In abstract form, it always\n * throws an exception.\n *\n * @param {Object} req The request to authenticate.\n * @param {Object} [options] Strategy-specific options.\n * @api public\n */\nStrategy.prototype.authenticate = function(req, options) {\n  throw new Error('Strategy#authenticate must be overridden by subclass');\n};\n\n\n/**\n * Expose `Strategy`.\n */\nmodule.exports = Strategy;\n","module.exports = app => {\n  const aops = {};\n  return aops;\n};\n","const require3 = require('require3');\nconst randomize = require3('randomatic');\n\nmodule.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Atom extends app.meta.AtomBase {\n    get modelAuth() {\n      return this.ctx.model.module('a-base').auth;\n    }\n\n    async create({ atomClass, item, options, user }) {\n      // check demo\n      const ctxCaller = this.ctx.ctxCaller;\n      if (ctxCaller && ctxCaller.path === '/api/a/base/atom/create') {\n        this.ctx.bean.util.checkDemo();\n      }\n      // user\n      const userId = user.id;\n      // super\n      const key = await super.create({ atomClass, item, options, user });\n      const atomId = key.atomId;\n      // clientID clientSecret\n      const clientID = randomize('0a', 20);\n      const clientSecret = randomize('0a', 40);\n      // add authOpen\n      const res = await this.ctx.model.authOpen.insert({\n        atomId,\n        userId,\n        clientID,\n        clientSecret,\n      });\n      const itemId = res.insertId;\n      // add aAuth record\n      const providerItem = await this.ctx.bean.authProvider.getAuthProvider({\n        module: moduleInfo.relativeName,\n        providerName: 'authopen',\n      });\n      await this.modelAuth.insert({\n        userId,\n        providerId: providerItem.id,\n        profileId: itemId,\n        profile: JSON.stringify({\n          authOpenId: itemId,\n        }),\n      });\n      // return key\n      return { atomId, itemId };\n    }\n\n    async read({ atomClass, options, key, user }) {\n      // super\n      const item = await super.read({ atomClass, options, key, user });\n      if (!item) return null;\n      // meta\n      this._getMeta(item);\n      // ok\n      return item;\n    }\n\n    async select({ atomClass, options, items, user }) {\n      // super\n      await super.select({ atomClass, options, items, user });\n      // meta\n      for (const item of items) {\n        this._getMeta(item);\n      }\n    }\n\n    async write({ atomClass, target, key, item, options, user }) {\n      // super\n      await super.write({ atomClass, target, key, item, options, user });\n      // update authOpen\n      const data = await this.ctx.model.authOpen.prepareData(item);\n      await this.ctx.model.authOpen.update(data);\n    }\n\n    async delete({ atomClass, key, user }) {\n      const itemId = key.itemId;\n      // super\n      await super.delete({ atomClass, key, user });\n      // delete aAuth record\n      const providerItem = await this.ctx.bean.authProvider.getAuthProvider({\n        module: moduleInfo.relativeName,\n        providerName: 'authopen',\n      });\n      // not use userId\n      await this.modelAuth.delete({\n        providerId: providerItem.id,\n        profileId: itemId,\n      });\n      // delete authOpen\n      await this.ctx.model.authOpen.delete({\n        id: itemId,\n      });\n    }\n\n    async checkRightAction({ atom, atomClass, action, stage, user, checkFlow }) {\n      // super\n      const res = await super.checkRightAction({ atom, atomClass, action, stage, user, checkFlow });\n      if (!res) return res;\n      if (atom.atomStage !== 1) return res;\n      // hideClientSecret\n      if (![101].includes(action)) return res;\n      // authOpen\n      const item = await this.ctx.model.authOpen.get({ id: atom.itemId });\n      // delete\n      if (action === 101) {\n        if (item.clientSecretHidden === 1) return null;\n      }\n      // default\n      return res;\n    }\n\n    _getMeta(item) {\n      // meta\n      const meta = this._ensureItemMeta(item);\n      // meta.flags\n      // meta.summary\n      meta.summary = item.description;\n      // clientSecretHidden\n      if (item.clientSecretHidden) {\n        item.clientSecret = '******';\n      }\n      // scopeRoleName\n      if (!item.scopeRoleId) {\n        item.scopeRoleName = 'Not Specified';\n      }\n      if (item.scopeRoleName) {\n        item.scopeRoleNameLocale = this.ctx.text(item.scopeRoleName);\n      }\n    }\n  }\n\n  return Atom;\n};\n","const Strategy = require('../config/passport/strategy.js');\n\nmodule.exports = function (ctx) {\n  // const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Provider extends ctx.app.meta.IAuthProviderBase(ctx) {\n    async getConfigDefault() {\n      return null;\n    }\n    checkConfigValid(/* config*/) {\n      return true;\n    }\n    getStrategy() {\n      return Strategy;\n    }\n    async onVerify(body) {\n      const { clientID, clientSecret } = body.data;\n      // verify\n      const authOpen = await ctx.bean.authOpen.verify({ clientID, clientSecret });\n      // maxAge\n      let maxAge;\n      if (authOpen.neverExpire) {\n        // only one day\n        maxAge = 0;\n      } else {\n        maxAge = authOpen.expireTime - Date.now();\n      }\n      return {\n        module: this.providerModule,\n        provider: this.providerName,\n        providerScene: this.providerScene,\n        profileId: authOpen.id,\n        maxAge,\n        authShouldExists: true,\n        profile: {\n          authOpenId: authOpen.id,\n        },\n      };\n    }\n  }\n\n  return Provider;\n};\n","const require3 = require('require3');\nconst randomize = require3('randomatic');\n\nmodule.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  const __atomClassRole = {\n    module: 'a-base',\n    atomClassName: 'role',\n  };\n  const __atomClassAuthOpen = {\n    module: moduleInfo.relativeName,\n    atomClassName: 'authOpen',\n  };\n  class AuthOpen {\n    get modelAuthOpen() {\n      return ctx.model.module(moduleInfo.relativeName).authOpen;\n    }\n    get modelResourceRole() {\n      return ctx.model.module('a-base').resourceRole;\n    }\n    get localAuthSimple() {\n      return ctx.bean.local.module('a-authsimple').simple;\n    }\n\n    async hideClientSecret({ atomId, itemId, user }) {\n      const item = await this._forceAuthOpen({ atomId, itemId });\n      const clientSecret = await this.localAuthSimple.calcPassword({ password: item.clientSecret });\n      // use userId for safety\n      await this.modelAuthOpen.update({\n        id: itemId,\n        userId: user.id,\n        clientSecret,\n        clientSecretHidden: 1,\n      });\n    }\n\n    async resetClientSecret({ atomId, itemId, user }) {\n      itemId = await this._forceAuthOpenId({ atomId, itemId });\n      // clientSecret\n      const clientSecret = randomize('0a', 40);\n      // use userId for safety\n      await this.modelAuthOpen.update({\n        id: itemId,\n        userId: user.id,\n        clientSecret,\n        clientSecretHidden: 0,\n      });\n    }\n\n    async verify({ clientID, clientSecret }) {\n      // authOpen\n      const authOpen = await this.modelAuthOpen.get({ clientID });\n      if (!authOpen) return ctx.throw(403);\n      // clientSecret\n      if (authOpen.clientSecretHidden) {\n        const res = await this.localAuthSimple.verifyPassword({\n          password: clientSecret,\n          hash: authOpen.clientSecret,\n        });\n        if (!res) return ctx.throw(403);\n      } else {\n        if (clientSecret !== authOpen.clientSecret) return ctx.throw(403);\n      }\n      // atomDisabled\n      const atom = await ctx.bean.atom.modelAtom.get({ id: authOpen.atomId });\n      if (atom.atomDisabled) return ctx.throw(403);\n      // neverExpire/expireTime\n      if (!authOpen.neverExpire && authOpen.expireTime <= Date.now()) {\n        return ctx.throw.module(moduleInfo.relativeName, 1001);\n      }\n      // done\n      return authOpen;\n    }\n\n    isAuthOpen() {\n      const provider = ctx.bean.util.getProperty(ctx, 'state.user.provider');\n      if (!provider) return false;\n      return provider.module === 'a-authopen' && provider.providerName === 'authopen' ? provider : null;\n    }\n\n    async prepareAuthOpen() {\n      const provider = this.isAuthOpen();\n      if (!provider) return null; // not auth open provider\n      const authOpen = await this.getAuthOpenByAuthId({ authId: provider.id });\n      // check full\n      if (authOpen.scopeRoleName === 'RoleScopeFull') return null;\n      // ok\n      return authOpen;\n    }\n\n    async checkRightResource({ resourceAtomId }) {\n      // authOpen\n      const authOpen = await this.prepareAuthOpen();\n      if (!authOpen) return true;\n      // check\n      const right = await ctx.model.queryOne(\n        `\n          select * from aViewRoleRightResource a\n            where a.iid=? and a.roleIdWho=? and a.atomId=?\n        `,\n        [ctx.instance.id, authOpen.scopeRoleId, resourceAtomId]\n      );\n      return !!right;\n    }\n\n    async checkRightAtomAction({ atomClass, action }) {\n      // authOpen\n      const authOpen = await this.prepareAuthOpen();\n      if (!authOpen) return true;\n      // parse action code\n      action = ctx.bean.atomAction.parseActionCode({\n        action,\n        atomClass,\n      });\n      // check\n      const right = await ctx.model.queryOne(\n        `\n        select * from aViewRoleRightAtomClass a\n            where a.iid=? and a.roleIdWho=? and a.atomClassId=? and action=?\n      `,\n        [ctx.instance.id, authOpen.scopeRoleId, atomClass.id, action]\n      );\n      return !!right;\n    }\n\n    async getAuthOpenByAuthId({ authId }) {\n      return await ctx.model.queryOne(\n        `\n          select a.* from aAuthOpenView a\n            inner join aAuth b on a.id=b.profileId\n              where a.iid=? and a.deleted=0 and b.id=? \n        `,\n        [ctx.instance.id, authId]\n      );\n    }\n\n    async _forceAuthOpenId({ atomId, itemId }) {\n      if (!itemId) {\n        const item = await this.modelAuthOpen.get({ atomId });\n        itemId = item.id;\n      }\n      return itemId;\n    }\n\n    async _forceAuthOpen({ atomId, itemId }) {\n      if (!itemId) {\n        return await this.modelAuthOpen.get({ atomId });\n      }\n      return await this.modelAuthOpen.get({ id: itemId });\n    }\n\n    // create aAuthOpen record for user\n    async createAuthOpen({ item: { atomName, scopeRoleName, neverExpire = 1, expireTime = null }, user }) {\n      const authOpenKey = await ctx.bean.atom.create({\n        atomClass: __atomClassAuthOpen,\n        user,\n      });\n      // write\n      const scopeRole = await ctx.bean.role.parseRoleName({ roleName: scopeRoleName });\n      const item = {\n        atomName,\n        scopeRoleId: scopeRole.id,\n        neverExpire,\n        expireTime,\n      };\n      await ctx.bean.atom.write({\n        key: authOpenKey,\n        item,\n        user,\n      });\n      // submit\n      await ctx.bean.atom.submit({\n        key: authOpenKey,\n        options: { ignoreFlow: true },\n        user,\n      });\n      // ok\n      return authOpenKey;\n    }\n\n    async createRoleScopes({ roleScopes, setDirty = true }) {\n      //\n      for (const roleScope of roleScopes) {\n        // item\n        const item = { ...roleScope };\n        // roleIdParent\n        if (roleScope.roleIdParent === 0) {\n          item.roleIdParent = 0;\n        } else {\n          const role = await ctx.bean.role.parseRoleName({ roleName: roleScope.roleIdParent });\n          item.roleIdParent = role.id;\n        }\n        // loadAtomStatic\n        const atomKey = await ctx.bean.atomStatic.loadAtomStatic({\n          moduleName: moduleInfo.relativeName,\n          atomClass: __atomClassRole,\n          item,\n        });\n        if (atomKey && roleScope._roleRightsRead) {\n          // role rights read\n          const roleName = roleScope._roleRightsRead;\n          const scopeNames = [atomKey.itemId];\n          const roleRights = [{ roleName, action: 'read', scopeNames }];\n          await ctx.bean.role.addRoleRightBatch({\n            module: 'a-base',\n            atomClassName: 'role',\n            roleRights,\n          });\n        }\n      }\n      // setDirty\n      if (setDirty) {\n        await ctx.bean.role.setDirty(true);\n      }\n    }\n  }\n  return AuthOpen;\n};\n","module.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class eventBean {\n    get modelAuthOpen() {\n      return ctx.model.module(moduleInfo.relativeName).authOpen;\n    }\n    async execute(context, next) {\n      const data = context.data;\n      // delete aAuthOpen/aAuth\n      const items = await this.modelAuthOpen.select({\n        where: { userId: data.userIdFrom },\n      });\n      for (const item of items) {\n        await ctx.bean.atom.delete({ key: { atomId: item.atomId } });\n      }\n      // next\n      await next();\n    }\n  }\n\n  return eventBean;\n};\n","const require3 = require('require3');\nconst chalk = require3('chalk');\nconst Table = require3('cli-table3');\nconst eggBornUtils = require3('egg-born-utils');\n\nmodule.exports = ctx => {\n  // const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Local {\n    async add({ name, host, clientID, clientSecret, log }) {\n      // init file\n      const { fileName, config } = await eggBornUtils.openAuthConfig.load();\n      // config\n      if (!config.tokens) config.tokens = {};\n      config.tokens[name] = {\n        host,\n        clientID,\n        clientSecret,\n      };\n      // save\n      await eggBornUtils.openAuthConfig.save({ config });\n      // log\n      if (log) {\n        console.log(chalk.cyan(`\\n  ${fileName}\\n`));\n      }\n      // ok\n      return { fileName, config };\n    }\n\n    async delete({ name, log }) {\n      // init file\n      const { fileName, config } = await eggBornUtils.openAuthConfig.load();\n      // config\n      if (config.tokens && config.tokens[name]) {\n        // delete\n        delete config.tokens[name];\n        // save\n        await eggBornUtils.openAuthConfig.save({ config });\n      }\n      // log\n      if (log) {\n        console.log(chalk.cyan(`\\n  ${fileName}\\n`));\n      }\n      // ok\n      return { fileName, config };\n    }\n\n    async get({ name }) {\n      // init file\n      const { config } = await eggBornUtils.openAuthConfig.load();\n      return config.tokens && config.tokens[name];\n    }\n\n    async list({ log }) {\n      // init file\n      const { fileName, config } = await eggBornUtils.openAuthConfig.load();\n      // log\n      if (log) {\n        // tokens\n        if (!config.tokens) config.tokens = {};\n        const table = new Table({\n          head: ['Token Name', 'Host'],\n          colWidths: [30, 50],\n        });\n        for (const tokenName in config.tokens) {\n          const token = config.tokens[tokenName];\n          table.push([tokenName, token.host]);\n        }\n        console.log(table.toString());\n        // fileName\n        console.log(chalk.cyan(`\\n  ${fileName}\\n`));\n      }\n      // ok\n      return { fileName, config };\n    }\n  }\n  return Local;\n};\n","const VersionUpdate1Fn = require('./version/update1.js');\nconst VersionInit1Fn = require('./version/init1.js');\n\nmodule.exports = app => {\n  class Version extends app.meta.BeanBase {\n    async update(options) {\n      if (options.version === 1) {\n        const versionUpdate1 = new (VersionUpdate1Fn(this.ctx))();\n        await versionUpdate1.run();\n      }\n    }\n\n    async init(options) {\n      if (options.version === 1) {\n        const versionInit1 = new (VersionInit1Fn(this.ctx))();\n        await versionInit1.run(options);\n      }\n    }\n\n    async test() {}\n  }\n\n  return Version;\n};\n","const path = require('path');\nconst require3 = require('require3');\nconst initData = require('./initData1.js');\n\nmodule.exports = function (ctx) {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class VersionInit {\n    get modelAuthOpen() {\n      return ctx.model.module(moduleInfo.relativeName).authOpen;\n    }\n    get localToken() {\n      return ctx.bean.local.module(moduleInfo.relativeName).token;\n    }\n\n    async run(options) {\n      // rights\n      await this._init_rights();\n      // open auth scopes\n      await this._init_roleScopes();\n      // RoleScopeCliDevelopment\n      await this._init_rootCliDevTest();\n    }\n\n    async _init_rights() {\n      // add role rights\n      const roleRights = [\n        { roleName: 'authenticated', action: 'create' },\n        { roleName: 'authenticated', action: 'read', scopeNames: 0 },\n        { roleName: 'authenticated', action: 'write', scopeNames: 0 },\n        { roleName: 'authenticated', action: 'delete', scopeNames: 0 },\n        { roleName: 'authenticated', action: 'enable', scopeNames: 0 },\n        { roleName: 'authenticated', action: 'disable', scopeNames: 0 },\n        { roleName: 'authenticated', action: 'hideClientSecret', scopeNames: 0 },\n        { roleName: 'authenticated', action: 'resetClientSecret', scopeNames: 0 },\n        { roleName: 'authenticated', action: 'deleteBulk' },\n        { roleName: 'system', action: 'read', scopeNames: 'authenticated' },\n      ];\n      await ctx.bean.role.addRoleRightBatch({ atomClassName: 'authOpen', roleRights });\n    }\n\n    async _init_roleScopes() {\n      // createRoleScopes\n      await ctx.bean.authOpen.createRoleScopes({ roleScopes: initData.roleScopes, setDirty: true });\n      // add role rights\n      const roleRights = [\n        // template\n        { roleName: 'system', action: 'read', scopeNames: 'OpenAuthScope' },\n        { roleName: 'system', action: 'write', scopeNames: 'OpenAuthScope' },\n        { roleName: 'system', action: 'delete', scopeNames: 'OpenAuthScope' },\n        { roleName: 'system', action: 'clone', scopeNames: 'OpenAuthScope' },\n        // { roleName: 'system', action: 'move', scopeNames: 'OpenAuthScope' },\n        { roleName: 'system', action: 'addChild', scopeNames: 'OpenAuthScope' },\n        // { roleName: 'system', action: 'roleUsers', scopeNames: 'OpenAuthScope' },\n        { roleName: 'system', action: 'includes', scopeNames: 'OpenAuthScope' },\n        { roleName: 'system', action: 'resourceAuthorizations', scopeNames: 'OpenAuthScope' },\n        { roleName: 'system', action: 'atomAuthorizations', scopeNames: 'OpenAuthScope' },\n      ];\n      await ctx.bean.role.addRoleRightBatch({ module: 'a-base', atomClassName: 'role', roleRights });\n    }\n\n    async _init_rootCliDevTest() {\n      // only for test/local env\n      if (ctx.app.meta.isProd || ctx.subdomain) return;\n      // userRoot\n      const userRoot = await ctx.bean.user.get({ userName: 'root' });\n      // create\n      const authOpenKey = await this._init_rootCliDevTest_create({ userRoot });\n      // persistence\n      await this._init_rootCliDevTest_persistence({ authOpenKey, userRoot });\n    }\n\n    async _init_rootCliDevTest_create({ userRoot }) {\n      // create aAuthOpen record for user:root\n      const item = {\n        atomName: 'Cli For Development',\n        scopeRoleName: 'RoleScopeCliDevelopment',\n        neverExpire: 1,\n        expireTime: null,\n      };\n      return await ctx.bean.authOpen.createAuthOpen({ item, user: userRoot });\n    }\n\n    async _init_rootCliDevTest_persistence({ authOpenKey, userRoot }) {\n      // authOpen\n      const item = await this.modelAuthOpen.get({ id: authOpenKey.itemId });\n      // name\n      const name = `clidev@${ctx.app.name}`;\n      // host\n      const buildConfig = require3(path.join(process.cwd(), 'build/config.js'));\n      const host = `http://127.0.0.1:${buildConfig.backend.port}`;\n      // add\n      await this.localToken.add({\n        name,\n        host,\n        clientID: item.clientID,\n        clientSecret: item.clientSecret,\n        log: true,\n      });\n      // hideClientSecret\n      await ctx.bean.authOpen.hideClientSecret({ itemId: item.id, user: userRoot });\n    }\n  }\n  return VersionInit;\n};\n","// roleScopes\nconst roleScopes = [\n  {\n    atomName: 'OpenAuthScope',\n    atomStaticKey: 'roleOpenAuthScope',\n    atomRevision: 0,\n    description: '',\n    system: 1,\n    sorting: 0,\n    roleTypeCode: 6,\n    roleIdParent: 0, // 'authenticated',\n    _roleRightsRead: null,\n  },\n  {\n    atomName: 'RoleScopeFull',\n    atomStaticKey: 'roleScopeFull',\n    atomRevision: 0,\n    description: '',\n    system: 1,\n    sorting: 0,\n    roleTypeCode: 6,\n    roleIdParent: 'OpenAuthScope',\n    _roleRightsRead: 'authenticated',\n  },\n  {\n    atomName: 'RoleScopeCliDevelopment',\n    atomStaticKey: 'roleScopeCliDevelopment',\n    atomRevision: 0,\n    description: '',\n    system: 1,\n    sorting: 1,\n    roleTypeCode: 6,\n    roleIdParent: 'OpenAuthScope',\n    _roleRightsRead: null,\n  },\n];\n\nmodule.exports = {\n  roleScopes,\n};\n","module.exports = function (ctx) {\n  class VersionUpdate {\n    async run() {\n      // create table: aAuthOpen\n      let sql = `\n      CREATE TABLE aAuthOpen (\n        id int(11) NOT NULL AUTO_INCREMENT,\n        createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n        updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n        deleted int(11) DEFAULT '0',\n        iid int(11) DEFAULT '0',\n        atomId int(11) DEFAULT '0',\n        description varchar(255) DEFAULT NULL,\n        userId int(11) DEFAULT '0',\n        scopeRoleId int(11) DEFAULT '0',\n        neverExpire int(11) DEFAULT '1',\n        expireTime timestamp DEFAULT NULL,\n        clientID varchar(50) DEFAULT NULL,\n        clientSecret text DEFAULT NULL,\n        clientSecretHidden int(11) DEFAULT '0',\n        PRIMARY KEY (id)\n      )\n    `;\n      await ctx.model.query(sql);\n      // view: aAuthOpenView\n      sql = `\n          CREATE VIEW aAuthOpenView as\n            select a.*,b.roleName as scopeRoleName from aAuthOpen a\n              left join aRole b on a.scopeRoleId=b.id\n        `;\n      await ctx.model.query(sql);\n    }\n  }\n\n  return VersionUpdate;\n};\n","const versionManager = require('./bean/version.manager.js');\nconst eventAccountMigration = require('./bean/event.accountMigration.js');\nconst atomAuthOpen = require('./bean/atom.authOpen.js');\nconst authProviderOpen = require('./bean/auth.provider.open.js');\nconst localToken = require('./bean/local.token.js');\nconst beanAuthOpen = require('./bean/bean.authOpen.js');\n\nmodule.exports = app => {\n  const beans = {\n    // version\n    'version.manager': {\n      mode: 'app',\n      bean: versionManager,\n    },\n    // event\n    'event.accountMigration': {\n      mode: 'ctx',\n      bean: eventAccountMigration,\n    },\n    // atom\n    'atom.authOpen': {\n      mode: 'app',\n      bean: atomAuthOpen,\n    },\n    // auth.provider\n    'auth.provider.open': {\n      mode: 'ctx',\n      bean: authProviderOpen,\n    },\n    // local\n    'local.token': {\n      mode: 'ctx',\n      bean: localToken,\n    },\n    // global\n    authOpen: {\n      mode: 'ctx',\n      bean: beanAuthOpen,\n      global: true,\n    },\n  };\n  return beans;\n};\n","// eslint-disable-next-line\nmodule.exports = appInfo => {\n  const config = {};\n  return config;\n};\n","// error code should start from 1001\nmodule.exports = {\n  1001: 'AuthOpenTokenExpired',\n};\n","module.exports = {\n  RoleScopeFull: 'Full',\n  RoleScopeCliDevelopment: 'Cli For Development',\n  AuthOpenTokenExpired: 'Token Expired',\n};\n","module.exports = {\n  'Open Auth': '开放认证',\n  'Create AuthOpen': '新建AuthOpen',\n  'AuthOpen List': 'AuthOpen列表',\n  'Not Specified': '未指定',\n  'Hide Client Secret': '隐藏Client Secret',\n  'Reset Client Secret': '重置Client Secret',\n  RoleScopeFull: '全部',\n  RoleScopeCliDevelopment: '开发Cli',\n  AuthOpenTokenExpired: '令牌已过期',\n};\n","module.exports = {\n  'en-us': require('./locale/en-us.js'),\n  'zh-cn': require('./locale/zh-cn.js'),\n};\n","module.exports = app => {\n  // const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  function _createProvider() {\n    return {\n      meta: {\n        title: 'Open Auth',\n        mode: 'direct',\n        scene: false,\n        inner: true,\n        bean: 'open',\n        render: null,\n        validator: null,\n        icon: { f7: ':role:shield-key' },\n      },\n    };\n  }\n\n  const metaAuth = {\n    providers: {\n      authopen: _createProvider(),\n    },\n  };\n\n  // ok\n  return metaAuth;\n};\n","const passport = require('passport-strategy');\nconst util = require('util');\n\nfunction Strategy(options, verify) {\n  if (typeof options === 'function') {\n    verify = options;\n    options = {};\n  }\n  if (!verify) {\n    throw new TypeError('LocalStrategy requires a verify callback');\n  }\n\n  passport.Strategy.call(this);\n  this.name = 'authopen';\n  this._verify = verify;\n  this._passReqToCallback = options.passReqToCallback;\n}\n\n/**\n * Inherit from `passport.Strategy`.\n */\nutil.inherits(Strategy, passport.Strategy);\n\nStrategy.prototype.authenticate = function (req) {\n  // self\n  const self = this;\n  const ctx = req.ctx;\n\n  // check\n  if (req.method === 'GET') {\n    // not allow\n    return self.error(ctx.parseFail(403));\n  }\n\n  // verified\n  function verified(err, user, info) {\n    if (err) {\n      return self.error(err);\n    }\n    if (!user) {\n      return self.fail(info);\n    }\n    ctx.success(user);\n    self.success(user, info);\n  }\n\n  try {\n    if (self._passReqToCallback) {\n      this._verify(req, req.body, verified);\n    } else {\n      this._verify(req.body, verified);\n    }\n  } catch (ex) {\n    return self.error(ex);\n  }\n};\n\nmodule.exports = Strategy;\n","module.exports = app => {\n  // const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  const content = {\n    layouts: {\n      table: {\n        blocks: {\n          items: {\n            columns: [\n              {\n                dataIndex: 'atomName',\n                title: 'Atom Name',\n                align: 'left',\n                component: {\n                  module: 'a-baselayout',\n                  name: 'listLayoutTableCellAtomName',\n                },\n              },\n              {\n                dataIndex: 'description',\n                title: 'Description',\n                align: 'left',\n              },\n              {\n                dataIndex: 'userName',\n                title: 'Creator',\n                align: 'left',\n                component: {\n                  module: 'a-baselayout',\n                  name: 'listLayoutTableCellUserName',\n                },\n              },\n              {\n                dataIndex: 'atomCreatedAt',\n                title: 'Created Time',\n                align: 'left',\n              },\n              {\n                dataIndex: 'atomUpdatedAt',\n                title: 'Modification Time',\n                align: 'left',\n              },\n            ],\n          },\n        },\n      },\n    },\n  };\n  const layout = {\n    atomName: 'Open Auth',\n    atomStaticKey: 'layoutAtomListAuthOpen',\n    atomRevision: 0,\n    description: '',\n    layoutTypeCode: 3,\n    content: JSON.stringify(content),\n    resourceRoles: 'root',\n  };\n  return layout;\n};\n","const layoutAtomListAuthOpen = require('./layout/layoutAtomListAuthOpen.js');\n\nmodule.exports = app => {\n  const layouts = [layoutAtomListAuthOpen(app)];\n  return layouts;\n};\n","module.exports = app => {\n  // const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  const resources = [\n    // menu\n    // {\n    //   atomName: 'Create AuthOpen',\n    //   atomStaticKey: 'createAuthOpen',\n    //   atomRevision: 0,\n    //   atomCategoryId: 'a-base:menu.Create',\n    //   resourceType: 'a-base:menu',\n    //   resourceConfig: JSON.stringify({\n    //     module: moduleInfo.relativeName,\n    //     atomClassName: 'authOpen',\n    //     atomAction: 'create',\n    //   }),\n    //   resourceRoles: 'template.system',\n    // },\n    // {\n    //   atomName: 'AuthOpen List',\n    //   atomStaticKey: 'listAuthOpen',\n    //   atomRevision: 0,\n    //   atomCategoryId: 'a-base:menu.List',\n    //   resourceType: 'a-base:menu',\n    //   resourceConfig: JSON.stringify({\n    //     module: moduleInfo.relativeName,\n    //     atomClassName: 'authOpen',\n    //     atomAction: 'read',\n    //   }),\n    //   resourceRoles: 'template.system',\n    // },\n  ];\n  return resources;\n};\n","module.exports = app => {\n  const schemas = {};\n  // authOpen\n  schemas.authOpen = {\n    type: 'object',\n    properties: {\n      // title\n      __groupTitle: {\n        ebType: 'group-flatten',\n        ebTitle: 'Title',\n      },\n      atomName: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Name',\n        notEmpty: true,\n      },\n      description: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Description',\n      },\n      // Basic Info\n      __groupBasicInfo: {\n        ebType: 'group-flatten',\n        ebTitle: 'Basic Info',\n      },\n      scopeRoleId: {\n        type: 'number',\n        ebType: 'role',\n        ebTitle: 'AuthorizationScopeTitle',\n        ebParams: {\n          titleAlias: 'Scope',\n          roleIdStart: null,\n          multiple: false,\n          catalogOnly: false,\n          leafOnly: true,\n          roleTypes: [6],\n          mapper: {\n            scopeRoleId: 'itemId',\n            scopeRoleName: 'atomName',\n            scopeRoleNameLocale: 'atomNameLocale',\n          },\n        },\n        notEmpty: true,\n      },\n      neverExpire: {\n        type: 'number',\n        ebType: 'toggle',\n        ebTitle: 'NeverExpire',\n      },\n      expireTime: {\n        type: ['object', 'null'],\n        ebType: 'datePicker',\n        ebTitle: 'Expiration Time',\n        ebParams: {\n          timePicker: true,\n          dateFormat: 'YYYY-MM-DD HH:mm:00',\n          header: false,\n          toolbar: true,\n        },\n        ebDisplay: {\n          expression: '!neverExpire',\n          dependencies: ['neverExpire'],\n        },\n        notEmpty: {\n          expression: '!neverExpire',\n        },\n      },\n      // Auth Info\n      __groupAuthInfo: {\n        ebType: 'group-flatten',\n        ebTitle: 'Auth Info',\n      },\n      clientID: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Client ID',\n        ebReadOnly: true,\n      },\n      clientSecret: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Client Secret',\n        ebReadOnly: true,\n      },\n    },\n  };\n  // authOpen search\n  schemas.authOpenSearch = {\n    type: 'object',\n    properties: {\n      description: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Description',\n      },\n    },\n  };\n  return schemas;\n};\n","const authOpen = require('./schema/authOpen.js');\n\nmodule.exports = app => {\n  const schemas = {};\n  // authOpen\n  Object.assign(schemas, authOpen(app));\n  // ok\n  return schemas;\n};\n","module.exports = app => {\n  class AuthController extends app.Controller {\n    async signin() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      // data: { clientID, clientSecret }\n      const res = await this.ctx.service.auth.signin({\n        data: this.ctx.request.body.data,\n      });\n      this.ctx.success(res);\n    }\n  }\n  return AuthController;\n};\n","module.exports = app => {\n  class AuthOpenController extends app.Controller {\n    async hideClientSecret() {\n      // check demo\n      // this.ctx.bean.util.checkDemo();\n      const res = await this.ctx.service.authOpen.hideClientSecret({\n        key: this.ctx.request.body.key,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async resetClientSecret() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const res = await this.ctx.service.authOpen.resetClientSecret({\n        key: this.ctx.request.body.key,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n  }\n\n  return AuthOpenController;\n};\n","const auth = require('./controller/auth.js');\nconst authOpen = require('./controller/authOpen.js');\n\nmodule.exports = app => {\n  const controllers = {\n    auth,\n    authOpen,\n  };\n  return controllers;\n};\n","const config = require('./config/config.js');\nconst locales = require('./config/locales.js');\nconst errors = require('./config/errors.js');\n\nmodule.exports = app => {\n  // aops\n  const aops = require('./aops.js')(app);\n  // beans\n  const beans = require('./beans.js')(app);\n  // routes\n  const routes = require('./routes.js')(app);\n  // controllers\n  const controllers = require('./controllers.js')(app);\n  // services\n  const services = require('./services.js')(app);\n  // models\n  const models = require('./models.js')(app);\n  // meta\n  const meta = require('./meta.js')(app);\n\n  return {\n    aops,\n    beans,\n    routes,\n    controllers,\n    services,\n    models,\n    config,\n    locales,\n    errors,\n    meta,\n  };\n};\n","const authFn = require('./config/passport/auth.js');\n\n// actionPathListOpenAuthSelf\nconst _options = {\n  stage: 'formal',\n  mine: 1,\n};\nconst actionPathListOpenAuthSelf = `/a/basefront/atom/list?module=a-authopen&atomClassName=authOpen&options=${encodeURIComponent(\n  JSON.stringify(_options)\n)}`;\n\nmodule.exports = app => {\n  // schemas\n  const schemas = require('./config/validation/schemas.js')(app);\n  // static\n  const staticLayouts = require('./config/static/layouts.js')(app);\n  const staticResources = require('./config/static/resources.js')(app);\n  // meta\n  const meta = {\n    auth: authFn,\n    base: {\n      atoms: {\n        authOpen: {\n          info: {\n            bean: 'authOpen',\n            title: 'Open Auth',\n            tableName: 'aAuthOpen',\n            tableNameModes: {\n              default: 'aAuthOpenView',\n            },\n            simple: true,\n            history: false,\n            inner: true,\n            comment: false,\n            attachment: false,\n            layout: {\n              config: {\n                atomList: 'layoutAtomListAuthOpen',\n              },\n            },\n          },\n          actions: {\n            hideClientSecret: {\n              code: 101,\n              title: 'Hide Client Secret',\n              actionModule: 'a-authopen',\n              actionComponent: 'action',\n              icon: { f7: ':outline:visibility-off-outline' },\n            },\n            resetClientSecret: {\n              code: 102,\n              title: 'Reset Client Secret',\n              actionModule: 'a-authopen',\n              actionComponent: 'action',\n              icon: { f7: ':outline:key-reset-outline' },\n            },\n          },\n          validator: 'authOpen',\n          search: {\n            validator: 'authOpenSearch',\n          },\n        },\n      },\n      statics: {\n        'a-baselayout.layout': {\n          items: staticLayouts,\n        },\n        'a-base.resource': {\n          items: staticResources,\n        },\n      },\n    },\n    validation: {\n      validators: {\n        authOpen: {\n          schemas: 'authOpen',\n        },\n        authOpenSearch: {\n          schemas: 'authOpenSearch',\n        },\n      },\n      keywords: {},\n      schemas,\n    },\n    settings: {\n      user: {\n        actionPath: actionPathListOpenAuthSelf,\n      },\n    },\n    event: {\n      implementations: {\n        'a-base:accountMigration': 'accountMigration',\n      },\n    },\n    index: {\n      indexes: {\n        aAuthOpen: 'createdAt,updatedAt,atomId,userId,scopeRoleId',\n      },\n    },\n  };\n  return meta;\n};\n","module.exports = app => {\n  class AuthOpen extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aAuthOpen', options: { disableDeleted: false } });\n    }\n  }\n  return AuthOpen;\n};\n","const authOpen = require('./model/authOpen.js');\n\nmodule.exports = app => {\n  const models = {\n    authOpen,\n  };\n  return models;\n};\n","module.exports = app => {\n  const routes = [\n    // authOpen\n    {\n      method: 'post',\n      path: 'authOpen/hideClientSecret',\n      controller: 'authOpen',\n      meta: { right: { type: 'atom', atomClass: 'a-authopen:authOpen', action: 'hideClientSecret' } },\n    },\n    {\n      method: 'post',\n      path: 'authOpen/resetClientSecret',\n      controller: 'authOpen',\n      meta: { right: { type: 'atom', atomClass: 'a-authopen:authOpen', action: 'resetClientSecret' } },\n    },\n    // auth\n    {\n      method: 'post',\n      path: 'auth/signin',\n      controller: 'auth',\n      meta: { auth: { enable: false } },\n    },\n  ];\n  return routes;\n};\n","module.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Auth extends app.Service {\n    // data: { clientID, clientSecret }\n    async signin({ data, state = 'login' }) {\n      // signin\n      await this.ctx.bean.authProvider.authenticateDirect({\n        module: moduleInfo.relativeName,\n        providerName: 'authopen',\n        query: { state },\n        body: { data },\n      });\n      // user info\n      return await this.ctx.bean.auth.getLoginInfo({ clientId: true });\n    }\n  }\n\n  return Auth;\n};\n","module.exports = app => {\n  class AuthOpen extends app.Service {\n    async hideClientSecret({ key, user }) {\n      return await this.ctx.bean.authOpen.hideClientSecret({\n        atomId: key.atomId,\n        itemId: key.itemId,\n        user,\n      });\n    }\n\n    async resetClientSecret({ key, user }) {\n      return await this.ctx.bean.authOpen.resetClientSecret({\n        atomId: key.atomId,\n        itemId: key.itemId,\n        user,\n      });\n    }\n  }\n\n  return AuthOpen;\n};\n","const auth = require('./service/auth.js');\nconst authOpen = require('./service/authOpen.js');\n\nmodule.exports = app => {\n  const services = {\n    auth,\n    authOpen,\n  };\n  return services;\n};\n","module.exports = require(\"require3\");","module.exports = require(\"path\");","module.exports = require(\"util\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(421);\n",""],"names":[],"sourceRoot":""}