{"version":3,"file":"backend.js","mappings":";;;;;;AAAA,iBAAiB,mBAAO,CAAC,GAAU;AACnC;AACA;AACA;AACA;AACA,uBAAuB,mBAAO,CAAC,GAAe;;AAE9C;AACA,2BAA2B,wCAAwC;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2BAA2B,kCAAkC;AAC7D;AACA;AACA;AACA;AACA,wBAAwB,0CAA0C;AAClE;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA,yBAAyB,oCAAoC;AAC7D;AACA,sBAAsB;AACtB;AACA,kBAAkB,mDAAmD;AACrE;;AAEA,yBAAyB,kCAAkC;AAC3D,sBAAsB,yDAAyD;AAC/E;;AAEA,6BAA6B,sCAAsC;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN,0BAA0B,sEAAsE;AAChG,MAAM;AACN;AACA,sBAAsB,8DAA8D;AACpF;AACA;AACA;;;;;;;;AC9GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4GAA4G;AAC5G;AACA;AACA;AACA;AACA,kEAAkE,eAAe;AACjF;AACA;AACA,2BAA2B,QAAQ,EAAE,6BAA6B;AAClE,0BAA0B,4CAA4C;AACtE;AACA;AACA;AACA;AACA,GAAG;AACH;;;;;;;;ACrCA,iBAAiB,mBAAO,CAAC,GAAU;AACnC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA,0BAA0B;AAC1B;AACA;AACA,oBAAoB,kEAAkE;AACtF;AACA;AACA;AACA;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,2BAA2B;AACpE;AACA;AACA;AACA,wBAAwB,sEAAsE;AAC9F;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA,8BAA8B,2BAA2B;AACzD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,8CAA8C,qBAAqB;AACnE,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wGAAwG;AACxG;AACA;AACA;AACA;AACA,kEAAkE,eAAe;AACjF;AACA,0BAA0B,iEAAiE;AAC3F;AACA;AACA;AACA;AACA,GAAG;AACH;;;;;;;;ACrCA,iBAAiB,mBAAO,CAAC,GAAuB;AAChD,aAAa,mBAAO,CAAC,GAAmB;AACxC,iBAAiB,mBAAO,CAAC,GAAuB;AAChD,aAAa,mBAAO,CAAC,EAAmB;AACxC;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAgB,2BAA2B;AAC3C;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,oFAAoF,UAAU;AAC9F,iEAAiE,OAAO,GAAG,UAAU;AACrF;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,OAAO;AAC7E;AACA;;AAEA,qBAAqB,gDAAgD;AACrE;AACA,gDAAgD,kCAAkC;AAClF;AACA;AACA;AACA;AACA,4CAA4C,kCAAkC;AAC9E;;AAEA,qCAAqC,8CAA8C;AACnF;AACA,yCAAyC,gBAAgB;AACzD;AACA;AACA,uCAAuC,wCAAwC;AAC/E,sCAAsC,wCAAwC;AAC9E;;AAEA,wBAAwB,kCAAkC;AAC1D,2BAA2B,kCAAkC;AAC7D;;AAEA,oBAAoB,wCAAwC;AAC5D;AACA;AACA;AACA;AACA,oBAAoB,sBAAsB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,yBAAyB;AACxD;AACA,0DAA0D,SAAS;AACnE;AACA;AACA;;AAEA,sBAAsB,mBAAmB;AACzC;AACA;AACA;AACA;AACA,+DAA+D,OAAO,GAAG,UAAU;AACnF;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,OAAO,GAAG,QAAQ;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,0DAA0D,SAAS;AACnE;AACA,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA,kCAAkC,SAAS;AAC3C;AACA;AACA;AACA,0BAA0B;AAC1B,8CAA8C,qEAAqE;AACnH;AACA;AACA;AACA;;AAEA,qCAAqC,8BAA8B;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,sBAAsB,sDAAsD;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,QAAQ;AACR,0DAA0D,WAAW;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,QAAQ;AACR,4DAA4D,aAAa;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACrMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC3BA,uBAAuB,mBAAO,CAAC,GAA2B;AAC1D,2BAA2B,mBAAO,CAAC,GAA+B;;AAElE;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;AClBA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;;;;;;;ACbA;;;;;;;;ACAA;AACA;AACA;AACA;;;;;;;;ACHA;AACA;AACA;AACA;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACTA;AACA,WAAW,mBAAO,CAAC,GAAmB;AACtC,WAAW,mBAAO,CAAC,EAAmB;AACtC;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;;;;;;;ACfA,mBAAmB,mBAAO,CAAC,EAA4B;;AAEvD;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA,iBAAiB,mBAAO,CAAC,GAAe;AACxC,eAAe,mBAAO,CAAC,GAAa;AACpC,eAAe,mBAAO,CAAC,EAAoB;AAC3C,gBAAgB,mBAAO,CAAC,EAAqB;AAC7C,eAAe,mBAAO,CAAC,GAAoB;AAC3C,kBAAkB,mBAAO,CAAC,GAAuB;;AAEjD;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,GAAY;AACpC;AACA,eAAe,mBAAO,CAAC,GAAW;AAClC;AACA,iBAAiB,mBAAO,CAAC,GAAa;AACtC;AACA,sBAAsB,mBAAO,CAAC,EAAkB;;AAEhD;AACA,iBAAiB,mBAAO,CAAC,GAAc;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjCA;AACA;AACA;AACA;;;;;;;;ACHA;;;;;;;;ACAA;AACA;AACA,MAAM,qEAAqE;AAC3E,MAAM,uEAAuE;AAC7E;AACA;AACA;;;;;;;;ACNA;AACA;AACA,aAAa,2BAA2B;AACxC,kDAAkD,2BAA2B;AAC7E;AACA,qBAAqB,cAAc;AACnC;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;;;;;;;;ACdA,mBAAmB,mBAAO,CAAC,GAAyB;;AAEpD;AACA;AACA;;;;;;;;;ACJA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;UEtBA;UACA;UACA;UACA","sources":["webpack://egg-born-module-a-validation/./backend/src/ajv/ajv.js","webpack://egg-born-module-a-validation/./backend/src/ajv/keyword/atomName.js","webpack://egg-born-module-a-validation/./backend/src/ajv/keyword/date.js","webpack://egg-born-module-a-validation/./backend/src/ajv/keyword/notEmpty.js","webpack://egg-born-module-a-validation/./backend/src/ajv/keyword/slug.js","webpack://egg-born-module-a-validation/./backend/src/ajv/keywords.js","webpack://egg-born-module-a-validation/./backend/src/bean/bean.validation.js","webpack://egg-born-module-a-validation/./backend/src/bean/middleware.validate.js","webpack://egg-born-module-a-validation/./backend/src/beans.js","webpack://egg-born-module-a-validation/./backend/src/config/config.js","webpack://egg-born-module-a-validation/./backend/src/config/constants.js","webpack://egg-born-module-a-validation/./backend/src/config/errors.js","webpack://egg-born-module-a-validation/./backend/src/config/locale/en-us.js","webpack://egg-born-module-a-validation/./backend/src/config/locale/zh-cn.js","webpack://egg-born-module-a-validation/./backend/src/config/locales.js","webpack://egg-born-module-a-validation/./backend/src/controller/validation.js","webpack://egg-born-module-a-validation/./backend/src/controllers.js","webpack://egg-born-module-a-validation/./backend/src/main.js","webpack://egg-born-module-a-validation/./backend/src/meta.js","webpack://egg-born-module-a-validation/./backend/src/models.js","webpack://egg-born-module-a-validation/./backend/src/routes.js","webpack://egg-born-module-a-validation/./backend/src/service/validation.js","webpack://egg-born-module-a-validation/./backend/src/services.js","webpack://egg-born-module-a-validation/external commonjs2 \"require3\"","webpack://egg-born-module-a-validation/webpack/bootstrap","webpack://egg-born-module-a-validation/webpack/before-startup","webpack://egg-born-module-a-validation/webpack/startup","webpack://egg-born-module-a-validation/webpack/after-startup"],"sourcesContent":["const require3 = require('require3');\nconst Ajv = require3('ajv');\nconst AjvLocalize = require3('ajv-i18n');\nconst AjvKeywords = require3('ajv-keywords');\nconst jsBeautify = require3('js-beautify');\nconst systemKeywords = require('./keywords.js');\n\nmodule.exports = app => {\n  Ajv.create = function ({ options, keywords, schemas, schemaRoot }) {\n    // default\n    const _options = {\n      $data: true,\n      allErrors: true,\n      verbose: false,\n      jsonPointers: true,\n      format: 'full',\n      unknownFormats: true,\n      useDefaults: true,\n      coerceTypes: true,\n      transpile: false,\n      passContext: true,\n      removeAdditional: 'all',\n    };\n    // processCode\n    if (app.meta.isTest || app.meta.isLocal) {\n      _options.processCode = jsBeautify.js_beautify;\n    }\n    // override\n    Object.assign(_options, options);\n    // ajv\n    const ajv = new Ajv(_options);\n    AjvKeywords(ajv);\n    ajv.v = createValidate(schemaRoot);\n    // systemKeywords\n    for (const _keyword in systemKeywords) {\n      ajv.addKeyword(_keyword, systemKeywords[_keyword]);\n    }\n    // keywords\n    if (keywords) {\n      for (const _keyword in keywords) {\n        ajv.addKeyword(_keyword, keywords[_keyword]);\n      }\n    }\n    // schemas\n    if (schemas) {\n      for (const key in schemas) {\n        ajv.addSchema(schemas[key], key);\n      }\n    }\n    return ajv;\n  };\n  return Ajv;\n};\n\nfunction createValidate(schemaRoot) {\n  return async function ({ ctx, schema, data, filterOptions }) {\n    const validate = this.getSchema(schema || schemaRoot);\n    try {\n      const res = await validate.call(ctx, data);\n      if (filterOptions) {\n        _filterResult({ ajv: this, validate, data, filterOptions });\n      }\n      return res;\n    } catch (e) {\n      if (!Array.isArray(e.errors)) throw e;\n      const locale = ctx.locale.split('-')[0];\n      if (locale !== 'en' && AjvLocalize[locale]) AjvLocalize[locale](e.errors);\n      // need not output error\n      // ctx.logger.error(e);\n      // error\n      throw ctx.createError({\n        ...e,\n        code: 422,\n        message: e.errors,\n      });\n    }\n  };\n}\n\nfunction _filterResult({ ajv, validate, data, filterOptions }) {\n  if (filterOptions === true) {\n    filterOptions = { type: true, ebReadOnly: true };\n  }\n  _filterSchema({ ajv, schema: validate.schema, data, filterOptions });\n}\n\nfunction _filterSchema({ ajv, schema, data, filterOptions }) {\n  _filterProperties({ ajv, properties: schema.properties, data, filterOptions });\n}\n\nfunction _filterProperties({ ajv, properties, data, filterOptions }) {\n  if (!data) return;\n  for (const key in properties) {\n    const property = properties[key];\n    if (data[key] === undefined) continue;\n    // special for json\n    if (property.ebType === 'json' && property.type === 'string' && data[key] === '') {\n      data[key] = null;\n    }\n    if (filterOptions.type && !property.type) {\n      delete data[key];\n    } else if (filterOptions.ebReadOnly && property.ebReadOnly === true) {\n      delete data[key];\n    } else if (property.type === 'object' && property.properties) {\n      _filterProperties({ ajv, properties: property.properties, data: data[key], filterOptions });\n    } else if (property.type === 'object' && property.$ref) {\n      const validate = ajv.getSchema(property.$ref);\n      _filterSchema({ ajv, schema: validate.schema, data: data[key], filterOptions });\n    }\n  }\n}\n","module.exports = {\n  async: true,\n  type: 'string',\n  errors: true,\n  compile(schema, schemaProperty) {\n    return async function (data, path, rootData /* , name*/) {\n      // ignore if empty\n      if (!data) return true;\n      const atomName = data.trim();\n      const ctx = this;\n      // validateHost\n      if (!ctx.meta || !ctx.meta.validateHost) {\n        // not check\n        return true;\n      }\n      const atomId = ctx.meta.validateHost.key.atomId;\n      const atomClass = ctx.meta.validateHost.atomClass;\n      //   read by atomClass, atomLanguage, atomName\n      const atomLanguageClause = rootData.atomLanguage ? 'and a.atomLanguage=?' : '';\n      const items = await ctx.model.query(\n        `\n          select a.atomStage,a.id from aAtom a\n              where a.atomStage in (0,1) and a.iid=? and a.deleted=0 and a.atomClassId=? and a.atomName=? ${atomLanguageClause}\n          `,\n        [ctx.instance.id, atomClass.id, atomName, rootData.atomLanguage]\n      );\n      // check draft/formal\n      const checkExists = await ctx.bean.util.checkAtomIdExists({ atomId, items });\n      if (checkExists) {\n        const _title = ctx.text(schemaProperty.ebTitle || 'Atom Name');\n        const message = `${_title} ${ctx.text('ExistsValidation')}`;\n        const errors = [{ keyword: 'x-atomName', params: [], message }];\n        throw new ctx.app.meta.ajv.ValidationError(errors);\n      }\n      return true;\n    };\n  },\n};\n","const require3 = require('require3');\nconst moment = require3('moment');\n\nmodule.exports = {\n  errors: true,\n  compile(schema) {\n    const fun = function (data, path, rootData, name) {\n      if (!schema) return true;\n      if (Array.isArray(data)) {\n        const res = [];\n        for (const item of data) {\n          const _date = transformDate(fun, this, item);\n          if (_date === false) return false;\n          res.push(_date);\n        }\n        rootData[name] = res;\n        return true;\n      }\n      const _date = transformDate(fun, this, data);\n      if (_date === false) return false;\n      rootData[name] = _date;\n      return true;\n    };\n    return fun;\n  },\n};\n\nfunction transformDate(fun, ctx, data) {\n  if (!data) return null; // support null\n  const _date = moment(data);\n  if (!_date.isValid()) {\n    fun.errors = [{ keyword: 'x-date', params: [], message: ctx.text('Invalid Date') }];\n    return false;\n  }\n  return _date.toDate();\n}\n","module.exports = {\n  errors: true,\n  compile(schema, schemaProperty) {\n    const fun = function (data, path, rootData) {\n      // notEmpty=false\n      if (!schema) return true;\n      // ctx\n      const ctx = this;\n      // ignoreNotEmpty\n      const ignoreNotEmpty = ctx.bean.util.getProperty(ctx.meta, 'validateHost.options.ignoreNotEmpty');\n      if (ignoreNotEmpty) {\n        // not check\n        return true;\n      }\n      // expression\n      const expression = schema && schema.expression;\n      if (expression) {\n        const res = evaluateExpression({ expression, rootData, ctx });\n        if (!res) return true;\n      }\n      if (checkIfEmpty(schema, schemaProperty, data)) {\n        fun.errors = [{ keyword: 'notEmpty', params: [], message: this.text('RequiredField') }];\n        return false;\n      }\n      return true;\n    };\n    return fun;\n  },\n};\n\nfunction evaluateExpression({ expression, rootData, ctx }) {\n  try {\n    const globals = {\n      ...rootData,\n      _meta: {\n        host: ctx.meta && ctx.meta.validateHost,\n        user: ctx.state.user && ctx.state.user.op,\n      },\n    };\n    return ctx.bean.util.evaluateExpression({ expression, globals });\n  } catch (err) {\n    console.log(expression, rootData);\n    throw err;\n  }\n}\n\nfunction checkIfEmpty(schema, schemaProperty, value) {\n  const type = schemaProperty.type;\n  // ignoreZero\n  let ignoreZero = schema.ignoreZero;\n  if (ignoreZero === undefined) {\n    ignoreZero = type !== 'number' && type !== 'integer';\n  }\n  if (schema.ignoreZero && value === 0) return false;\n  return !value;\n}\n","module.exports = {\n  async: true,\n  type: 'string',\n  errors: true,\n  compile() {\n    return async function (data, path, rootData /* , name*/) {\n      // ignore if empty\n      if (!data) return true;\n      const slug = data.trim();\n      // unique slug for atomLanguage and atomClass\n      const ctx = this;\n      // validateHost\n      if (!ctx.meta || !ctx.meta.validateHost) {\n        // not check\n        return true;\n      }\n      const atomId = ctx.meta.validateHost.key.atomId;\n      const atomClass = ctx.meta.validateHost.atomClass;\n      //   read by atomClass, atomLanguage, slug\n      const atomLanguageClause = rootData.atomLanguage ? 'and a.atomLanguage=?' : '';\n      const items = await ctx.model.query(\n        `\n          select a.atomStage,a.id from aAtom a\n            left join aCmsArticle b on a.id=b.atomId\n              where a.atomStage in (0,1) and a.iid=? and a.deleted=0 and a.atomClassId=? and b.slug=? ${atomLanguageClause}\n          `,\n        [ctx.instance.id, atomClass.id, slug, rootData.atomLanguage]\n      );\n      // check draft/formal\n      const checkExists = await ctx.bean.util.checkAtomIdExists({ atomId, items });\n      if (checkExists) {\n        const errors = [{ keyword: 'x-slug', params: [], message: ctx.text('Slug Exists') }];\n        throw new ctx.app.meta.ajv.ValidationError(errors);\n      }\n      return true;\n    };\n  },\n};\n","const notEmpty = require('./keyword/notEmpty.js');\nconst date = require('./keyword/date.js');\nconst atomName = require('./keyword/atomName.js');\nconst slug = require('./keyword/slug.js');\nmodule.exports = {\n  notEmpty,\n  'x-date': date,\n  'x-atomName': atomName,\n  'x-slug': slug,\n};\n","module.exports = ctx => {\n  class Validation extends ctx.app.meta.BeanModuleBase {\n    constructor(moduleName) {\n      super(ctx, 'validation');\n      this.moduleName = moduleName || ctx.module.info.relativeName;\n    }\n\n    getSchema({ module, validator, schema }) {\n      // for flexible\n      if (schema && typeof schema === 'object') {\n        return { module, validator, schema };\n      }\n      module = module || this.moduleName;\n      const meta = ctx.app.meta.modules[module].main.meta;\n      if (!schema) {\n        const _validator = ctx.bean.util.getProperty(meta, `validation.validators.${validator}`);\n        if (!_validator) throw new Error(`validator not found: ${module}:${validator}`);\n        const schemas = this._adjustSchemas(_validator.schemas);\n        schema = schemas[0];\n      }\n      return {\n        module,\n        validator,\n        schema: ctx.bean.util.getProperty(meta, `validation.schemas.${schema}`),\n      };\n    }\n\n    async validate({ module, validator, schema, data, filterOptions }) {\n      // validator\n      const _validator = this._checkValidator({ module, validator, filterOptions });\n      // ignoreRules\n      const ignoreRules = filterOptions && filterOptions.ignoreRules;\n      // cache key\n      const cacheKey = ignoreRules ? 'ajv_ignoreRules' : 'ajv';\n      return await _validator[cacheKey].v({ ctx, schema, data, filterOptions });\n    }\n\n    async ajvFromSchemaAndValidate({ module, schema, options, data, filterOptions }) {\n      if (typeof schema === 'string') {\n        const _schema = this.getSchema({ module, schema });\n        schema = _schema.schema;\n      }\n      const ajv = this.ajvFromSchema({ module, schema, options, filterOptions });\n      return await this.ajvValidate({ ajv, schema: null, data, filterOptions });\n    }\n\n    async ajvValidate({ ajv, schema, data, filterOptions }) {\n      return await ajv.v({ ctx, schema, data, filterOptions });\n    }\n\n    ajvFromSchema({ module, schema, options, filterOptions }) {\n      // ignoreRules\n      const ignoreRules = filterOptions && filterOptions.ignoreRules;\n      // params\n      if (ignoreRules) {\n        options = { coerceTypes: false }; // not use _validator.options\n      }\n      const params = {\n        options,\n      };\n      // keywords\n      if (module) {\n        module = module || this.moduleName;\n        const meta = ctx.app.meta.modules[module].main.meta;\n        params.keywords = meta.validation.keywords;\n      }\n      // schemas\n      params.schemaRoot = ctx.bean.util.uuid.v4();\n      const schemas = {\n        [params.schemaRoot]: { ...schema, $async: true },\n      };\n      params.schemas = this._prepareSchemas_ignoreRules({ schemas });\n      // create\n      return ctx.app.meta.ajv.create(params);\n    }\n\n    _checkValidator({ module, validator }) {\n      // check ajv cache\n      module = module || this.moduleName;\n      const meta = ctx.app.meta.modules[module].main.meta;\n      const _validator = meta.validation.validators[validator];\n      if (!_validator) throw new Error(`validator not found: ${module}:${validator}`);\n      if (_validator.ajv) return _validator;\n      // create ajv\n      const _schemas = this._adjustSchemas(_validator.schemas);\n      const schemas = {};\n      for (const _schema of _schemas) {\n        schemas[_schema] = meta.validation.schemas[_schema];\n        if (!schemas[_schema]) throw new Error(`schema not found: ${module}:${_schema}`);\n        schemas[_schema].$async = true;\n      }\n      _validator.ajv = ctx.app.meta.ajv.create({\n        options: _validator.options,\n        keywords: meta.validation.keywords,\n        schemas,\n        schemaRoot: _schemas[0],\n      });\n      // create ajv_ignoreRules\n      const schemas2 = this._prepareSchemas_ignoreRules({ schemas });\n      _validator.ajv_ignoreRules = ctx.app.meta.ajv.create({\n        options: { coerceTypes: false }, // not use _validator.options\n        keywords: meta.validation.keywords,\n        schemas: schemas2,\n        schemaRoot: _schemas[0],\n      });\n      // ok\n      return _validator;\n    }\n\n    _prepareSchemas_ignoreRules({ schemas }) {\n      const schemas2 = {};\n      for (const schemaName in schemas) {\n        const schema = schemas[schemaName];\n        const schema2 = { type: 'object', properties: {} };\n        this._prepareProperties_ignoreRules({ propertiesFrom: schema.properties, propertiesTo: schema2.properties });\n        schemas2[schemaName] = schema2;\n      }\n      return schemas2;\n    }\n\n    _prepareProperties_ignoreRules({ propertiesFrom, propertiesTo }) {\n      const __basicRuleNames = ['type', 'ebType', 'ebReadOnly', '$async'];\n      for (const key in propertiesFrom) {\n        const propertyFrom = propertiesFrom[key];\n        const propertyTo = {};\n        propertiesTo[key] = propertyTo;\n        for (const ruleName in propertyFrom) {\n          if (__basicRuleNames.includes(ruleName)) {\n            propertyTo[ruleName] = propertyFrom[ruleName];\n          }\n          if (ruleName === 'properties') {\n            propertyTo.properties = {};\n            this._prepareProperties_ignoreRules({\n              propertiesFrom: propertyFrom.properties,\n              propertiesTo: propertyTo.properties,\n            });\n          }\n        }\n      }\n    }\n\n    _adjustSchemas(schemas) {\n      if (typeof schemas === 'string') return schemas.split(',');\n      return schemas;\n    }\n\n    async _validate({ atomClass, detailClass, data, options, filterOptions }) {\n      // validator\n      const optionsSchema = options && options.schema;\n      if (optionsSchema) {\n        if (optionsSchema.validator) {\n          // use validator directly\n          await this.validate({\n            module: optionsSchema.module,\n            validator: optionsSchema.validator,\n            schema: optionsSchema.schema,\n            data,\n            filterOptions,\n          });\n        } else {\n          // create validator dynamicly\n          await this.ajvFromSchemaAndValidate({\n            module: optionsSchema.module,\n            schema: optionsSchema.schema,\n            data,\n            filterOptions,\n          });\n        }\n      } else if (atomClass) {\n        const validator = await ctx.bean.atom.validator({ atomClass });\n        if (validator) {\n          // if error throw 422\n          await this.validate({\n            module: validator.module,\n            validator: validator.validator,\n            schema: validator.schema,\n            data,\n            filterOptions,\n          });\n        }\n      } else if (detailClass) {\n        const validator = await ctx.bean.detail.validator({ detailClass });\n        if (validator) {\n          // if error throw 422\n          await this.validate({\n            module: validator.module,\n            validator: validator.validator,\n            schema: validator.schema,\n            data,\n            filterOptions,\n          });\n        }\n      }\n    }\n  }\n\n  return Validation;\n};\n","// request.body\n//   validate: module(optional), validator, schema(optional)\n//   data:\nmodule.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Middleware {\n    async execute(options, next) {\n      // must exists\n      const validator = options.validator;\n      if (!validator) ctx.throw.module(moduleInfo.relativeName, 1001);\n      // params\n      const module = options.module || ctx.module.info.relativeName;\n      const schema = options.schema || (ctx.meta._validator && ctx.meta._validator.schema);\n      const data = ctx.request.body[options.data || 'data'];\n      // if error throw 422\n      await ctx.bean.validation.validate({\n        module,\n        validator,\n        schema,\n        data,\n        filterOptions: true,\n      });\n      // next\n      await next();\n    }\n  }\n  return Middleware;\n};\n","const beanValidation = require('./bean/bean.validation.js');\nconst middlewareValidate = require('./bean/middleware.validate.js');\n\nmodule.exports = app => {\n  const beans = {\n    // middleware\n    'middleware.validate': {\n      mode: 'ctx',\n      bean: middlewareValidate,\n    },\n    // global\n    validation: {\n      mode: 'ctx',\n      bean: beanValidation,\n      global: true,\n    },\n  };\n  return beans;\n};\n","// eslint-disable-next-line\nmodule.exports = appInfo => {\n  const config = {};\n\n  // middlewares\n  config.middlewares = {\n    validate: {\n      bean: 'validate',\n      global: false,\n    },\n  };\n\n  return config;\n};\n","module.exports = {};\n","// error code should start from 1001\nmodule.exports = {\n  1001: 'Validator Not Specified',\n};\n","module.exports = {\n  RequiredField: 'Required',\n  ExistsValidation: 'Exists',\n};\n","module.exports = {\n  test: '测试',\n  Required: '必需的',\n  RequiredField: '不允许为空',\n  ExistsValidation: '已存在',\n  'Invalid Date': '无效的日期',\n  'Not Expected Value': '不是期望的值',\n  'Validator Not Specified': '没有指定validator',\n  'Slug Exists': 'Slug已存在',\n};\n","module.exports = {\n  'en-us': require('./locale/en-us.js'),\n  'zh-cn': require('./locale/zh-cn.js'),\n};\n","module.exports = app => {\n  class ValidationController extends app.Controller {\n    schema() {\n      const res = this.service.validation.schema(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n    async validate() {\n      const res = await this.service.validation.validate({\n        params: this.ctx.request.body.params,\n        data: this.ctx.request.body.data,\n      });\n      this.ctx.success(res);\n    }\n  }\n  return ValidationController;\n};\n","const validation = require('./controller/validation.js');\n\nmodule.exports = app => {\n  const controllers = {\n    validation,\n  };\n  return controllers;\n};\n","const services = require('./services.js');\nconst models = require('./models.js');\nconst config = require('./config/config.js');\nconst locales = require('./config/locales.js');\nconst errors = require('./config/errors.js');\nconst constants = require('./config/constants.js');\n\n// eslint-disable-next-line\nmodule.exports = app => {\n  // beans\n  const beans = require('./beans.js')(app);\n  // meta\n  const meta = require('./meta.js')(app);\n  // routes\n  const routes = require('./routes.js')(app);\n  // controllers\n  const controllers = require('./controllers.js')(app);\n\n  // ajv\n  app.meta.ajv = require('./ajv/ajv.js')(app);\n\n  return {\n    beans,\n    routes,\n    controllers,\n    services,\n    models,\n    config,\n    locales,\n    errors,\n    constants,\n    meta,\n  };\n};\n","module.exports = app => {\n  const meta = {};\n  return meta;\n};\n","module.exports = {};\n","module.exports = app => {\n  const routes = [\n    { method: 'post', path: 'validation/schema', controller: 'validation' },\n    { method: 'post', path: 'validation/validate', controller: 'validation' },\n  ];\n  return routes;\n};\n","module.exports = app => {\n  class Validation extends app.Service {\n    schema({ module, validator, schema }) {\n      return this.ctx.bean.validation.getSchema({ module, validator, schema });\n    }\n    async validate({ params, data }) {\n      await this.ctx.bean.validation.validate({\n        ...params,\n        data,\n      });\n    }\n  }\n\n  return Validation;\n};\n","const validation = require('./service/validation.js');\n\nmodule.exports = {\n  validation,\n};\n","module.exports = require(\"require3\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(421);\n",""],"names":[],"sourceRoot":""}