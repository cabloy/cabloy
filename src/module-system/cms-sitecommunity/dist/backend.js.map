{"version":3,"file":"backend.js","mappings":";;;;;;AAAA;AACA;AACA,mBAAmB,gCAAgC;AACnD;AACA,uCAAuC,gCAAgC;AACvE,eAAe;AACf;;AAEA,iBAAiB,+BAA+B;AAChD;AACA,sCAAsC,+BAA+B;AACrE;AACA;AACA;AACA;;AAEA,mBAAmB,iCAAiC;AACpD;AACA,2BAA2B,iCAAiC;AAC5D;;AAEA,kBAAkB,6CAA6C;AAC/D;AACA,0BAA0B,6CAA6C;AACvE;;AAEA,mBAAmB,+BAA+B;AAClD;AACA,2BAA2B,+BAA+B;AAC1D;AACA;;AAEA;AACA;;;;;;;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sEAAsE,sBAAsB;AAC5F,uEAAuE,uBAAuB;AAC9F,uEAAuE,uBAAuB;AAC9F;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,gDAAgD,6CAA6C;AAC7F;AACA;AACA,kDAAkD,6CAA6C;AAC/F;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,oDAAoD;AAChE,YAAY,+EAA+E;AAC3F,YAAY,kEAAkE;AAC9E,YAAY,mEAAmE;AAC/E,YAAY,kEAAkE;AAC9E,YAAY,wDAAwD;AACpE,YAAY,wDAAwD;AACpE,YAAY,+DAA+D;AAC3E,YAAY,iDAAiD;AAC7D;AACA,qDAAqD,mCAAmC;AACxF;;AAEA;AACA;AACA;AACA,YAAY,wDAAwD;AACpE,YAAY,yDAAyD;AACrE;AACA,qDAAqD,mCAAmC;AACxF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,mFAAmF;AAC7F,UAAU,oFAAoF;AAC9F,UAAU,0FAA0F;AACpG;AACA,UAAU,gFAAgF;AAC1F,UAAU,gFAAgF;AAC1F,UAAU,gFAAgF;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;AC3FA,uBAAuB,mBAAO,CAAC,GAA2B;AAC1D,iBAAiB,mBAAO,CAAC,GAAqB;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;ACjBA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP,KAAK;AACL,eAAe;AACf;AACA;AACA,KAAK;AACL;;AAEA;AACA;;;;;;;;ACtDA;AACA;;;;;;;;ACDA;AACA;AACA;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA;AACA,WAAW,mBAAO,CAAC,GAAmB;AACtC,WAAW,mBAAO,CAAC,EAAmB;AACtC;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACzCA,qBAAqB,mBAAO,CAAC,GAAuB;;AAEpD;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,aAAa;AACb,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACxEA,oBAAoB,mBAAO,CAAC,GAA0B;;AAEtD;AACA;AACA;AACA;;;;;;;;ACLA;AACA;AACA;AACA;AACA,iBAAiB,8DAA8D;AAC/E,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjBA,2BAA2B,mBAAO,CAAC,EAAgC;;AAEnE;AACA;AACA;AACA;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;;;;;;;;ACvEA;AACA;AACA;AACA;;;;;;;;ACHA,eAAe,mBAAO,CAAC,EAAoB;AAC3C,gBAAgB,mBAAO,CAAC,EAAqB;AAC7C,eAAe,mBAAO,CAAC,GAAoB;;AAE3C;AACA;AACA,gBAAgB,mBAAO,CAAC,GAAY;AACpC;AACA,iBAAiB,mBAAO,CAAC,GAAa;AACtC;AACA,sBAAsB,mBAAO,CAAC,EAAkB;AAChD;AACA,mBAAmB,mBAAO,CAAC,GAAe;AAC1C;AACA,iBAAiB,mBAAO,CAAC,GAAa;AACtC;AACA,eAAe,mBAAO,CAAC,GAAW;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC7BA;AACA;AACA,kBAAkB,mBAAO,CAAC,GAAgC;AAC1D,qBAAqB,mBAAO,CAAC,GAAyB;AACtD,yBAAyB,mBAAO,CAAC,GAA6B;AAC9D,wBAAwB,mBAAO,CAAC,GAA4B;AAC5D,0BAA0B,mBAAO,CAAC,GAA8B;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB,eAAe;AACf,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,iBAAiB;AACvC;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,OAAO;AACP,kBAAkB;AAClB;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;;;;;;;;ACvFA;AACA;AACA;AACA;;;;;;;;ACHA;AACA;AACA;AACA;;;;;;;;ACHA;AACA;AACA;AACA;;;;;;;UCHA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;UEtBA;UACA;UACA;UACA","sources":["webpack://egg-born-module-cms-sitecommunity/./backend/src/bean/atom.post.js","webpack://egg-born-module-cms-sitecommunity/./backend/src/bean/version.manager.js","webpack://egg-born-module-cms-sitecommunity/./backend/src/beans.js","webpack://egg-born-module-cms-sitecommunity/./backend/src/config/config.js","webpack://egg-born-module-cms-sitecommunity/./backend/src/config/errors.js","webpack://egg-born-module-cms-sitecommunity/./backend/src/config/locale/en-us.js","webpack://egg-born-module-cms-sitecommunity/./backend/src/config/locale/zh-cn.js","webpack://egg-born-module-cms-sitecommunity/./backend/src/config/locales.js","webpack://egg-born-module-cms-sitecommunity/./backend/src/config/static/app/appCommunity.js","webpack://egg-born-module-cms-sitecommunity/./backend/src/config/static/apps.js","webpack://egg-born-module-cms-sitecommunity/./backend/src/config/static/flowDef/postPublish.js","webpack://egg-born-module-cms-sitecommunity/./backend/src/config/static/flowDefs.js","webpack://egg-born-module-cms-sitecommunity/./backend/src/config/static/layout/layoutAtomListPost.js","webpack://egg-born-module-cms-sitecommunity/./backend/src/config/static/layouts.js","webpack://egg-born-module-cms-sitecommunity/./backend/src/config/static/resources.js","webpack://egg-born-module-cms-sitecommunity/./backend/src/config/validation/schemas.js","webpack://egg-born-module-cms-sitecommunity/./backend/src/controllers.js","webpack://egg-born-module-cms-sitecommunity/./backend/src/main.js","webpack://egg-born-module-cms-sitecommunity/./backend/src/meta.js","webpack://egg-born-module-cms-sitecommunity/./backend/src/models.js","webpack://egg-born-module-cms-sitecommunity/./backend/src/routes.js","webpack://egg-born-module-cms-sitecommunity/./backend/src/services.js","webpack://egg-born-module-cms-sitecommunity/webpack/bootstrap","webpack://egg-born-module-cms-sitecommunity/webpack/before-startup","webpack://egg-born-module-cms-sitecommunity/webpack/startup","webpack://egg-born-module-cms-sitecommunity/webpack/after-startup"],"sourcesContent":["module.exports = app => {\n  class Atom extends app.meta.AtomCmsBase {\n    async create({ atomClass, item, options, user }) {\n      // super\n      const key = await super.create({ atomClass, item, options, user });\n      return { atomId: key.atomId };\n    }\n\n    async read({ atomClass, options, key, user }) {\n      // super\n      const item = await super.read({ atomClass, options, key, user });\n      if (!item) return null;\n      // ok\n      return item;\n    }\n\n    async select({ atomClass, options, items, user }) {\n      // super\n      await super.select({ atomClass, options, items, user });\n    }\n\n    async write({ atomClass, target, key, item, options, user }) {\n      // super\n      await super.write({ atomClass, target, key, item, options, user });\n    }\n\n    async delete({ atomClass, key, options, user }) {\n      // super\n      await super.delete({ atomClass, key, options, user });\n    }\n  }\n\n  return Atom;\n};\n","module.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Version extends app.meta.BeanBase {\n    async update(options) {\n      if (options.version === 1) {\n        // empty\n      }\n    }\n\n    async init(options) {\n      if (options.version === 1) {\n        // create roles: cms-community-writer to template\n        const roles = ['cms-community-writer'];\n        const roleTemplate = await this.ctx.bean.role.getSystemRole({ roleName: 'template' });\n        const roleSuperuser = await this.ctx.bean.role.getSystemRole({ roleName: 'superuser' });\n        const roleActivated = await this.ctx.bean.role.getSystemRole({ roleName: 'activated' });\n        for (const roleName of roles) {\n          const roleId = await this.ctx.bean.role.add({\n            roleName,\n            roleIdParent: roleTemplate.id,\n          });\n          // role:superuser include cms-community\n          await this.ctx.bean.role.addRoleInc({ roleId: roleSuperuser.id, roleIdInc: roleId });\n          // role:activated include cms-community-writer\n          if (roleName === 'cms-community-writer') {\n            await this.ctx.bean.role.addRoleInc({ roleId: roleActivated.id, roleIdInc: roleId });\n          }\n        }\n        // build roles\n        await this.ctx.bean.role.setDirty(true);\n\n        // add role rights\n        const roleRights = [\n          { roleName: 'cms-community-writer', action: 'create' },\n          { roleName: 'cms-community-writer', action: 'read', scopeNames: 'authenticated' },\n          { roleName: 'cms-community-writer', action: 'write', scopeNames: 0 },\n          { roleName: 'cms-community-writer', action: 'delete', scopeNames: 0 },\n          { roleName: 'cms-community-writer', action: 'clone', scopeNames: 0 },\n          { roleName: 'cms-community-writer', action: 'deleteBulk' },\n          { roleName: 'cms-community-writer', action: 'exportBulk' },\n          { roleName: 'root', action: 'read', scopeNames: 'authenticated' },\n          { roleName: 'root', action: 'read', scopeNames: 0 },\n        ];\n        await this.ctx.bean.role.addRoleRightBatch({ atomClassName: 'post', roleRights });\n      }\n\n      if (options.version === 2) {\n        // add role rights\n        const roleRights = [\n          { roleName: 'root', action: 'layout', scopeNames: 'root' }, //\n          { roleName: 'root', action: 'preview', scopeNames: 'root' }, //\n        ];\n        await this.ctx.bean.role.addRoleRightBatch({ atomClassName: 'post', roleRights });\n      }\n    }\n\n    async test() {\n      const atomClass = {\n        module: moduleInfo.relativeName,\n        atomClassName: 'post',\n      };\n      const categories = [\n        // en-us\n        { categoryName: 'Share', language: 'en-us', categoryIdParent: 0, categorySorting: 1 },\n        { categoryName: 'Answer', language: 'en-us', categoryIdParent: 0, categorySorting: 2 },\n        { categoryName: 'Announcement', language: 'en-us', categoryIdParent: 0, categorySorting: 3 },\n        // zh-cn\n        { categoryName: '分享', language: 'zh-cn', categoryIdParent: 0, categorySorting: 1 },\n        { categoryName: '问答', language: 'zh-cn', categoryIdParent: 0, categorySorting: 2 },\n        { categoryName: '公告', language: 'zh-cn', categoryIdParent: 0, categorySorting: 3 },\n      ];\n      const categoryIds = {};\n      for (const item of categories) {\n        // add\n        const categoryId = await this.ctx.bean.category.add({\n          atomClass,\n          data: {\n            language: item.language,\n            categoryName: item.categoryName,\n            categoryHidden: item.categoryHidden,\n            categorySorting: item.categorySorting,\n            categoryFlag: item.categoryFlag,\n            categoryIdParent: item.categoryIdParent ? categoryIds[item.categoryIdParent] : 0,\n          },\n        });\n        categoryIds[item.categoryName] = categoryId;\n      }\n    }\n  }\n\n  return Version;\n};\n","const versionManager = require('./bean/version.manager.js');\nconst atomPost = require('./bean/atom.post.js');\n\nmodule.exports = app => {\n  const beans = {\n    // version\n    'version.manager': {\n      mode: 'app',\n      bean: versionManager,\n    },\n    // atom\n    'atom.post': {\n      mode: 'app',\n      bean: atomPost,\n    },\n  };\n  return beans;\n};\n","// eslint-disable-next-line\nmodule.exports = appInfo => {\n  const config = {};\n\n  // site\n  config.cms = {};\n  config.cms.site = {\n    base: {\n      title: 'Community',\n      subTitle: 'Everything About CabloyJS',\n      description: '',\n      keywords: '',\n    },\n    host: {\n      url: 'http://localhost',\n      rootPath: 'cms-test-community',\n    },\n    language: {\n      default: 'en-us',\n      items: 'en-us,zh-cn',\n    },\n    themes: {\n      'en-us': 'cms-themecommunity',\n      'zh-cn': 'cms-themecommunity',\n    },\n    edit: {\n      mode: 1, // markdown\n    },\n    env: {\n      format: {\n        date: 'YYYY-MM-DD',\n        time: 'HH:mm:ss',\n      },\n      article2: {\n        recentNum: 5,\n      },\n      comment: {\n        order: 'asc',\n        recentNum: 5,\n      },\n      brother: {\n        order: 'desc',\n      },\n      loadMore: {\n        loadOnScroll: false,\n      },\n    },\n    profile: {},\n    beian: {\n      icp: '',\n    },\n  };\n\n  return config;\n};\n","// error code should start from 1001\nmodule.exports = {};\n","module.exports = {\n  CMSPostTitle: 'Post',\n};\n","module.exports = {\n  'CMS:Community': 'CMS:社区',\n  CMSPostTitle: '帖子',\n  'Create Post': '新建帖子',\n  'Post List': '帖子列表',\n  'Post List(by Category)': '帖子列表(按目录)',\n  'Community Post Publish': '社区帖子发布',\n};\n","module.exports = {\n  'en-us': require('./locale/en-us.js'),\n  'zh-cn': require('./locale/zh-cn.js'),\n};\n","module.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  const info = {\n    home: {\n      mode: 'page',\n      page: '/a/basefront/atom/list?module=cms-sitecommunity&atomClassName=post',\n    },\n  };\n  const content = {\n    info: {\n      atomClass: {\n        module: moduleInfo.relativeName,\n        atomClassName: 'post',\n      },\n    },\n    presets: {\n      anonymous: {\n        mobile: info,\n        pc: info,\n      },\n      authenticated: {\n        mobile: info,\n        pc: info,\n      },\n    },\n  };\n  const _app = {\n    atomName: 'Community',\n    atomStaticKey: 'appCommunity',\n    atomRevision: 5,\n    atomCategoryId: 'AppCategoryCMS',\n    description: '',\n    appIcon: ':outline:article-outline',\n    appIsolate: false,\n    appLanguage: true,\n    appCms: true,\n    content: JSON.stringify(content),\n    resourceRoles: 'root',\n    appSorting: 0,\n  };\n  return _app;\n};\n","const appCommunity = require('./app/appCommunity.js');\n\nmodule.exports = app => {\n  const apps = [\n    //\n    appCommunity(app),\n  ];\n  return apps;\n};\n","module.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  const content = {\n    listener: null,\n    process: {\n      nodes: [\n        {\n          id: 'startEvent_1',\n          name: 'Drafting',\n          type: 'startEventAtom',\n          options: {\n            atom: {\n              module: moduleInfo.relativeName,\n              atomClassName: 'post',\n            },\n            atomStage: 0, // draft\n            conditionExpression: null,\n            task: {\n              atomState: 0, // state: drafting\n            },\n          },\n        },\n        {\n          id: 'activity_1',\n          name: 'Review',\n          type: 'activityUserTask',\n          options: {\n            atomState: 1,\n            assignees: {\n              roles: 'superuser',\n            },\n            confirmation: false,\n            bidding: true,\n            schema: {\n              write: {\n                module: 'a-cms',\n                schema: 'article',\n              },\n            },\n          },\n        },\n        {\n          id: 'endEvent_1',\n          name: 'End',\n          type: 'endEventAtom',\n          options: {\n            atomState: 2,\n          },\n        },\n      ],\n      edges: [\n        {\n          id: 'edge_1',\n          source: 'startEvent_1',\n          target: 'activity_1',\n        },\n        {\n          id: 'edge_2',\n          source: 'activity_1',\n          target: 'endEvent_1',\n        },\n      ],\n    },\n  };\n  const definition = {\n    atomName: 'Community Post Publish',\n    atomStaticKey: 'flowPostPublish',\n    atomRevision: 102,\n    description: '',\n    content: JSON.stringify(content),\n  };\n  return definition;\n};\n","const postPublish = require('./flowDef/postPublish.js');\n\nmodule.exports = app => {\n  const flowDefs = [postPublish(app)];\n  return flowDefs;\n};\n","module.exports = app => {\n  // const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  const content = {\n    info: {\n      orders: [{ name: 'sticky', title: 'Sticky', by: 'desc', tableAlias: 'p' }],\n    },\n  };\n  const layout = {\n    atomName: 'CMSPostTitle',\n    atomStaticKey: 'layoutAtomListPost',\n    atomRevision: 0,\n    description: '',\n    layoutTypeCode: 3,\n    content: JSON.stringify(content),\n    resourceRoles: 'root',\n  };\n  return layout;\n};\n","const layoutAtomListPost = require('./layout/layoutAtomListPost.js');\n\nmodule.exports = app => {\n  const layouts = [layoutAtomListPost(app)];\n  return layouts;\n};\n","module.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  const resources = [\n    // menu\n    {\n      atomName: 'Create Post',\n      atomStaticKey: 'createPost',\n      atomRevision: -1,\n      atomCategoryId: 'a-base:menu.General',\n      resourceType: 'a-base:menu',\n      resourceConfig: JSON.stringify({\n        module: moduleInfo.relativeName,\n        atomClassName: 'post',\n        atomAction: 'create',\n      }),\n      resourceIcon: '::add',\n      appKey: 'cms-sitecommunity:appCommunity',\n      resourceRoles: 'template.cms-community-writer',\n    },\n    {\n      atomName: 'Post List',\n      atomStaticKey: 'listPost',\n      atomRevision: -1,\n      atomCategoryId: 'a-base:menu.General',\n      resourceType: 'a-base:menu',\n      resourceConfig: JSON.stringify({\n        module: moduleInfo.relativeName,\n        atomClassName: 'post',\n        atomAction: 'read',\n      }),\n      resourceIcon: ':outline:data-list-outline',\n      appKey: 'cms-sitecommunity:appCommunity',\n      resourceRoles: 'root',\n    },\n  ];\n  return resources;\n};\n","module.exports = app => {\n  // const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  const schemas = {};\n  // post\n  schemas.post = {\n    type: 'object',\n    properties: {\n      atomId: {\n        type: 'number',\n      },\n      // title\n      __groupTitle: {\n        ebType: 'group-flatten',\n        ebTitle: 'Title',\n      },\n      atomName: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Atom Name',\n        notEmpty: true,\n      },\n      // content\n      __groupContent: {\n        ebType: 'group-flatten',\n        ebTitle: 'Content',\n      },\n      content: {\n        type: 'string',\n        ebType: 'markdown-content-cms',\n        ebTitle: 'Content',\n      },\n      // Basic Info\n      __groupBasicInfo: {\n        ebType: 'group-flatten',\n        ebTitle: 'Basic Info',\n        ebGroupWhole: true,\n      },\n      atomLanguage: {\n        type: 'string',\n        ebType: 'language',\n        ebTitle: 'Language',\n        notEmpty: true,\n      },\n      atomCategoryId: {\n        type: 'number',\n        ebType: 'category',\n        ebTitle: 'Category',\n        notEmpty: true,\n      },\n      atomTags: {\n        type: ['string', 'null'],\n        ebType: 'tags',\n        ebTitle: 'Tags',\n      },\n    },\n  };\n  // post search\n  schemas.postSearch = {\n    type: 'object',\n    properties: {\n      html: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Content',\n        ebSearch: {\n          tableAlias: 'q',\n        },\n      },\n    },\n  };\n  return schemas;\n};\n","module.exports = app => {\n  const controllers = {};\n  return controllers;\n};\n","const config = require('./config/config.js');\nconst locales = require('./config/locales.js');\nconst errors = require('./config/errors.js');\n\nmodule.exports = app => {\n  // beans\n  const beans = require('./beans.js')(app);\n  // routes\n  const routes = require('./routes.js')(app);\n  // controllers\n  const controllers = require('./controllers.js')(app);\n  // services\n  const services = require('./services.js')(app);\n  // models\n  const models = require('./models.js')(app);\n  // meta\n  const meta = require('./meta.js')(app);\n\n  return {\n    beans,\n    routes,\n    controllers,\n    services,\n    models,\n    config,\n    locales,\n    errors,\n    meta,\n  };\n};\n","module.exports = app => {\n  // const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  const schemas = require('./config/validation/schemas.js')(app);\n  const staticApps = require('./config/static/apps.js')(app);\n  const staticFlowDefs = require('./config/static/flowDefs.js')(app);\n  const staticLayouts = require('./config/static/layouts.js')(app);\n  const staticResources = require('./config/static/resources.js')(app);\n  const meta = {\n    base: {\n      atoms: {\n        post: {\n          info: {\n            bean: 'post',\n            title: 'CMSPostTitle',\n            tableName: '',\n            tableNameModes: {\n              default: '',\n              full: '',\n              search: '',\n            },\n            language: true,\n            category: true,\n            tag: true,\n            cms: true,\n            layout: {\n              config: {\n                atomList: 'layoutAtomListPost',\n              },\n            },\n            dict: {\n              states: {\n                draft: {\n                  dictKey: 'a-dictbooster:dictAtomStateDraft',\n                },\n              },\n            },\n          },\n          actions: {\n            preview: {\n              code: 101,\n              title: 'Preview',\n              actionModule: 'a-cms',\n              actionComponent: 'action',\n              icon: { f7: '::preview' },\n              enableOnStatic: true,\n              enableOnOpened: true,\n              stage: 'draft,formal',\n            },\n          },\n          validator: 'post',\n          search: {\n            validator: 'postSearch',\n          },\n        },\n      },\n      statics: {\n        'a-app.app': {\n          items: staticApps,\n        },\n        'a-flow.flowDef': {\n          items: staticFlowDefs,\n        },\n        'a-baselayout.layout': {\n          items: staticLayouts,\n        },\n        'a-base.resource': {\n          items: staticResources,\n        },\n      },\n    },\n    validation: {\n      validators: {\n        post: {\n          schemas: 'post',\n        },\n        postSearch: {\n          schemas: 'postSearch',\n        },\n      },\n      keywords: {},\n      schemas: {\n        post: schemas.post,\n        postSearch: schemas.postSearch,\n      },\n    },\n  };\n  return meta;\n};\n","module.exports = app => {\n  const models = {};\n  return models;\n};\n","module.exports = app => {\n  const routes = [];\n  return routes;\n};\n","module.exports = app => {\n  const services = {};\n  return services;\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(421);\n",""],"names":[],"sourceRoot":""}