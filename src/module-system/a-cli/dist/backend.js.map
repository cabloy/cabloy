{"version":3,"file":"backend.js","mappings":";;;;;;AAAA;AACA;AACA;AACA;;;;;;;;ACHA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,eAAe;AAChC;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA,kEAAkE,mBAAmB;AACrF;AACA,sEAAsE,kBAAkB;AACxF,yEAAyE,qBAAqB;AAC9F;AACA,wCAAwC,MAAM;AAC9C,QAAQ;AACR;AACA;AACA;AACA;;AAEA,oBAAoB,2BAA2B;AAC/C;AACA;AACA,2CAA2C,2BAA2B;AACtE;AACA;AACA;AACA,uCAAuC,YAAY;AACnD;AACA;AACA,2CAA2C,2BAA2B;AACtE,OAAO;AACP;AACA,eAAe;AACf;;AAEA,kCAAkC,2BAA2B;AAC7D;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA,kEAAkE,mBAAmB;AACrF;AACA,sEAAsE,8BAA8B;AACpG,yEAAyE,qBAAqB;AAC9F;AACA,oCAAoC,MAAM;AAC1C;AACA,uCAAuC,0CAA0C;AACjF,QAAQ;AACR;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,wCAAwC,qBAAqB;AAC7D;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA,yCAAyC,mBAAmB;AAC5D;AACA,6CAA6C,aAAa;AAC1D;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA,sBAAsB,aAAa;AACnC;AACA;AACA;AACA;AACA,8DAA8D,YAAY;AAC1E;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D;AAC9D;AACA;AACA,iEAAiE;AACjE;AACA;AACA,+BAA+B,WAAW,GAAG,UAAU,GAAG,IAAI;AAC9D;AACA,oDAAoD;AACpD;AACA;AACA;AACA;AACA,gCAAgC,WAAW,OAAO,SAAS;AAC3D,cAAc;AACd,gCAAgC,8BAA8B,OAAO,cAAc;AACnF;AACA;AACA;AACA;AACA,qGAAqG,QAAQ;AAC7G;AACA,iCAAiC,WAAW,GAAG,cAAc;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC7IA,iBAAiB,mBAAO,CAAC,GAAU;AACnC;;AAEA;AACA;AACA;AACA;AACA;AACA,0CAA0C,wBAAwB;AAClE,yCAAyC,wBAAwB;AACjE,2CAA2C,wBAAwB;AACnE;AACA;;AAEA;AACA;AACA;;AAEA,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;;AAEA,uBAAuB,OAAO;AAC9B;AACA;;AAEA;AACA,cAAc,OAAO;AACrB;AACA,qCAAqC,+BAA+B;AACpE;;AAEA;AACA,cAAc,UAAU;AACxB,cAAc,OAAO;AACrB;AACA,2CAA2C,0BAA0B;AACrE,iDAAiD,gCAAgC;AACjF,+CAA+C,8BAA8B;AAC7E;AACA;;AAEA,0BAA0B,QAAQ;AAClC;AACA;AACA;AACA;AACA,4DAA4D,OAAO;AACnE;AACA;AACA;AACA;;AAEA,yBAAyB,OAAO;AAChC;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,2BAA2B,SAAS;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB,YAAY;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,kBAAkB,gBAAgB,kBAAkB;AAChF;AACA;AACA,4DAA4D,MAAM;AAClE;AACA;AACA;;AAEA,iCAAiC,MAAM;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,uCAAuC;AAC/E;AACA,wBAAwB,oBAAoB,IAAI,IAAI;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACtHA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,gCAAgC;AAChC;AACA;AACA;AACA,iBAAiB;AACjB;AACA,YAAY,oCAAoC;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC7CA,QAAQ,QAAQ,EAAE,mBAAO,CAAC,EAAe;AACzC,aAAa,mBAAO,CAAC,EAAM;AAC3B,iBAAiB,mBAAO,CAAC,GAAU;AACnC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,eAAe;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,WAAW;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,UAAU;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,SAAS;AAC/D;AACA;AACA;AACA;AACA,qDAAqD,eAAe;AACpE;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,oBAAoB;AACzC;AACA,mCAAmC,oBAAoB;AACvD;AACA,qBAAqB,oBAAoB;AACzC;AACA,iBAAiB,IAAI;AACrB;AACA,gCAAgC,oBAAoB;AACpD;AACA,qBAAqB,oBAAoB;AACzC;AACA,iBAAiB,IAAI;AACrB;AACA,gCAAgC,oBAAoB;AACpD;AACA,kBAAkB,8BAA8B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,uBAAuB,IAAI,WAAW;AACzE,SAAS;AACT;AACA;AACA,mCAAmC,uBAAuB,IAAI,WAAW;AACzE,SAAS;AACT;AACA;AACA,2CAA2C,KAAK,EAAE,gBAAgB,mBAAmB,KAAK;AAC1F;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA,sBAAsB,cAAc;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;;;;;;;;AC7MA,WAAW,mBAAO,CAAC,GAAI;AACvB,aAAa,mBAAO,CAAC,EAAM;AAC3B,iBAAiB,mBAAO,CAAC,GAAU;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,kBAAkB,yBAAyB;AAC3C;AACA;AACA;;AAEA,yCAAyC,sDAAsD;AAC/F;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,mCAAmC,wBAAwB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,+BAA+B,wBAAwB;AACvD;AACA;;AAEA,sBAAsB,wBAAwB;AAC9C,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,gBAAgB,+BAA+B;AAC/C;AACA;AACA;AACA;AACA;AACA,gCAAgC,0BAA0B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,0BAA0B;AACjD;AACA;AACA;AACA;AACA,kCAAkC,YAAY,UAAU,OAAO;AAC/D,QAAQ;AACR;AACA,QAAQ;AACR;AACA,2CAA2C,WAAW;AACtD;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,8CAA8C,SAAS;AACvD;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,6CAA6C;AACtF;AACA,QAAQ;AACR,yCAAyC,aAAa;AACtD;AACA;;AAEA,0BAA0B,SAAS;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0BAA0B,wBAAwB;AAClD;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,qBAAqB;AACvD;AACA;;AAEA,yBAAyB,qBAAqB;AAC9C,iDAAiD,WAAW;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,QAAQ;AACR,2CAA2C,oCAAoC;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,6CAA6C;AAClF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACrNA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;;;;;;;ACVA,uBAAuB,mBAAO,CAAC,GAA2B;AAC1D,qBAAqB,mBAAO,CAAC,GAAyB;AACtD,oBAAoB,mBAAO,CAAC,GAAwB;AACpD,sBAAsB,mBAAO,CAAC,GAA0B;AACxD,oBAAoB,mBAAO,CAAC,GAAwB;AACpD,gBAAgB,mBAAO,CAAC,GAAoB;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;ACxCA;AACA;AACA;AACA;AACA;AACA,mBAAmB,UAAU;AAC7B,OAAO;AACP;AACA,mBAAmB,qFAAqF;AACxG,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;;;;;;;;ACrCA;AACA;;;;;;;;ACDA;AACA;AACA;AACA;;;;;;;;ACHA;AACA;AACA;AACA;AACA;;;;;;;;ACJA;AACA,WAAW,mBAAO,CAAC,GAAmB;AACtC,WAAW,mBAAO,CAAC,EAAmB;AACtC;;;;;;;;ACHA;AACA;AACA;AACA;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;;;;;;;ACrBA,YAAY,mBAAO,CAAC,GAAqB;;AAEzC;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA,eAAe,mBAAO,CAAC,EAAoB;AAC3C,gBAAgB,mBAAO,CAAC,EAAqB;AAC7C,eAAe,mBAAO,CAAC,GAAoB;AAC3C,kBAAkB,mBAAO,CAAC,GAAwB;;AAElD;AACA;AACA;;AAEA;AACA,eAAe,mBAAO,CAAC,GAAW;AAClC;AACA,gBAAgB,mBAAO,CAAC,GAAY;AACpC;AACA,iBAAiB,mBAAO,CAAC,GAAa;AACtC;AACA,sBAAsB,mBAAO,CAAC,EAAkB;AAChD;AACA,mBAAmB,mBAAO,CAAC,GAAe;AAC1C;AACA,iBAAiB,mBAAO,CAAC,GAAa;AACtC;AACA,eAAe,mBAAO,CAAC,GAAW;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACpCA;AACA,kBAAkB,mBAAO,CAAC,GAAgC;AAC1D;AACA;AACA,eAAe;AACf,KAAK;AACL;AACA,oBAAoB;AACpB,kBAAkB;AAClB;AACA,KAAK;AACL;AACA;AACA;;;;;;;;ACbA;AACA;AACA;AACA;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS,wBAAwB;AAC/C,KAAK;AACL;AACA;AACA;AACA;AACA,cAAc,SAAS,wBAAwB;AAC/C,KAAK;AACL;AACA;AACA;;;;;;;;ACjBA;AACA;AACA,iBAAiB,eAAe;AAChC,4CAA4C,eAAe;AAC3D;;AAEA,oBAAoB,2BAA2B;AAC/C,+CAA+C,2BAA2B;AAC1E;AACA;;AAEA;AACA;;;;;;;;ACZA,YAAY,mBAAO,CAAC,GAAkB;;AAEtC;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACPA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;UEtBA;UACA;UACA;UACA","sources":["webpack://egg-born-module-a-cli/./backend/src/aops.js","webpack://egg-born-module-a-cli/./backend/src/bean/bean.cli.js","webpack://egg-born-module-a-cli/./backend/src/bean/bean.cliBase.js","webpack://egg-born-module-a-cli/./backend/src/bean/local.console.js","webpack://egg-born-module-a-cli/./backend/src/bean/local.helper.js","webpack://egg-born-module-a-cli/./backend/src/bean/local.template.js","webpack://egg-born-module-a-cli/./backend/src/bean/version.manager.js","webpack://egg-born-module-a-cli/./backend/src/beans.js","webpack://egg-born-module-a-cli/./backend/src/config/config.js","webpack://egg-born-module-a-cli/./backend/src/config/errors.js","webpack://egg-born-module-a-cli/./backend/src/config/locale/en-us.js","webpack://egg-born-module-a-cli/./backend/src/config/locale/zh-cn.js","webpack://egg-born-module-a-cli/./backend/src/config/locales.js","webpack://egg-born-module-a-cli/./backend/src/config/validation/schemas.js","webpack://egg-born-module-a-cli/./backend/src/controller/cli.js","webpack://egg-born-module-a-cli/./backend/src/controllers.js","webpack://egg-born-module-a-cli/./backend/src/main.js","webpack://egg-born-module-a-cli/./backend/src/meta.js","webpack://egg-born-module-a-cli/./backend/src/models.js","webpack://egg-born-module-a-cli/./backend/src/routes.js","webpack://egg-born-module-a-cli/./backend/src/service/cli.js","webpack://egg-born-module-a-cli/./backend/src/services.js","webpack://egg-born-module-a-cli/external commonjs2 \"require3\"","webpack://egg-born-module-a-cli/external node-commonjs \"child_process\"","webpack://egg-born-module-a-cli/external node-commonjs \"fs\"","webpack://egg-born-module-a-cli/external node-commonjs \"path\"","webpack://egg-born-module-a-cli/webpack/bootstrap","webpack://egg-born-module-a-cli/webpack/before-startup","webpack://egg-born-module-a-cli/webpack/startup","webpack://egg-born-module-a-cli/webpack/after-startup"],"sourcesContent":["module.exports = app => {\n  const aops = {};\n  return aops;\n};\n","let __commandsMap;\nlet __commandsAll;\n\nmodule.exports = ctx => {\n  // const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Cli {\n    async meta({ context, user }) {\n      try {\n        // reload freeze\n        ctx.app.meta.reload.freeze();\n        // command\n        const { argv } = context;\n        const cliFullName = argv.cliFullName;\n        const command = await this._findCliCommandAndCheckRight({ cliFullName, user });\n        // command bean\n        const beanCommand = ctx.bean._newBean(command.beanFullName, { command, context });\n        if (!beanCommand) throw new Error(`cli command bean not found: ${command.beanFullName}`);\n        // meta\n        return await beanCommand.meta({ user });\n      } finally {\n        // reload unfreeze\n        ctx.app.meta.reload.unfreeze();\n      }\n    }\n\n    async execute({ progressId, context, user }) {\n      // directly\n      if (!progressId) {\n        await this._progressInBackground({ progressId, context, user });\n        return null;\n      }\n      // create progress\n      await ctx.bean.progress.create({ progressId });\n      // background\n      ctx.runInBackground(async () => {\n        await this._progressInBackground({ progressId, context, user });\n      });\n      // return progressId\n      return { progressId };\n    }\n\n    async _progressInBackground({ progressId, context, user }) {\n      try {\n        // reload freeze\n        ctx.app.meta.reload.freeze();\n        // command\n        const { argv } = context;\n        const cliFullName = argv.cliFullName;\n        const command = await this._findCliCommandAndCheckRight({ cliFullName, user });\n        // command bean\n        const beanCommand = ctx.bean._newBean(command.beanFullName, { command, context, progressId });\n        if (!beanCommand) throw new Error(`cli command bean not found: ${command.beanFullName}`);\n        // execute\n        await beanCommand.execute({ user });\n        // progress done\n        await ctx.bean.progress.done({ progressId, message: ctx.text('CliDone') });\n      } catch (err) {\n        // progress error\n        let message;\n        if (ctx.app.meta.isProd) {\n          message = err.message;\n        } else {\n          message = err.stack || err.message;\n        }\n        await ctx.bean.progress.error({ progressId, message });\n        // throw err\n        throw err;\n      } finally {\n        // reload unfreeze\n        ctx.app.meta.reload.unfreeze();\n      }\n    }\n\n    async _findCliCommandAndCheckRight({ cliFullName, user }) {\n      // command\n      const command = this._findCliCommand({ cliFullName });\n      // check right first\n      const right = await ctx.bean.resource.checkRightResource({\n        atomStaticKey: command.resource.atomStaticKey,\n        user,\n      });\n      if (!right) ctx.throw(403);\n      return command;\n    }\n\n    _findCliCommand({ cliFullName }) {\n      if (!__commandsMap) {\n        this._collectCommands();\n      }\n      const command = __commandsMap[cliFullName];\n      if (!command) throw new Error(`cli command not found: ${cliFullName}`);\n      return command;\n    }\n\n    _commandsAll() {\n      return __commandsAll;\n    }\n\n    _collectCommands() {\n      const _commandsMap = {};\n      const _commandsAll = {};\n      for (const module of ctx.app.meta.modulesArray) {\n        const moduleName = module.info.relativeName;\n        const commands = module.main.meta && module.main.meta.cli && module.main.meta.cli.commands;\n        if (!commands) continue;\n        const _commandsModule = (_commandsAll[moduleName] = {});\n        for (const groupName in commands) {\n          const group = commands[groupName];\n          const _commandsGroup = (_commandsModule[groupName] = {});\n          for (const key in group) {\n            const command = group[key];\n            const fullKey = `${moduleName}:${groupName}:${key}`;\n            // command\n            const _command = ctx.bean.util.extend({}, command);\n            // bean\n            const beanName = command.bean;\n            let beanFullName;\n            if (typeof beanName === 'string') {\n              beanFullName = `${moduleName}.cli.${beanName}`;\n            } else {\n              beanFullName = `${beanName.module || moduleName}.cli.${beanName.name}`;\n            }\n            _command.beanFullName = beanFullName;\n            // resource\n            let atomStaticKey = _command.resource && _command.resource.atomStaticKey;\n            if (!atomStaticKey) throw new Error(`cli command resource.atomStaticKey not specified: ${fullKey}`);\n            if (atomStaticKey.indexOf(':') === -1) {\n              atomStaticKey = `${moduleName}:${atomStaticKey}`;\n            }\n            _command.resource.atomStaticKey = atomStaticKey;\n            // ok\n            _commandsMap[fullKey] = _commandsGroup[key] = _command;\n          }\n        }\n      }\n      // ok\n      __commandsMap = _commandsMap;\n      __commandsAll = _commandsAll;\n    }\n  }\n  return Cli;\n};\n","const require3 = require('require3');\nconst eggBornUtils = require3('egg-born-utils');\n\nmodule.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class CliBase {\n    constructor(options) {\n      this.options = options;\n      this.console = ctx.bean._newBean(`${moduleInfo.relativeName}.local.console`, this);\n      this.helper = ctx.bean._newBean(`${moduleInfo.relativeName}.local.helper`, this);\n      this.template = ctx.bean._newBean(`${moduleInfo.relativeName}.local.template`, this);\n      this.cabloyConfig = null;\n    }\n\n    get context() {\n      return this.options.context;\n    }\n\n    async meta({ user }) {\n      await this._loadCabloyConfig();\n      const metaLocale = this._commandMeta();\n      return metaLocale;\n    }\n\n    async execute(/* { user } */) {\n      await this._loadCabloyConfig();\n    }\n\n    async _loadCabloyConfig() {\n      const { argv } = this.context;\n      this.cabloyConfig = eggBornUtils.cabloyConfig;\n      await this.cabloyConfig.load({ projectPath: argv.projectPath });\n    }\n\n    _commandMeta() {\n      const { command } = this.options;\n      const { argv } = this.context;\n      const meta = {};\n      meta.info = this._commandMeta_info({ info: command.info, argv });\n      meta.options = this._commandMeta_options({ options: command.options, argv });\n      meta.groups = this._commandMeta_groups({ groups: command.groups, argv });\n      return meta;\n    }\n\n    _commandMeta_groups({ groups }) {\n      const metaGroups = {};\n      if (groups) {\n        for (const groupName in groups) {\n          const group = groups[groupName];\n          metaGroups[groupName] = this._commandMeta_group({ group });\n        }\n      }\n      return metaGroups;\n    }\n\n    _commandMeta_group({ group }) {\n      const metaGroup = {\n        description: ctx.text(group.description),\n        condition: group.condition,\n        questions: {},\n      };\n      for (const key in group.questions) {\n        const question = group.questions[key];\n        metaGroup.questions[key] = {\n          ...question,\n          message: ctx.text(question.message),\n        };\n      }\n      return metaGroup;\n    }\n\n    _commandMeta_options({ options }) {\n      const metaOptions = {};\n      if (options) {\n        for (const key in options) {\n          const option = options[key];\n          metaOptions[key] = {\n            ...option,\n            description: ctx.text(option.description),\n          };\n        }\n      }\n      return metaOptions;\n    }\n\n    _commandMeta_info({ info, argv }) {\n      // info\n      const metaInfo = {\n        version: info.version,\n        title: ctx.text(info.title),\n        usage: ctx.text(info.usage),\n      };\n      // usage\n      if (!metaInfo.usage) {\n        metaInfo.usage = `${ctx.text('Usage')}: npm run cli ${argv.cliFullName} -- [options] [-h] [-v] [-t]`;\n      }\n      // welcomes\n      metaInfo.welcomes = this._commandMeta_info_welcomes({ info });\n      // ok\n      return metaInfo;\n    }\n\n    _commandMeta_info_welcomes({ info }) {\n      let welcomes = info.welcomes || [];\n      if (!Array.isArray(welcomes)) welcomes = [welcomes];\n      welcomes = welcomes.map(item => ctx.text(item));\n      // helper doc\n      const configHelper = ctx.bean.util.getProperty(this.cabloyConfig.get(), 'cli.helper');\n      if (configHelper !== false) {\n        let url = `https://cabloy.com/${ctx.locale === 'zh-cn' ? 'zh-cn/' : ''}articles/cli-introduce.html`;\n        url = this.helper.chalk.keyword('cyan')(url);\n        const text = `${ctx.text('CliDocs')}: ${url}`;\n        welcomes.unshift(text);\n      }\n      return welcomes;\n    }\n  }\n  return CliBase;\n};\n","module.exports = ctx => {\n  // const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Local {\n    constructor(cli) {\n      this.cli = cli;\n    }\n\n    get options() {\n      return this.cli.options;\n    }\n\n    get context() {\n      return this.cli.options.context;\n    }\n\n    async log(data, options = {}) {\n      if (!data) return;\n      // data\n      if (typeof data !== 'object') {\n        data = { text: String(data) };\n      }\n      let { progressNo, total, progress, text } = data;\n      // logPrefix\n      const logPrefix = options.logPrefix;\n      if (logPrefix) {\n        text = this._adjustText(logPrefix, text);\n      }\n      // update\n      return await ctx.bean.progress.update({\n        progressId: this.options.progressId,\n        progressNo,\n        total,\n        progress,\n        text,\n      });\n    }\n\n    _adjustText(prefix, text) {\n      return String(text)\n        .split('\\n')\n        .map(item => (item ? prefix + item : item))\n        .join('\\n');\n    }\n  }\n  return Local;\n};\n","const { spawn } = require('child_process');\nconst path = require('path');\nconst require3 = require('require3');\nconst Chalk = require3('chalk');\nconst TableClass = require3('cli-table3');\nconst Boxen = require3('boxen');\nconst fse = require3('fs-extra');\nconst mparse = require3('egg-born-mparse').default;\n\nmodule.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Local {\n    constructor(cli) {\n      this.cli = cli;\n    }\n\n    get options() {\n      return this.cli.options;\n    }\n\n    get context() {\n      return this.cli.options.context;\n    }\n\n    get console() {\n      return this.cli.console;\n    }\n\n    get template() {\n      return this.cli.template;\n    }\n\n    get moduleConfig() {\n      return ctx.config.module(moduleInfo.relativeName);\n    }\n    get chalk() {\n      return this.newChalk();\n    }\n    get Table() {\n      return TableClass;\n    }\n    newChalk(options) {\n      if (!options) {\n        options = this.moduleConfig.helper.chalk.options;\n      }\n      return new Chalk.Instance(options);\n    }\n    newTable(options) {\n      return new TableClass(options);\n    }\n    boxen({ text, options }) {\n      if (!options) {\n        options = this.moduleConfig.helper.boxen.options;\n      }\n      return Boxen(text, options);\n    }\n    parseModuleInfo(moduleName) {\n      const moduleInfo = mparse.parseInfo(moduleName);\n      if (!moduleInfo) throw new Error(`module name is not valid: ${moduleName}`);\n      return moduleInfo;\n    }\n    findModule(moduleName) {\n      const moduleInfo = this.parseModuleInfo(moduleName);\n      return ctx.app.meta.modules[moduleInfo.relativeName];\n    }\n    parseSuiteInfo(suiteName) {\n      const suiteInfo = mparse.parseInfo(suiteName, 'suite');\n      if (!suiteInfo) throw new Error(`suite name is not valid: ${suiteName}`);\n      return suiteInfo;\n    }\n    findSuite(suiteName) {\n      const suiteInfo = this.parseSuiteInfo(suiteName);\n      return ctx.app.meta.suites[suiteInfo.relativeName];\n    }\n    async ensureDir(dir) {\n      await fse.ensureDir(dir);\n      return dir;\n    }\n    getNpmRegistry() {\n      let registry = this.context.env.npm_config_registry;\n      if (!registry) {\n        const locale = ctx.locale === 'zh-cn' ? 'zh-cn' : 'en-us';\n        registry = this.moduleConfig.helper.lerna.registry.locales[locale];\n      }\n      return registry;\n    }\n    async lernaBootstrap() {\n      // args\n      const args = ['bootstrap'];\n      // registry\n      const registry = this.getNpmRegistry();\n      const registryOption = registry ? `--registry=${registry}` : '';\n      if (registryOption) {\n        args.push(registryOption);\n      }\n      // log\n      await this.console.log(`===> lerna bootstrap ${registryOption}`);\n      // spawn\n      await this.spawnCmd({\n        cmd: 'lerna',\n        args,\n      });\n    }\n    async formatFile({ fileName, logPrefix }) {\n      try {\n        await this.spawnBin({\n          cmd: 'prettier',\n          args: ['--write', fileName],\n          options: {\n            logPrefix,\n          },\n        });\n      } catch (err) {\n        if (err.code === 2) {\n          // not throw error\n          return;\n        }\n        throw err;\n      }\n    }\n    async spawnBin({ cmd, args, options }) {\n      cmd = path.join(this.context.cwd, 'node_modules/.bin', cmd);\n      return await this.spawnCmd({ cmd, args, options });\n    }\n    async spawnCmd({ cmd, args, options }) {\n      if (/^win/.test(process.platform)) {\n        cmd = `${cmd}.cmd`;\n      }\n      return await this.spawn({ cmd, args, options });\n    }\n    async spawnExe({ cmd, args, options }) {\n      if (/^win/.test(process.platform)) {\n        cmd = `${cmd}.exe`;\n      }\n      return await this.spawn({ cmd, args, options });\n    }\n    async spawn({ cmd, args = [], options = {} }) {\n      if (!options.cwd) {\n        options.cwd = this.context.cwd;\n      }\n      return new Promise((resolve, reject) => {\n        const logPrefix = options.logPrefix;\n        const proc = spawn(cmd, args, options);\n        let stdout = '';\n        // let stderr = '';\n        proc.stdout.on('data', async data => {\n          stdout += data.toString();\n          await this.console.log({ text: data.toString() }, { logPrefix });\n        });\n        proc.stderr.on('data', async data => {\n          // stderr += data.toString();\n          await this.console.log({ text: data.toString() }, { logPrefix });\n        });\n        proc.once('exit', code => {\n          if (code !== 0) {\n            const err = new Error(`spawn ${cmd} ${args.join(' ')} fail, exit code: ${code}`);\n            err.code = 10000 + code;\n            return reject(err);\n          }\n          resolve(stdout);\n        });\n      });\n    }\n    async gitCommit({ cwd, message }) {\n      // git status\n      const stdout = await this.spawnExe({\n        cmd: 'git',\n        args: ['status'],\n        options: {\n          cwd,\n        },\n      });\n      if (stdout.indexOf('nothing to commit, working tree clean') > -1 && stdout.indexOf('is ahead of') === -1) {\n        // do nothing\n        return;\n      }\n      if (stdout.indexOf('is ahead of') === -1) {\n        // git add .\n        await this.spawnExe({\n          cmd: 'git',\n          args: ['add', '.'],\n          options: {\n            cwd,\n          },\n        });\n        // git commit\n        await this.spawnExe({\n          cmd: 'git',\n          args: ['commit', '-m', message],\n          options: {\n            cwd,\n          },\n        });\n      }\n      // git push\n      await this.spawnExe({\n        cmd: 'git',\n        args: ['push'],\n        options: {\n          cwd,\n        },\n      });\n    }\n  }\n  return Local;\n};\n","const fs = require('fs');\nconst path = require('path');\nconst require3 = require('require3');\nconst eggBornUtils = require3('egg-born-utils');\nconst isTextOrBinary = require3('istextorbinary');\nconst ejs = require3('@zhennann/ejs');\nconst gogocode = require3('gogocode');\n\nmodule.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Local {\n    constructor(cli) {\n      this.cli = cli;\n    }\n\n    get options() {\n      return this.cli.options;\n    }\n\n    get context() {\n      return this.cli.options.context;\n    }\n\n    get console() {\n      return this.cli.console;\n    }\n\n    get helper() {\n      return this.cli.helper;\n    }\n\n    get moduleConfig() {\n      return ctx.config.module(moduleInfo.relativeName);\n    }\n\n    get fileMapping() {\n      return this.moduleConfig.template.render.fileMapping;\n    }\n\n    get filesIgnore() {\n      return this.moduleConfig.template.render.ignore;\n    }\n\n    resolvePath({ moduleName, path: _path }) {\n      const module = this.helper.findModule(moduleName);\n      return path.join(module.root, 'backend/cli/templates', _path);\n    }\n\n    async renderBoilerplateAndSnippets({ targetDir, moduleName, snippetsPath, boilerplatePath }) {\n      // first\n      if (snippetsPath) {\n        const snippetsDir = this.resolvePath({\n          moduleName,\n          path: snippetsPath,\n        });\n        await this.applySnippets({ targetDir, snippetsDir });\n      }\n      // then\n      if (boilerplatePath) {\n        const templateDir = this.resolvePath({\n          moduleName,\n          path: boilerplatePath,\n        });\n        await this.renderDir({ targetDir, templateDir });\n      }\n    }\n\n    async renderDir({ targetDir, templateDir }) {\n      const { argv } = this.context;\n      // files\n      const files = eggBornUtils.tools.globbySync('**/*', {\n        cwd: templateDir,\n        dot: true,\n        onlyFiles: false,\n        followSymlinkedDirectories: false,\n      });\n      // loop\n      for (const file of files) {\n        const { dir: dirname, base: basename } = path.parse(file);\n        if (this.filesIgnore.includes(basename)) continue;\n        const templateFile = path.join(templateDir, file);\n        const fileName = this.fileMapping[basename] || basename;\n        const parentPath = path.join(targetDir, dirname);\n        const targetFile = path.join(parentPath, ctx.bean.util.replaceTemplate(fileName, argv));\n        await this.renderFile({ targetFile, templateFile });\n        if (fileName !== '.gitkeep') {\n          const gitkeep = path.join(parentPath, '.gitkeep');\n          if (fs.existsSync(gitkeep)) {\n            fs.unlinkSync(gitkeep);\n          }\n        }\n      }\n      return files;\n    }\n\n    async renderFile({ targetFile, templateFile }) {\n      const stats = fs.lstatSync(templateFile);\n      if (stats.isSymbolicLink()) {\n        const target = fs.readlinkSync(templateFile);\n        fs.symlinkSync(target, targetFile);\n        await this.console.log(`${targetFile} link to ${target}`);\n      } else if (stats.isDirectory()) {\n        await this.helper.ensureDir(targetFile);\n      } else if (stats.isFile()) {\n        let content = fs.readFileSync(templateFile);\n        await this.console.log(`write to ${targetFile}`);\n        // check if content is a text file\n        let result;\n        let changed;\n        if (!isTextOrBinary.isTextSync(templateFile, content)) {\n          result = content;\n        } else {\n          content = content.toString('utf8');\n          result = await this.renderContent({ content });\n          changed = content !== result;\n        }\n        // save\n        fs.writeFileSync(targetFile, result);\n        // format\n        if (changed) {\n          await this.helper.formatFile({ fileName: targetFile, logPrefix: 'format: ' });\n        }\n      } else {\n        await this.console.log(`ignore ${templateFile}, only support file, dir, symlink`);\n      }\n    }\n\n    async renderContent({ content }) {\n      const data = this.getEjsData();\n      const options = this.getEjsOptions();\n      return await ejs.render(content, data, options);\n    }\n\n    getEjsOptions() {\n      return {\n        async: true,\n        cache: false,\n        compileDebug: ctx.app.meta.isTest || ctx.app.meta.isLocal,\n        outputFunctionName: 'echo',\n        rmWhitespace: false,\n      };\n    }\n\n    getEjsData() {\n      return {\n        ...this.context,\n        ctx,\n      };\n    }\n\n    getAstData(ast, snippet) {\n      return {\n        cli: this.cli,\n        ast,\n        snippet,\n        ...this.context,\n        ctx,\n      };\n    }\n\n    async applySnippets({ targetDir, snippetsDir }) {\n      // snippets\n      let files = eggBornUtils.tools.globbySync('*.js', {\n        cwd: snippetsDir,\n        onlyFiles: true,\n      });\n      // snippets sort\n      files = files\n        .filter(item => item[0] !== '-')\n        .sort((a, b) => this._parseSnippetFilePrefix(a) - this._parseSnippetFilePrefix(b));\n      // for\n      for (const file of files) {\n        const snippet = require3(path.join(snippetsDir, file));\n        const targetFile = path.join(targetDir, snippet.file);\n        await this.applySnippet({ targetFile, snippet });\n      }\n    }\n\n    async applySnippet({ targetFile, snippet }) {\n      await this.console.log(`apply changes to ${targetFile}`);\n      // source code\n      let sourceCode = fs.readFileSync(targetFile);\n      sourceCode = sourceCode.toString('utf8');\n      // language\n      const language = snippet.parseOptions && snippet.parseOptions.language;\n      // transform\n      let outputCode;\n      if (language === 'plain') {\n        const ast = sourceCode;\n        const outAst = await snippet.transform(this.getAstData(ast, snippet));\n        outputCode = outAst;\n      } else if (language === 'json') {\n        const ast = JSON.parse(sourceCode);\n        const outAst = await snippet.transform(this.getAstData(ast, snippet));\n        outputCode = JSON.stringify(outAst, null, 2);\n      } else {\n        const ast = gogocode(sourceCode, { parseOptions: snippet.parseOptions });\n        const outAst = await snippet.transform(this.getAstData(ast, snippet));\n        outputCode = outAst.root().generate();\n      }\n      // save\n      fs.writeFileSync(targetFile, outputCode);\n      // format\n      await this.helper.formatFile({ fileName: targetFile, logPrefix: 'format: ' });\n    }\n\n    _parseSnippetFilePrefix(fileName) {\n      const num = fileName.split('-')[0];\n      if (!num || isNaN(num)) return 10000;\n      return parseInt(num);\n    }\n  }\n  return Local;\n};\n","module.exports = app => {\n  class Version extends app.meta.BeanBase {\n    async update(options) {}\n\n    async init(options) {}\n\n    async test() {}\n  }\n\n  return Version;\n};\n","const versionManager = require('./bean/version.manager.js');\nconst localConsole = require('./bean/local.console.js');\nconst localHelper = require('./bean/local.helper.js');\nconst localTemplate = require('./bean/local.template.js');\nconst beanCliBase = require('./bean/bean.cliBase.js');\nconst beanCli = require('./bean/bean.cli.js');\n\nmodule.exports = app => {\n  const beans = {\n    // version\n    'version.manager': {\n      mode: 'app',\n      bean: versionManager,\n    },\n    // local\n    'local.helper': {\n      mode: 'ctx',\n      bean: localHelper,\n    },\n    'local.template': {\n      mode: 'ctx',\n      bean: localTemplate,\n    },\n    'local.console': {\n      mode: 'ctx',\n      bean: localConsole,\n    },\n    // global\n    cliBase: {\n      mode: 'ctx',\n      bean: beanCliBase,\n      global: true,\n    },\n    cli: {\n      mode: 'ctx',\n      bean: beanCli,\n      global: true,\n    },\n  };\n  return beans;\n};\n","// eslint-disable-next-line\nmodule.exports = appInfo => {\n  const config = {\n    helper: {\n      chalk: {\n        options: { level: 2 },\n      },\n      boxen: {\n        options: { padding: 1, margin: 1, align: 'center', borderColor: 'yellow', borderStyle: 'round' },\n      },\n      lerna: {\n        registry: {\n          locales: {\n            'en-us': null,\n            'zh-cn': 'https://registry.npmmirror.com',\n          },\n        },\n      },\n    },\n    template: {\n      render: {\n        fileMapping: {\n          gitignore: '.gitignore',\n          _gitignore: '.gitignore',\n          '_.gitignore': '.gitignore',\n          '_package.json': 'package.json',\n          '_.eslintrc': '.eslintrc',\n          '_.eslintignore': '.eslintignore',\n          '_.npmignore': '.npmignore',\n          '_.eslintrc.js': '.eslintrc.js',\n          '_jsconfig.json': 'jsconfig.json',\n        },\n        ignore: ['.DS_Store'],\n      },\n    },\n  };\n  return config;\n};\n","// error code should start from 1001\nmodule.exports = {};\n","module.exports = {\n  CliDocs: 'Cli Docs',\n  CliDone: 'Done',\n};\n","module.exports = {\n  Usage: '用法',\n  CliDocs: 'Cli文档',\n  CliDone: '已完成',\n};\n","module.exports = {\n  'en-us': require('./locale/en-us.js'),\n  'zh-cn': require('./locale/zh-cn.js'),\n};\n","module.exports = app => {\n  const schemas = {};\n  return schemas;\n};\n","module.exports = app => {\n  class cliController extends app.Controller {\n    async meta() {\n      const res = await this.ctx.service.cli.meta({\n        context: this.ctx.request.body.context,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async execute() {\n      const res = await this.ctx.service.cli.execute({\n        progressId: this.ctx.request.body.progressId,\n        context: this.ctx.request.body.context,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n  }\n\n  return cliController;\n};\n","const cli = require('./controller/cli.js');\n\nmodule.exports = app => {\n  const controllers = {\n    cli,\n  };\n  return controllers;\n};\n","const config = require('./config/config.js');\nconst locales = require('./config/locales.js');\nconst errors = require('./config/errors.js');\nconst CliBaseFn = require('./bean/bean.cliBase.js');\n\nmodule.exports = app => {\n  // base\n  app.meta.CliBase = CliBaseFn;\n\n  // aops\n  const aops = require('./aops.js')(app);\n  // beans\n  const beans = require('./beans.js')(app);\n  // routes\n  const routes = require('./routes.js')(app);\n  // controllers\n  const controllers = require('./controllers.js')(app);\n  // services\n  const services = require('./services.js')(app);\n  // models\n  const models = require('./models.js')(app);\n  // meta\n  const meta = require('./meta.js')(app);\n\n  return {\n    aops,\n    beans,\n    routes,\n    controllers,\n    services,\n    models,\n    config,\n    locales,\n    errors,\n    meta,\n  };\n};\n","module.exports = app => {\n  const schemas = require('./config/validation/schemas.js')(app);\n  const meta = {\n    base: {\n      atoms: {},\n    },\n    validation: {\n      validators: {},\n      keywords: {},\n      schemas,\n    },\n  };\n  return meta;\n};\n","module.exports = app => {\n  const models = {};\n  return models;\n};\n","module.exports = app => {\n  const routes = [\n    // cli\n    {\n      method: 'post',\n      path: 'cli/meta',\n      controller: 'cli',\n      meta: { right: { enableAuthOpen: true } },\n    },\n    {\n      method: 'post',\n      path: 'cli/execute',\n      controller: 'cli',\n      meta: { right: { enableAuthOpen: true } },\n    },\n  ];\n  return routes;\n};\n","module.exports = app => {\n  class cli extends app.Service {\n    async meta({ context, user }) {\n      return await this.ctx.bean.cli.meta({ context, user });\n    }\n\n    async execute({ progressId, context, user }) {\n      return await this.ctx.bean.cli.execute({ progressId, context, user });\n    }\n  }\n\n  return cli;\n};\n","const cli = require('./service/cli.js');\n\nmodule.exports = app => {\n  const services = {\n    cli,\n  };\n  return services;\n};\n","module.exports = require(\"require3\");","module.exports = require(\"child_process\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(421);\n",""],"names":[],"sourceRoot":""}