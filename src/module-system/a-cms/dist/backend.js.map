{"version":3,"file":"backend.js","mappings":";;;;;;AAAA;AACA;AACA,mBAAmB,gCAAgC;AACnD;AACA,uCAAuC,gCAAgC;AACvE,eAAe;AACf;;AAEA,iBAAiB,+BAA+B;AAChD;AACA,sCAAsC,+BAA+B;AACrE;AACA;AACA;AACA;;AAEA,mBAAmB,iCAAiC;AACpD;AACA,2BAA2B,iCAAiC;AAC5D;;AAEA,kBAAkB,6CAA6C;AAC/D;AACA,0BAA0B,6CAA6C;AACvE;;AAEA,mBAAmB,+BAA+B;AAClD;AACA,2BAA2B,+BAA+B;AAC1D;AACA;;AAEA;AACA;;;;;;;;ACjCA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,YAAY,WAAW;AACvB,kCAAkC,wBAAwB;AAC1D;AACA;;AAEA;AACA;;;;;;;;ACjBA;AACA;AACA;AACA;;;;;;;;ACHA,aAAa,mBAAO,CAAC,IAAM;AAC3B,iBAAiB,mBAAO,CAAC,IAAU;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,mBAAO,CAAC,IAAoB;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iFAAiF,6BAA6B;AAC9G;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,+CAA+C;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kCAAkC,sBAAsB,GAAG,6BAA6B;AACxF;AACA;;AAEA,0BAA0B,MAAM;AAChC,kCAAkC,sBAAsB,GAAG,6BAA6B;AACxF;AACA;;AAEA,8BAA8B,UAAU;AACxC;AACA,6BAA6B,SAAS,GAAG,sBAAsB,GAAG,6BAA6B;AAC/F;AACA;;AAEA,8BAA8B,gBAAgB;AAC9C;AACA,6BAA6B,SAAS,GAAG,sBAAsB,GAAG,6BAA6B;AAC/F;AACA;AACA;;AAEA,qCAAqC,UAAU;AAC/C,wCAAwC,UAAU;AAClD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB,gBAAgB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB,oBAAoB;AAC5C;AACA,+CAA+C,0BAA0B;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,UAAU;AACtE;AACA,yCAAyC;AACzC,+BAA+B,oBAAoB;AACnD,OAAO;AACP;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA,oBAAoB,mBAAmB;AACvC;AACA;AACA;AACA;AACA;AACA,4CAA4C,oBAAoB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,+CAA+C,UAAU;AACzD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,2CAA2C,sBAAsB,GAAG,6BAA6B;AACjG;;AAEA;AACA;AACA;AACA;AACA,+DAA+D,YAAY;AAC3E;AACA;AACA;AACA,gBAAgB,cAAc,EAAE,mDAAmD;AACnF;AACA;AACA;AACA,gBAAgB,QAAQ,EAAE,2EAA2E;AACrG;AACA;AACA;AACA,uBAAuB,QAAQ,GAAG,KAAK;AACvC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,sBAAsB;AACvE;;AAEA;;AAEA,2BAA2B,kCAAkC;AAC7D;AACA;AACA;AACA,wCAAwC,UAAU;AAClD,sBAAsB;AACtB;AACA,iCAAiC,MAAM;AACvC;AACA,mCAAmC,8BAA8B;AACjE;AACA,gCAAgC,MAAM;AACtC;;AAEA,0BAA0B,YAAY;AACtC;AACA,gEAAgE,YAAY;AAC5E;AACA;AACA;AACA,8DAA8D,kBAAkB;AAChF;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,gCAAgC;AACxE;AACA,uDAAuD,mBAAmB;AAC1E,8BAA8B;AAC9B;AACA,sBAAsB;AACtB;AACA,kCAAkC,eAAe;AACjD;AACA;AACA,mCAAmC,eAAe;AAClD;AACA,kCAAkC,MAAM;AACxC;AACA;;AAEA,0BAA0B,0BAA0B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,gCAAgC;AACxE;AACA,uDAAuD,oBAAoB;AAC3E,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,EAAE,qBAAqB,YAAY;AACxE;AACA;AACA;AACA;AACA,kCAAkC,MAAM;AACxC;AACA;;AAEA,4BAA4B,8BAA8B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,gBAAgB,aAAa;AAC7B;AACA,OAAO;;AAEP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,oCAAoC,eAAe;AACnD;AACA,qCAAqC,iBAAiB;AACtD;AACA,kCAAkC,gBAAgB;AAClD;;AAEA,2BAA2B,eAAe;AAC1C;AACA,wCAAwC,MAAM;AAC9C;AACA;AACA;AACA;AACA;AACA,iCAAiC,aAAa;AAC9C;AACA,OAAO;AACP;;AAEA,yBAAyB,MAAM;AAC/B;AACA;AACA,iEAAiE,iBAAiB;AAClF;AACA;AACA,0CAA0C,MAAM;AAChD;AACA;AACA;AACA;AACA,yBAAyB,UAAU;AACnC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,2BAA2B,gBAAgB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,IAAI;AACf,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0BAA0B,eAAe;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,IAAI;AACf,eAAe,QAAQ;AACvB;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,qCAAqC,EAAE,qBAAqB,YAAY;AACxE;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,IAAI;AACf,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEA,0BAA0B,MAAM;AAChC;AACA;AACA,kEAAkE,iBAAiB;AACnF;AACA;AACA,0CAA0C,MAAM;AAChD;AACA;AACA;AACA;AACA,yBAAyB,UAAU;AACnC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,wBAAwB,sCAAsC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,oBAAoB;AAClD;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,gBAAgB;AAC9E,sBAAsB,eAAe,IAAI,WAAW;AACpD;AACA;AACA;AACA;AACA,yCAAyC,eAAe;AACxD,4CAA4C,eAAe;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,oCAAoC;AAC1E;AACA;;AAEA,6BAA6B,sBAAsB;AACnD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,oCAAoC,YAAY;AAChD;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;;AAEA,2BAA2B,kBAAkB;AAC7C;AACA;AACA;;AAEA,gCAAgC,gBAAgB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,4CAA4C;AAC9F;AACA;AACA,sEAAsE,yBAAyB;AAC/F;AACA;AACA;AACA,gCAAgC,eAAe,qBAAqB,eAAe;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,2BAA2B,eAAe;AAC1C;AACA;AACA,0CAA0C,gDAAgD;AAC1F,0CAA0C,8CAA8C;AACxF;AACA;;AAEA,yBAAyB,4BAA4B;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,gBAAgB;AAC3E;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,qDAAqD,kBAAkB,IAAI,qBAAqB;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,mBAAmB,GAAG,IAAI,GAAG,mBAAmB;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,KAAK;AAC1C;AACA;;AAEA,wBAAwB,eAAe;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,YAAY;AACtD;AACA,4BAA4B,eAAe,IAAI;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,6FAA6F;AAC7F;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,MAAM;AAC7B;AACA;;AAEA,qBAAqB,MAAM;AAC3B;AACA,kDAAkD,MAAM;AACxD;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;;AAEA,oBAAoB,MAAM;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,MAAM;AACxD,yCAAyC,MAAM;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,qDAAqD,sBAAsB,EAAE,qBAAqB;AAClG,WAAW;AACX;AACA;AACA,WAAW;AACX;AACA;AACA,WAAW;AACX;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;;AAEA;;AAEA;AACA,2BAA2B,4BAA4B;AACvD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,wBAAwB,EAAE,wBAAwB;AACzF,aAAa;AACb;;AAEA;AACA,qCAAqC,kDAAkD;AACvF;;AAEA;AACA;AACA,uEAAuE;;AAEvE;AACA;AACA;AACA;AACA;AACA,0BAA0B,2BAA2B,IAAI,eAAe,EAAE,yBAAyB;AACnG,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,iDAAiD,kCAAkC;AACnF;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B,sCAAsC;AAChE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;;AAEA;AACA,0CAA0C,UAAU;;AAEpD;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,SAAS,OAAO,kBAAkB;AACpG;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE,WAAW,OAAO,kBAAkB;AAC5G;AACA;AACA;AACA;AACA;;AAEA;AACA,iDAAiD,gBAAgB;AACjE;AACA;AACA;;AAEA;AACA;AACA,oEAAoE,WAAW,OAAO,kBAAkB;AACxG;AACA;AACA;;AAEA;AACA,8EAA8E,iBAAiB;AAC/F;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA,yEAAyE,iBAAiB;AAC1F;AACA,aAAa;AACb;AACA,mCAAmC,KAAK;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,SAAS,GAAG,IAAI;AACnF;AACA;AACA;AACA;;AAEA;AACA,kCAAkC,MAAM;;AAExC;AACA,wCAAwC,MAAM;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;;AAEA;AACA,oCAAoC,kDAAkD;;AAEtF;AACA;AACA,uEAAuE;;AAEvE;AACA;AACA;AACA;AACA;AACA,0BAA0B,2BAA2B,IAAI,eAAe,EAAE,yBAAyB;AACnG,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,iDAAiD,kCAAkC;AACnF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,UAAU;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;;AAEA,4BAA4B,UAAU;AACtC;AACA,uDAAuD,UAAU;AACjE;AACA;AACA;;AAEA,4BAA4B,UAAU;AACtC;AACA,wCAAwC,UAAU;;AAElD;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,+CAA+C,gBAAgB;AAC/D;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,+BAA+B,MAAM;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,WAAW,EAAE,2EAA2E;AACnG;AACA;AACA;AACA;AACA;AACA,EAAE,MAAM;AACR;AACA;AACA,8BAA8B,YAAY;AAC1C;;AAEA,yBAAyB,MAAM;AAC/B;AACA;AACA;AACA;;AAEA,WAAW,WAAW;AACtB;AACA;AACA;AACA,8BAA8B,YAAY;AAC1C;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,UAAU,OAAO,kBAAkB;AACpG;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,8BAA8B,aAAa;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,2BAA2B;AACzE,kCAAkC,kDAAkD;AACpF;AACA;;AAEA,0BAA0B,cAAc;AACxC;AACA;AACA;AACA;AACA,kEAAkE,kBAAkB;AACpF;AACA,qCAAqC;AACrC;AACA;AACA;AACA,wCAAwC,gCAAgC;AACxE;AACA,uDAAuD,oBAAoB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,wBAAwB;AACzC;AACA,SAAS;AACT;AACA,mDAAmD,eAAe;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,iBAAiB,GAAG,wBAAwB;AAC5D;;AAEA,yBAAyB,UAAU;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,eAAe;AACf,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;AC1yCA;AACA;AACA;AACA,0BAA0B,yBAAyB;AACnD;AACA,2DAA2D,oBAAoB;AAC/E;AACA,yCAAyC,WAAW;AACpD,yCAAyC,cAAc;AACvD;;AAEA;AACA,4BAA4B,4BAA4B;AACxD,yCAAyC,WAAW;AACpD,2CAA2C,iBAAiB;AAC5D;;AAEA,uBAAuB,YAAY;AACnC;AACA;AACA,kEAAkE,uBAAuB;AACzF,+DAA+D,QAAQ,gBAAgB,4BAA4B;AACnH;AACA;AACA;AACA,iDAAiD,aAAa,SAAS;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oCAAoC,gCAAgC;AACpE;AACA,2DAA2D,oBAAoB;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB,GAAG,wBAAwB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;;AAEA,+BAA+B,gCAAgC;AAC/D;AACA,2DAA2D,oBAAoB;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB,GAAG,wBAAwB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;;AAEA,oCAAoC,uBAAuB;AAC3D;AACA,2DAA2D,oBAAoB;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB,GAAG,wBAAwB;AACvE;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;;AAEA,+BAA+B,uBAAuB;AACtD;AACA,2DAA2D,oBAAoB;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB,GAAG,wBAAwB;AACvE;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;AACA;;AAEA;AACA;;;;;;;;ACzHA,iBAAiB,mBAAO,CAAC,IAAU;AACnC;;AAEA;AACA;AACA;AACA,oBAAoB,8BAA8B;AAClD,yCAAyC,WAAW;AACpD,mCAAmC,mBAAmB;AACtD;;AAEA,8BAA8B,WAAW;AACzC,yCAAyC,WAAW;AACpD;AACA;;AAEA,0BAA0B,WAAW;AACrC,yCAAyC,WAAW;AACpD;AACA;;AAEA;AACA,0BAA0B,iBAAiB;AAC3C;AACA,yCAAyC,WAAW;AACpD;AACA,kCAAkC,MAAM;AACxC;AACA;AACA;AACA,mCAAmC,WAAW;AAC9C;AACA;AACA;AACA;;AAEA,qCAAqC,qBAAqB;AAC1D,yCAAyC,WAAW;AACpD,oDAAoD,UAAU;AAC9D;;AAEA,8BAA8B,qBAAqB;AACnD,yCAAyC,WAAW;AACpD,6CAA6C,UAAU;AACvD;;AAEA;AACA,8BAA8B,2BAA2B;AACzD;AACA,yCAAyC,WAAW;AACpD;AACA,sCAAsC,gBAAgB;AACtD;AACA;AACA;AACA,kCAAkC,qBAAqB;AACvD;AACA,sCAAsC,UAAU;AAChD;AACA;;AAEA,yBAAyB,WAAW;AACpC,yCAAyC,WAAW;AACpD;AACA;;AAEA,mBAAmB,2BAA2B;AAC9C,yCAAyC,WAAW;AACpD,yCAAyC,UAAU;AACnD;AACA,wDAAwD,oBAAoB;AAC5E;AACA;AACA;;AAEA,0BAA0B,uBAAuB;AACjD;AACA;AACA;AACA;AACA,yBAAyB,iBAAiB,GAAG,wBAAwB;AACrE;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;;AAEA,yBAAyB,iCAAiC;AAC1D;AACA;AACA;AACA;AACA,yBAAyB,iBAAiB,GAAG,wBAAwB;AACrE;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;;AAEA,qBAAqB,sBAAsB;AAC3C;AACA;AACA,wDAAwD,qBAAqB;AAC7E;AACA;AACA;;AAEA,+BAA+B,qBAAqB;AACpD;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA,sBAAsB,2BAA2B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR,yDAAyD,OAAO,QAAQ,eAAe;AACvF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;AC/LA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0BAA0B,iCAAiC;AAC3D,8CAA8C,WAAW;AACzD,yCAAyC,sBAAsB;AAC/D;;AAEA,2BAA2B,uBAAuB;AAClD,8CAA8C,WAAW;AACzD,0CAA0C,YAAY;AACtD;;AAEA,0BAA0B,uBAAuB;AACjD,8CAA8C,WAAW;AACzD,yCAAyC,YAAY;AACrD;;AAEA,0BAA0B,gCAAgC;AAC1D,8CAA8C,WAAW;AACzD,yCAAyC,qBAAqB;AAC9D;AACA;;AAEA;AACA;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,WAAW;AAC7D;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACjBA,kBAAkB,mBAAO,CAAC,IAAwB;AAClD,iBAAiB,mBAAO,CAAC,IAAuB;AAChD,iBAAiB,mBAAO,CAAC,GAAuB;AAChD,iBAAiB,mBAAO,CAAC,GAAuB;AAChD,iBAAiB,mBAAO,CAAC,IAAuB;AAChD,iBAAiB,mBAAO,CAAC,IAAuB;AAChD,iBAAiB,mBAAO,CAAC,IAAuB;AAChD,iBAAiB,mBAAO,CAAC,IAAuB;AAChD,iBAAiB,mBAAO,CAAC,IAAuB;AAChD,iBAAiB,mBAAO,CAAC,IAAuB;AAChD,kBAAkB,mBAAO,CAAC,IAAwB;AAClD,kBAAkB,mBAAO,CAAC,IAAwB;AAClD,kBAAkB,mBAAO,CAAC,IAAwB;AAClD,eAAe,mBAAO,CAAC,EAAqB;AAC5C,gBAAgB,mBAAO,CAAC,IAAsB;AAC9C,aAAa,mBAAO,CAAC,IAAmB;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,sBAAsB;AAC1F,qEAAqE,uBAAuB;AAC5F;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,8CAA8C,6CAA6C;AAC3F;AACA;AACA;;AAEA;AACA;AACA,UAAU,0CAA0C;AACpD,UAAU,qEAAqE;AAC/E,UAAU,wDAAwD;AAClE,UAAU,yDAAyD;AACnE,UAAU,wDAAwD;AAClE,UAAU,8CAA8C;AACxD,UAAU,8CAA8C;AACxD,UAAU,+DAA+D;AACzE,UAAU,iDAAiD;AAC3D;AACA,mDAAmD,sCAAsC;AACzF;AACA;AACA;AACA;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,wDAAwD;AAClE,UAAU,yDAAyD;AACnE;AACA,mDAAmD,sCAAsC;AACzF;AACA;AACA;AACA;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,+DAA+D;AACzE,UAAU,+DAA+D;AACzE,UAAU,uEAAuE;AACjF,UAAU,uEAAuE;AACjF,UAAU,mFAAmF;AAC7F,UAAU,uFAAuF;AACjG,UAAU,wFAAwF;AAClG;AACA,UAAU,6DAA6D;AACvE,UAAU,6DAA6D;AACvE,UAAU,mEAAmE;AAC7E,UAAU,mEAAmE;AAC7E,UAAU,iFAAiF;AAC3F,UAAU,iFAAiF;AAC3F,UAAU,sFAAsF;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,UAAU,oCAAoC;AAC9C,UAAU,qCAAqC;AAC/C,UAAU,oCAAoC;AAC9C;AACA,UAAU,kCAAkC;AAC5C,UAAU,kCAAkC;AAC5C,UAAU,kCAAkC;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACxFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4DAA4D,WAAW;AACvE;AACA;AACA;AACA;AACA,2BAA2B,wBAAwB;AACnD;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,SAAS;AACzD;AACA;;AAEA,uCAAuC,SAAS;AAChD;AACA,qBAAqB;AACrB;AACA,uDAAuD,OAAO,wBAAwB,QAAQ;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA;AACA;AACA;;;;;;;;AC7FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC1DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACbA,cAAc,mBAAO,CAAC,IAAuB;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,4DAA4D,WAAW;AACvE;AACA;AACA;AACA;AACA,2BAA2B,wBAAwB;AACnD;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,4DAA4D,WAAW;AACvE;AACA;AACA;AACA;AACA,2BAA2B,wBAAwB;AACnD;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4DAA4D,WAAW;AACvE;AACA;AACA;AACA;AACA,2BAA2B,wBAAwB;AACnD;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,2BAA2B;AACzE;;AAEA,uCAAuC,2BAA2B;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,oCAAoC;AACnF;AACA;;AAEA,sCAAsC,oCAAoC;AAC1E;AACA,qBAAqB;AACrB;AACA,uDAAuD,OAAO,wBAAwB,QAAQ;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA,2CAA2C,sBAAsB;AACjE;AACA;AACA;;AAEA,kCAAkC,gBAAgB;AAClD;AACA,qBAAqB,qBAAqB;AAC1C;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA,gDAAgD,sCAAsC;AACtF;AACA;AACA;AACA,uCAAuC,sCAAsC;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,qBAAqB,0BAA0B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACvKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACnBA,uBAAuB,mBAAO,CAAC,IAA2B;AAC1D,mBAAmB,mBAAO,CAAC,IAAuB;AAClD,oBAAoB,mBAAO,CAAC,IAAwB;AACpD,kBAAkB,mBAAO,CAAC,IAAsB;AAChD,oBAAoB,mBAAO,CAAC,IAAwB;AACpD,mCAAmC,mBAAO,CAAC,IAAuC;AAClF,mCAAmC,mBAAO,CAAC,IAAuC;AAClF,oBAAoB,mBAAO,CAAC,IAAwB;AACpD,gBAAgB,mBAAO,CAAC,GAAoB;AAC5C,6BAA6B,mBAAO,CAAC,IAAkC;;AAEvE;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;AC/DA,iBAAiB,mBAAO,CAAC,IAAU;AACnC;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,mBAAmB,gCAAgC;AACnD;AACA;AACA,uCAAuC,gCAAgC;AACvE;AACA;AACA;AACA;AACA;AACA,sEAAsE,kCAAkC;AACxG;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,eAAe;AACf;;AAEA,iBAAiB,+BAA+B;AAChD;AACA,sCAAsC,+BAA+B;AACrE;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,iCAAiC;AACpD;AACA,2BAA2B,iCAAiC;AAC5D;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB,6CAA6C;AAC/D;AACA;AACA;AACA,4BAA4B,6CAA6C;AACzE;AACA;AACA,8BAA8B,6CAA6C;AAC3E;AACA;AACA,4BAA4B,6CAA6C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,uBAAuB;AAC5F,YAAY;AACZ,gEAAgE,uBAAuB;AACvF;AACA;AACA;AACA;;AAEA,uBAAuB,6CAA6C;AACpE;AACA,sDAAsD,WAAW;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,UAAU,EAAE,SAAS;AAC/C,QAAQ;AACR,0BAA0B,aAAa,EAAE,SAAS;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,0BAA0B;AACzE,2CAA2C,YAAY;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,2BAA2B,cAAc;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,SAAS;AACT,QAAQ;AACR;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,OAAO;AAC5B;AACA;AACA;;AAEA,oBAAoB,YAAY;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,+BAA+B;AAClD;AACA,sDAAsD,WAAW;;AAEjE;AACA;AACA;AACA,4DAA4D,+CAA+C;AAC3G;AACA;AACA,4DAA4D,gDAAgD;AAC5G;;AAEA;AACA,2BAA2B,+BAA+B;;AAE1D;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,cAAc,IAAI,iBAAiB;AAClE;AACA;AACA;AACA;AACA;;;;;;;;AC1SA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;;;;;;;AC3BA,aAAa,mBAAO,CAAC,IAAM;AAC3B,iBAAiB,mBAAO,CAAC,IAAU;AACnC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;;AAEA;AACA;AACA,qCAAqC,2CAA2C;AAChF;;AAEA;AACA;AACA,qCAAqC,oDAAoD;AACzF;;AAEA;AACA,aAAa,QAAQ;AACrB,qCAAqC,8BAA8B,UAAU;AAC7E;;AAEA,qBAAqB,mCAAmC;AACxD;AACA,gBAAgB,UAAU,IAAI,iBAAiB,IAAI,wBAAwB;AAC3E;;AAEA,2BAA2B,mCAAmC;AAC9D,+CAA+C,mCAAmC;AAClF;AACA;AACA;AACA;AACA;;AAEA,mCAAmC,6CAA6C;AAChF,mDAAmD,mCAAmC;AACtF;AACA;AACA;AACA;AACA;;AAEA;AACA,yBAAyB,oBAAoB;AAC7C;AACA,mDAAmD,sDAAsD;AACzG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,uDAAuD;AACvE;AACA;AACA;AACA;AACA;AACA,+DAA+D,6CAA6C;AAC5G,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,sBAAsB,gCAAgC;AACtD,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA,oBAAoB,gCAAgC;AACpD;AACA;AACA;AACA;AACA,yBAAyB,iBAAiB,GAAG,wBAAwB;AACrE;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;;AAEA;AACA;AACA;AACA,uDAAuD,QAAQ,oBAAoB,uBAAuB;AAC1G;AACA;AACA;;AAEA;AACA;AACA,mEAAmE,MAAM;AACzE,0BAA0B,eAAe;AACzC;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACnNA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;;;;;;;AC3FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AClDA;AACA,WAAW,mBAAO,CAAC,IAAmB;AACtC,WAAW,mBAAO,CAAC,IAAmB;AACtC;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACzCA,eAAe,mBAAO,CAAC,IAAiB;AACxC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACrEA,uBAAuB,mBAAO,CAAC,IAA6B;;AAE5D;AACA;AACA;AACA;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChEA;AACA;AACA;AACA;AACA;AACA,UAAU,8DAA8D;AACxE,UAAU,+DAA+D;AACzE;AACA,KAAK;AACL;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,eAAe;AACf;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,iBAAiB;AACjB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,iBAAiB;AACjB,eAAe;AACf;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC1EA,0BAA0B,mBAAO,CAAC,IAA+B;AACjE,0BAA0B,mBAAO,CAAC,IAA+B;AACjE,6BAA6B,mBAAO,CAAC,IAAkC;;AAEvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;ACpCA;AACA;AACA;AACA;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;;AAEA;AACA;;;;;;;;ACtIA,cAAc,mBAAO,CAAC,IAAoB;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,4CAA4C;AAClG;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;;;;;;;ACnCA,cAAc,mBAAO,CAAC,IAAoB;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,0BAA0B;AAChF;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA,gBAAgB,UAAU;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,oBAAoB;AACpC,OAAO;AACP;AACA;AACA,8CAA8C,WAAW;AACzD;AACA,yCAAyC,UAAU;AACnD;AACA;AACA;AACA,sBAAsB,gBAAgB;AACtC,YAAY,2CAA2C;AACvD,4BAA4B,4CAA4C;AACxE,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,2BAA2B,qBAAqB;AAChD,iBAAiB,kBAAkB;AACnC,6BAA6B,iBAAiB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA,gBAAgB,UAAU;AAC1B;AACA;AACA;AACA;AACA;AACA,gBAAgB,oBAAoB;AACpC,OAAO;AACP;AACA;AACA,8CAA8C,WAAW;AACzD;AACA,yCAAyC,UAAU;AACnD;AACA;AACA;AACA,mCAAmC,gBAAgB;AACnD,YAAY,2CAA2C;AACvD,4BAA4B,4CAA4C;AACxE,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,UAAU,uCAAuC;AACjD;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,iBAAiB,iBAAiB;AAClC,6BAA6B,gBAAgB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;;AAEA;AACA;AACA;AACA;AACA,kEAAkE,OAAO,QAAQ,gBAAgB;AACjG;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,UAAU;AAC1B;AACA;AACA;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA,4DAA4D,yBAAyB;AACrF;AACA,8CAA8C,WAAW;AACzD;AACA,yCAAyC,UAAU;AACnD;AACA;AACA;AACA,mCAAmC,iBAAiB;AACpD,YAAY,0CAA0C;AACtD,4BAA4B,uCAAuC;AACnE,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,UAAU,0CAA0C;AACpD;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,iBAAiB,eAAe;AAChC,6BAA6B,cAAc;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;;;;;;;;AC/MA,cAAc,mBAAO,CAAC,IAAoB;;AAE1C;AACA;AACA;AACA;AACA;AACA,mEAAmE,WAAW;AAC9E,yBAAyB,MAAM;AAC/B;;AAEA;AACA;AACA,+DAA+D,WAAW;AAC1E,yBAAyB,MAAM;AAC/B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,yBAAyB,MAAM;AAC/B;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,yBAAyB,MAAM;AAC/B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,iCAAiC;AAClF,yBAAyB,YAAY;AACrC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,uBAAuB;AACzE,yBAAyB,YAAY;AACrC;;AAEA;AACA;AACA,6DAA6D,WAAW;AACxE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;;;;;;;ACvHA,gBAAgB,mBAAO,CAAC,IAAyB;AACjD,eAAe,mBAAO,CAAC,GAAwB;AAC/C,aAAa,mBAAO,CAAC,IAAsB;AAC3C,gBAAgB,mBAAO,CAAC,IAAyB;AACjD,YAAY,mBAAO,CAAC,IAAqB;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACfA,eAAe,mBAAO,CAAC,IAAoB;AAC3C,gBAAgB,mBAAO,CAAC,EAAqB;AAC7C,eAAe,mBAAO,CAAC,IAAoB;AAC3C,kBAAkB,mBAAO,CAAC,IAAqB;AAC/C,sBAAsB,mBAAO,CAAC,IAAyB;;AAEvD;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,gBAAgB,mBAAO,CAAC,IAAY;AACpC;AACA,iBAAiB,mBAAO,CAAC,IAAa;AACtC;AACA,sBAAsB,mBAAO,CAAC,IAAkB;AAChD;AACA,mBAAmB,mBAAO,CAAC,IAAe;AAC1C;AACA,iBAAiB,mBAAO,CAAC,IAAa;AACtC;AACA,eAAe,mBAAO,CAAC,GAAW;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACvCA;AACA;AACA,mBAAmB,mBAAO,CAAC,IAAiC;AAC5D,kBAAkB,mBAAO,CAAC,IAAgC;AAC1D,8BAA8B,mBAAO,CAAC,IAAkC;AACxE,qBAAqB,mBAAO,CAAC,IAAyB;AACtD,yBAAyB,mBAAO,CAAC,IAA6B;AAC9D,0BAA0B,mBAAO,CAAC,IAA8B;AAChE,wBAAwB,mBAAO,CAAC,IAA4B;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,eAAe;AACf,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,iBAAiB;AACvC;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA,yBAAyB;AACzB,KAAK;AACL;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;;;;;;;;ACtGA;AACA;AACA;AACA,mBAAmB,iCAAiC,yBAAyB;AAC7E;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA,mBAAmB,iCAAiC,yBAAyB;AAC7E;AACA;AACA;AACA;;;;;;;;ACPA,gBAAgB,mBAAO,CAAC,IAAoB;AAC5C,gBAAgB,mBAAO,CAAC,IAAoB;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACTA;AACA;AACA;AACA,MAAM,6DAA6D;AACnE,MAAM,oEAAoE;AAC1E;AACA,MAAM,4DAA4D;AAClE;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS,iDAAiD;AACxE,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS,4DAA4D;AACnF,KAAK;AACL;AACA;AACA;AACA;AACA,cAAc,SAAS,4DAA4D;AACnF,KAAK;AACL;AACA;AACA;AACA;AACA,cAAc,SAAS,4DAA4D;AACnF,KAAK;AACL;AACA;AACA;AACA;AACA,cAAc,SAAS,4DAA4D;AACnF,KAAK;AACL;AACA;AACA;AACA;AACA,cAAc,SAAS,4DAA4D;AACnF,KAAK;AACL;AACA;AACA;AACA;AACA,cAAc,SAAS,4DAA4D;AACnF,KAAK;AACL;AACA;AACA;AACA;AACA,cAAc,SAAS,4DAA4D;AACnF,KAAK;AACL;AACA;AACA;AACA;AACA,cAAc,SAAS,4DAA4D;AACnF,KAAK;AACL,MAAM,+DAA+D;AACrE,MAAM,yDAAyD;AAC/D;AACA;AACA;AACA;AACA,cAAc,SAAS,4DAA4D;AACnF,KAAK;AACL;AACA,MAAM,wGAAwG;AAC9G;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,MAAM,qGAAqG;AAC3G;AACA,MAAM,4DAA4D;AAClE;AACA;AACA;;;;;;;;ACpFA;AACA;AACA,0BAA0B,yBAAyB;AACnD,4DAA4D,yBAAyB;AACrF;;AAEA;AACA,4BAA4B,4BAA4B;AACxD,8DAA8D,4BAA4B;AAC1F;AACA;;AAEA;AACA;;;;;;;;ACbA;AACA;AACA,oBAAoB,8BAA8B;AAClD,oDAAoD,8BAA8B;AAClF;;AAEA,8BAA8B,WAAW;AACzC,8DAA8D,WAAW;AACzE;;AAEA,0BAA0B,WAAW;AACrC,0DAA0D,WAAW;AACrE;;AAEA;AACA,0BAA0B,iBAAiB;AAC3C,0DAA0D,iBAAiB;AAC3E;;AAEA,qCAAqC,qBAAqB;AAC1D,qEAAqE,qBAAqB;AAC1F;;AAEA,8BAA8B,qBAAqB;AACnD,8DAA8D,qBAAqB;AACnF;;AAEA;AACA,8BAA8B,2BAA2B;AACzD,8DAA8D,2BAA2B;AACzF;;AAEA,yBAAyB,WAAW;AACpC,yDAAyD,WAAW;AACpE;;AAEA,mBAAmB,2BAA2B;AAC9C,mDAAmD,2BAA2B;AAC9E;;AAEA,0BAA0B,uBAAuB;AACjD,mDAAmD,uBAAuB;AAC1E;;AAEA,yBAAyB,iCAAiC;AAC1D,kDAAkD,iCAAiC;AACnF;;AAEA,qBAAqB,sBAAsB;AAC3C,qDAAqD,sBAAsB;AAC3E;;AAEA,sBAAsB,2BAA2B;AACjD,sDAAsD,2BAA2B;AACjF;AACA;;AAEA;AACA;;;;;;;;AC1DA,eAAe,mBAAO,CAAC,IAAqB;AAC5C,aAAa,mBAAO,CAAC,IAAmB;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACTA;;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;UEtBA;UACA;UACA;UACA","sources":["webpack://egg-born-module-a-cms/./backend/src/bean/atom.article.js","webpack://egg-born-module-a-cms/./backend/src/bean/bean.cms.js","webpack://egg-born-module-a-cms/./backend/src/bean/io.message.hotloadFile.js","webpack://egg-born-module-a-cms/./backend/src/bean/local.build.js","webpack://egg-born-module-a-cms/./backend/src/bean/local.render.js","webpack://egg-born-module-a-cms/./backend/src/bean/local.site.js","webpack://egg-born-module-a-cms/./backend/src/bean/queue.render.js","webpack://egg-born-module-a-cms/./backend/src/bean/startup.registerAllWatchers.js","webpack://egg-born-module-a-cms/./backend/src/bean/startup.registerDevelopment.js","webpack://egg-born-module-a-cms/./backend/src/bean/version.manager.js","webpack://egg-born-module-a-cms/./backend/src/bean/version.manager_0.js","webpack://egg-born-module-a-cms/./backend/src/bean/version/init_1.js","webpack://egg-born-module-a-cms/./backend/src/bean/version/init_12.js","webpack://egg-born-module-a-cms/./backend/src/bean/version/test.js","webpack://egg-born-module-a-cms/./backend/src/bean/version/update_1.js","webpack://egg-born-module-a-cms/./backend/src/bean/version/update_10.js","webpack://egg-born-module-a-cms/./backend/src/bean/version/update_11.js","webpack://egg-born-module-a-cms/./backend/src/bean/version/update_12.js","webpack://egg-born-module-a-cms/./backend/src/bean/version/update_2.js","webpack://egg-born-module-a-cms/./backend/src/bean/version/update_3.js","webpack://egg-born-module-a-cms/./backend/src/bean/version/update_4.js","webpack://egg-born-module-a-cms/./backend/src/bean/version/update_5.js","webpack://egg-born-module-a-cms/./backend/src/bean/version/update_6.js","webpack://egg-born-module-a-cms/./backend/src/bean/version/update_7.js","webpack://egg-born-module-a-cms/./backend/src/bean/version/update_8.js","webpack://egg-born-module-a-cms/./backend/src/bean/version/update_9.js","webpack://egg-born-module-a-cms/./backend/src/beans.js","webpack://egg-born-module-a-cms/./backend/src/common/AtomCmsBase.js","webpack://egg-born-module-a-cms/./backend/src/common/utils.js","webpack://egg-born-module-a-cms/./backend/src/common/watcher.js","webpack://egg-born-module-a-cms/./backend/src/config/config.js","webpack://egg-born-module-a-cms/./backend/src/config/errors.js","webpack://egg-born-module-a-cms/./backend/src/config/locale/en-us.js","webpack://egg-born-module-a-cms/./backend/src/config/locale/zh-cn.js","webpack://egg-born-module-a-cms/./backend/src/config/locales.js","webpack://egg-born-module-a-cms/./backend/src/config/socketio/hotloadFile.js","webpack://egg-born-module-a-cms/./backend/src/config/static/app/appCms.js","webpack://egg-born-module-a-cms/./backend/src/config/static/apps.js","webpack://egg-born-module-a-cms/./backend/src/config/static/flowDef/articlePublish.js","webpack://egg-born-module-a-cms/./backend/src/config/static/flowDefs.js","webpack://egg-born-module-a-cms/./backend/src/config/static/layout/layoutAppMenuCmsBase.js","webpack://egg-born-module-a-cms/./backend/src/config/static/layout/layoutAtomItemCms.js","webpack://egg-born-module-a-cms/./backend/src/config/static/layout/layoutAtomListCms.js","webpack://egg-born-module-a-cms/./backend/src/config/static/layouts.js","webpack://egg-born-module-a-cms/./backend/src/config/static/resources.js","webpack://egg-born-module-a-cms/./backend/src/config/validation/keywords.js","webpack://egg-born-module-a-cms/./backend/src/config/validation/schemas.js","webpack://egg-born-module-a-cms/./backend/src/controller/article.js","webpack://egg-born-module-a-cms/./backend/src/controller/comment.js","webpack://egg-born-module-a-cms/./backend/src/controller/render.js","webpack://egg-born-module-a-cms/./backend/src/controller/rss.js","webpack://egg-born-module-a-cms/./backend/src/controller/site.js","webpack://egg-born-module-a-cms/./backend/src/controllers.js","webpack://egg-born-module-a-cms/./backend/src/main.js","webpack://egg-born-module-a-cms/./backend/src/meta.js","webpack://egg-born-module-a-cms/./backend/src/model/article.js","webpack://egg-born-module-a-cms/./backend/src/model/content.js","webpack://egg-born-module-a-cms/./backend/src/models.js","webpack://egg-born-module-a-cms/./backend/src/routes.js","webpack://egg-born-module-a-cms/./backend/src/service/render.js","webpack://egg-born-module-a-cms/./backend/src/service/site.js","webpack://egg-born-module-a-cms/./backend/src/services.js","webpack://egg-born-module-a-cms/external commonjs2 \"require3\"","webpack://egg-born-module-a-cms/external node-commonjs \"path\"","webpack://egg-born-module-a-cms/webpack/bootstrap","webpack://egg-born-module-a-cms/webpack/before-startup","webpack://egg-born-module-a-cms/webpack/startup","webpack://egg-born-module-a-cms/webpack/after-startup"],"sourcesContent":["module.exports = app => {\n  class Atom extends app.meta.AtomCmsBase {\n    async create({ atomClass, item, options, user }) {\n      // super\n      const key = await super.create({ atomClass, item, options, user });\n      return { atomId: key.atomId };\n    }\n\n    async read({ atomClass, options, key, user }) {\n      // super\n      const item = await super.read({ atomClass, options, key, user });\n      if (!item) return null;\n      // ok\n      return item;\n    }\n\n    async select({ atomClass, options, items, user }) {\n      // super\n      await super.select({ atomClass, options, items, user });\n    }\n\n    async write({ atomClass, target, key, item, options, user }) {\n      // super\n      await super.write({ atomClass, target, key, item, options, user });\n    }\n\n    async delete({ atomClass, key, options, user }) {\n      // super\n      await super.delete({ atomClass, key, options, user });\n    }\n  }\n\n  return Atom;\n};\n","module.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Cms {\n    get render() {\n      return ctx.bean._getBean(moduleInfo.relativeName, 'local.render');\n    }\n\n    get site() {\n      return ctx.bean._getBean(moduleInfo.relativeName, 'local.site');\n    }\n\n    build({ atomClass }) {\n      return ctx.bean._newBean(`${moduleInfo.relativeName}.local.build`, atomClass);\n    }\n  }\n\n  return Cms;\n};\n","module.exports = ctx => {\n  class IOMessage extends ctx.app.meta.IOMessageBase(ctx) {}\n  return IOMessage;\n};\n","const path = require('path');\nconst require3 = require('require3');\nconst ejs = require3('@zhennann/ejs');\nconst pMap = require3('p-map');\nconst fse = require3('fs-extra');\nconst moment = require3('moment');\nconst eggBornUtils = require3('egg-born-utils');\nconst CleanCSS = require3('clean-css');\nconst shajs = require3('sha.js');\nconst babel = require3('@babel/core');\nconst UglifyJS = require3('uglify-js');\nconst less = require3('less');\nconst utils = require('../common/utils.js');\n\nmodule.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Build extends app.meta.BeanBase {\n    constructor(ctx, atomClass) {\n      super(ctx);\n      this.atomClass = utils.atomClass(atomClass);\n      this.default = this.atomClass.module === 'a-cms';\n    }\n\n    get moduleConfig() {\n      return this.ctx.config.module(moduleInfo.relativeName);\n    }\n\n    get beanStatus() {\n      return this.ctx.bean.status.module(moduleInfo.relativeName);\n    }\n\n    async getConfigSiteBase() {\n      // config\n      //    try other then default\n      const configModule = this.ctx.config.module(this.atomClass.module);\n      let configSite = this.ctx.bean.util.getProperty(configModule, `cms.sites.${this.atomClass.atomClassName}`);\n      if (!configSite) {\n        configSite = this.ctx.bean.util.getProperty(configModule, 'cms.site');\n      }\n      if (!configSite) {\n        configSite = this.moduleConfig.cms.site;\n      }\n\n      // site\n      const site = this.ctx.bean.util.extend({}, configSite);\n\n      // plugins\n      site.plugins = {};\n      for (const relativeName in this.app.meta.modules) {\n        const module = this.app.meta.modules[relativeName];\n        const plugin = this.ctx.bean.util.getProperty(module, 'package.eggBornModule.cms.plugin');\n        if (plugin) {\n          site.plugins[relativeName] = this.ctx.config.module(relativeName).plugin;\n        }\n      }\n      return site;\n    }\n\n    async getConfigSite() {\n      const name = `config-site:${this.atomClass.module}:${this.atomClass.atomClassName}`;\n      return await this.beanStatus.get(name);\n    }\n\n    async setConfigSite({ data }) {\n      const name = `config-site:${this.atomClass.module}:${this.atomClass.atomClassName}`;\n      await this.beanStatus.set(name, data);\n    }\n\n    async getConfigLanguage({ language }) {\n      language = language || 'default';\n      const name = `config-${language}:${this.atomClass.module}:${this.atomClass.atomClassName}`;\n      return await this.beanStatus.get(name);\n    }\n\n    async setConfigLanguage({ language, data }) {\n      language = language || 'default';\n      const name = `config-${language}:${this.atomClass.module}:${this.atomClass.atomClassName}`;\n      this._adjustConfigLanguange(data);\n      await this.beanStatus.set(name, data);\n    }\n\n    async getConfigLanguagePreview({ language }) {\n      const site = await this.getSite({ language });\n      this._adjustConfigLanguange(site);\n      return site;\n    }\n\n    _adjustConfigLanguange(data) {\n      if (data) {\n        data.host = undefined;\n        data.language = undefined;\n        data.themes = undefined;\n      }\n    }\n\n    _getThemeName({ site, language }) {\n      const atomClass = site.atomClass || this.atomClass;\n      let themeName = site.themes[language || 'default'];\n      if (!themeName) {\n        // // log info\n        // const error = this.ctx.parseFail.module(moduleInfo.relativeName, 1002, atomClass.module, atomClass.atomClassName, language);\n        // this.ctx.logger.info(error.message);\n        // use default\n        if (site.language) {\n          language = site.language.default;\n          themeName = site.themes[language];\n        } else {\n          themeName = site.themes.default;\n        }\n      }\n      // throw error if empty either\n      if (!themeName) {\n        this.ctx.throw.module(moduleInfo.relativeName, 1002, atomClass.module, atomClass.atomClassName, language);\n      }\n      // ok\n      return { themeName, language };\n    }\n\n    async getLanguages() {\n      const siteBase = await this.combineSiteBase();\n      if (!siteBase.language) return [];\n      const languages = [];\n      for (const item of siteBase.language.items.split(',')) {\n        languages.push({\n          title: this.ctx.text(item),\n          value: item,\n        });\n      }\n      return languages;\n    }\n\n    // site<plugin<theme<site(db)<language(db)\n    async combineSiteBase(options) {\n      const mergeConfigSite = options && options.mergeConfigSite;\n      // site\n      let site = await this.getConfigSiteBase();\n      // site(db) special for language/themes\n      const configSite = await this.getConfigSite();\n      if (configSite) {\n        if (mergeConfigSite) {\n          site = this.ctx.bean.util.extend(site, configSite);\n        } else {\n          if (configSite.language) site.language = configSite.language;\n          if (configSite.themes) site.themes = configSite.themes;\n        }\n      }\n      return site;\n    }\n\n    // site<plugin<theme<site(db)<language(db)\n    async combineSite({ siteBase, language }) {\n      // themeName\n      const __themeName = this._getThemeName({ site: siteBase, language });\n      const themeName = __themeName.themeName;\n      language = __themeName.language;\n      // theme\n      const theme = this.combineThemes(themeName);\n      // site(db)\n      const configSite = await this.getConfigSite();\n      // language(db)\n      const configLanguage = await this.getConfigLanguage({ language });\n      // combine\n      return this.ctx.bean.util.extend({}, siteBase, theme, configSite, configLanguage, {\n        language: language ? { current: language } : false,\n      });\n    }\n\n    // theme extend\n    combineThemes(themeModuleName) {\n      return this._combineThemes(themeModuleName);\n    }\n\n    _combineThemes(themeModuleName) {\n      // module\n      const module = this.app.meta.modules[themeModuleName];\n      if (!module) this.ctx.throw.module(moduleInfo.relativeName, 1003, themeModuleName);\n      const moduleExtend = this.ctx.bean.util.getProperty(module, 'package.eggBornModule.cms.extend');\n      if (!moduleExtend) return this.ctx.config.module(themeModuleName).theme;\n      return this.ctx.bean.util.extend(\n        {},\n        this._combineThemes(moduleExtend),\n        this.ctx.config.module(themeModuleName).theme\n      );\n    }\n\n    // site<plugin<theme<site(db)<language(db)\n    async getSite({ language, options }) {\n      // options\n      options = options || {};\n      // base\n      const siteBase = await this.combineSiteBase();\n      // site\n      const site = await this.combineSite({ siteBase, language });\n      // serverUrl\n      site.serverUrl = this.getServerUrl('');\n      // atomClass\n      site.atomClass = this.atomClass;\n      // languages\n      site.languages = [];\n      if (site.language) {\n        for (const item of site.language.items.split(',')) {\n          site.languages.push({\n            name: item,\n            title: this.ctx.text.locale(item, item),\n            url: this.getUrl(site, item, 'index.html'),\n          });\n        }\n      }\n      // front\n      site.front = {};\n      // front.env\n      site.front.env = this.ctx.bean.util.extend(\n        {\n          base: site.base,\n          language: site.language,\n        },\n        site.env,\n        {\n          site: {\n            serverUrl: site.serverUrl,\n            rawRootUrl: this.getUrlRawRoot(site),\n            atomClass: this.atomClass,\n          },\n        }\n      );\n      // front.envs\n      if (options.envs !== false) {\n        const envs = await this.getFrontEnvs({ language });\n        if (Object.keys(envs).length > 0) {\n          site.front.envs = envs;\n        }\n      }\n\n      // ok\n      return site;\n    }\n\n    // ////////////////////////////// url or path\n\n    getCMSPathName() {\n      return this.default ? 'cms' : `cms.${this.atomClass.module}.${this.atomClass.atomClassName}`;\n    }\n\n    getUrlRawRoot(site) {\n      if (this.ctx.app.meta.isTest || this.ctx.app.meta.isLocal) {\n        // cms or cms.moduleName\n        const cmsPathName = this.getCMSPathName();\n        const forwardUrl = this.ctx.bean.base.getForwardUrl(`${cmsPathName}/dist`);\n        const absoluteUrl = this.ctx.bean.base.getAbsoluteUrl(forwardUrl);\n        return absoluteUrl;\n      }\n      return `${site.host.url}${site.host.rootPath ? '/' + site.host.rootPath : ''}`;\n    }\n    getUrlRoot(site, language) {\n      const rawRoot = this.getUrlRawRoot(site);\n      return `${rawRoot}${!site.language || language === site.language.default ? '' : '/' + language}`;\n    }\n    getUrl(site, language, path) {\n      const urlRoot = this.getUrlRoot(site, language);\n      return path ? `${urlRoot}/${path}` : urlRoot;\n    }\n    getServerUrl(path) {\n      return this.ctx.bean.base.getAbsoluteUrl(path);\n    }\n\n    async getPathCustom(language) {\n      language = language || 'default';\n      const cms = await this.getPathCms();\n      return path.join(cms, language, 'custom');\n    }\n    async getPathIntermediate(language) {\n      language = language || 'default';\n      const cms = await this.getPathCms();\n      return path.join(cms, language, 'intermediate');\n    }\n    async getPathDist(site, language) {\n      const rawDist = await this.getPathRawDist();\n      return path.join(rawDist, !site.language || language === site.language.default ? '' : '/' + language);\n    }\n    async getPathCms() {\n      // cms\n      return await this.ctx.bean.base.getPath(this.getCMSPathName());\n    }\n    async getPathRawDist() {\n      // cms/dist\n      return await this.ctx.bean.base.getPath(`${this.getCMSPathName()}/dist`);\n    }\n\n    // ///////////////////////////////// render\n\n    async renderAllFiles({ language, progressId, progressNo }) {\n      // clearCache\n      ejs.clearCache();\n      // site\n      const site = await this.getSite({ language });\n      site.render = { scene: 'all' };\n      // render static\n      await this._renderStatic({ site });\n      // render articles\n      await this._renderArticles({ site, progressId, progressNo });\n      // render index\n      await this._renderIndex({ site });\n    }\n\n    async renderArticle({ key, inner }) {\n      // article\n      let article = await this.ctx.bean.cms.render.getArticle({ key, inner });\n      if (!article) {\n        if (inner) return;\n        // check for inner\n        article = await this.ctx.bean.cms.render.getArticle({ key, inner: true });\n        if (!article) return;\n        inner = true;\n      }\n      // clearCache\n      ejs.clearCache();\n      // site\n      const site = await this.getSite({ language: article.atomLanguage });\n      // check if build site first\n      const siteBuilt = await this._checkIfSiteBuilt({ site, force: true });\n      if (!siteBuilt) return; // not throw error\n      // render scene\n      site.render = { scene: 'single', inner };\n      // render article\n      await this._renderArticle({ site, article });\n      if (!inner) {\n        // write sitemap\n        await this._writeSitemap({ site, article });\n        // render index\n        await this._renderIndex({ site });\n      }\n    }\n\n    async deleteArticle({ /* key,*/ article, inner }) {\n      // maybe not rendered\n      if (!article.url) return;\n      // maybe site.language is false\n      // // same logic with renderArticle\n      // if (!article.atomLanguage) {\n      //   article.atomLanguage = this.ctx.locale;\n      // }\n      // clearCache\n      ejs.clearCache();\n      // site\n      const site = await this.getSite({ language: article.atomLanguage });\n      // check if build site first\n      const siteBuilt = await this._checkIfSiteBuilt({ site, force: false });\n      if (!siteBuilt) return; // not throw error\n      // remove file\n      const pathDist = await this.getPathDist(site, article.atomLanguage);\n      await fse.remove(path.join(pathDist, article.url));\n      if (!inner) {\n        // remove sitemap\n        let xml = await fse.readFile(path.join(pathDist, 'sitemap.xml'));\n        const regexp = new RegExp(` {2}<url>\\\\s+<loc>[^<]*${article.url}[^<]*</loc>[\\\\s\\\\S]*?</url>[\\\\r\\\\n]`);\n        xml = xml.toString().replace(regexp, '');\n        // save\n        await fse.writeFile(path.join(pathDist, 'sitemap.xml'), xml);\n        // render index\n        await this._renderIndex({ site });\n      }\n    }\n\n    async _renderArticles({ site, progressId, progressNo }) {\n      // anonymous user\n      const user = await this.ctx.bean.user.anonymous();\n      // articles\n      const articles = await this.ctx.bean.atom.select({\n        atomClass: this.atomClass,\n        options: {\n          language: site.language ? site.language.current : null,\n          orders: [['a.updatedAt', 'desc']],\n          page: null,\n          mode: 'search',\n          stage: 'formal',\n        },\n        user: { id: user.id },\n        pageForce: false,\n      });\n\n      // progress\n      const progress1_Total = articles.length;\n      let progress1_progress = 0;\n\n      // concurrency\n      const mapper = async article => {\n        // progress: initialize\n        if (progressId) {\n          await this.ctx.bean.progress.update({\n            progressId,\n            progressNo,\n            total: progress1_Total,\n            progress: progress1_progress++,\n            text: article.atomName,\n          });\n        }\n        // render article\n        await this._renderArticle({ site, article });\n      };\n      await pMap(articles, mapper, { concurrency: 10 });\n      // write sitemap\n      await this._writeSitemaps({ site, articles });\n    }\n\n    async _renderArticle({ site, article }) {\n      // data\n      const data = await this.getData({ site });\n      data.article = article;\n      // render\n      await this._renderFile({\n        fileSrc: 'main/article.ejs',\n        fileDest: article.url,\n        fileDestAlt: `articles/${article.uuid}.html`,\n        data,\n      });\n    }\n\n    async _renderIndex({ site }) {\n      // index\n      const pathIntermediate = await this.getPathIntermediate(site.language && site.language.current);\n      const indexFiles = await eggBornUtils.tools.globbyAsync(`${pathIntermediate}/main/index/**/*.ejs`);\n      for (const item of indexFiles) {\n        // data\n        const data = await this.getData({ site });\n        // path\n        const _fileSrc = item.substr(pathIntermediate.length + 1);\n        let _fileDest = _fileSrc.substr('main/index/'.length).replace('.ejs', '');\n        if (_fileDest.indexOf('.') === -1) {\n          _fileDest = `${_fileDest}.html`;\n        }\n        await this._renderFile({\n          fileSrc: _fileSrc,\n          fileDest: _fileDest,\n          data,\n        });\n      }\n    }\n\n    async _writeSitemaps({ site, articles }) {\n      // xml\n      let xml = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n`;\n      for (const article of articles) {\n        const loc = this.getUrl(site, site.language && site.language.current, article.url);\n        const lastmod = moment(article.updatedAt).format();\n        xml += `  <url>\n    <loc>${loc}</loc>\n    <lastmod>${lastmod}</lastmod>\n  </url>\n`;\n      }\n      xml += '</urlset>';\n      // save\n      const pathDist = await this.getPathDist(site, site.language && site.language.current);\n      const fileName = path.join(pathDist, 'sitemap.xml');\n      await fse.writeFile(fileName, xml);\n    }\n\n    async _writeSitemap({ site, article }) {\n      const loc = this.getUrl(site, site.language && site.language.current, article.url);\n      const lastmod = moment(article.updatedAt).format();\n      // load\n      const pathDist = await this.getPathDist(site, site.language && site.language.current);\n      const fileName = path.join(pathDist, 'sitemap.xml');\n      let xml;\n      const exists = await fse.pathExists(fileName);\n      if (!exists) {\n        xml = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n  <url>\n    <loc>${loc}</loc>\n    <lastmod>${lastmod}</lastmod>\n  </url>\n</urlset>`;\n      } else {\n        xml = await fse.readFile(fileName);\n        xml = xml.toString();\n        // remove\n        const regexp = new RegExp(` {2}<url>\\\\s+<loc>[^<]*${article.url}[^<]*</loc>[\\\\s\\\\S]*?</url>[\\\\r\\\\n]`);\n        xml = xml.replace(regexp, '');\n        // append\n        xml = xml.replace(\n          '<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">',\n          `<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n  <url>\n    <loc>${loc}</loc>\n    <lastmod>${lastmod}</lastmod>\n  </url>`\n        );\n      }\n      // save\n      await fse.writeFile(fileName, xml);\n    }\n\n    async _renderStatic({ site }) {\n      // static\n      const pathIntermediate = await this.getPathIntermediate(site.language && site.language.current);\n      const staticFiles = await eggBornUtils.tools.globbyAsync(`${pathIntermediate}/static/**/*.ejs`);\n      for (const item of staticFiles) {\n        // data\n        const data = await this.getData({ site });\n        // path\n        const _fileSrc = item.substr(pathIntermediate.length + 1);\n        let _fileDest = _fileSrc.replace('.ejs', '');\n        if (_fileDest.indexOf('.') === -1) {\n          _fileDest = `${_fileDest}.html`;\n        }\n        await this._renderFile({\n          fileSrc: _fileSrc,\n          fileDest: _fileDest,\n          data,\n        });\n      }\n    }\n\n    async _renderFile({ fileSrc, fileDest, fileDestAlt, data }) {\n      // site\n      const site = data.site;\n      // language\n      const language = site.language && site.language.current;\n      // src\n      const pathIntermediate = await this.getPathIntermediate(language);\n      const fileName = path.join(pathIntermediate, fileSrc);\n      // dest\n      const pathDist = await this.getPathDist(site, language);\n      const fileWrite = path.join(pathDist, fileDest);\n      // data\n      data._filename = fileName;\n      data._path = fileSrc.replace('.ejs', '');\n      // env site\n      data.env('site.path', data._path);\n      // destFile for hot load\n      let hotloadFile;\n      if (data.article) {\n        hotloadFile = `atom/${data.article.atomId}`;\n        // update renderAt\n        data.article.renderAt = new Date(this.ctx.bean.util.moment().unix() * 1000);\n      } else {\n        if ((this.app.meta.isTest || this.app.meta.isLocal) && fileDest.indexOf('.html') > -1) {\n          hotloadFile = fileWrite;\n          data.env('site.hotloadFile', hotloadFile);\n        }\n      }\n      // load src\n      let contentSrc = await fse.readFile(fileName);\n      contentSrc = contentSrc ? contentSrc.toString() : '';\n      // load includes of plugins\n      const pluginIncludes = await this._loadPluginIncludes({ site, language });\n      contentSrc = `${pluginIncludes}\\n${contentSrc}`;\n      // render\n      const options = this.getOptions();\n      options.filename = fileName;\n      let content = await ejs.render(contentSrc, data, options);\n      content = await this._renderEnvs({ data, content });\n      content = await this._renderCSSJSes({ data, content });\n      // write\n      await fse.outputFile(fileWrite, content);\n      // alternative url\n      if (fileDestAlt && fileDestAlt !== fileDest) {\n        const fileWriteAlt = path.join(pathDist, fileDestAlt);\n        await fse.outputFile(fileWriteAlt, content);\n      }\n      // renderAt must be updated after file rendered\n      if (data.article) {\n        // update renderAt\n        await this.ctx.model.query(\n          `\n          update aCmsArticle set renderAt=?\n            where iid=? and atomId=?\n          `,\n          [data.article.renderAt, this.ctx.instance.id, data.article.atomId]\n        );\n      }\n      // socketio publish\n      if (hotloadFile) {\n        await this._socketioPublish({ hotloadFile, article: data.article });\n      }\n    }\n\n    async _socketioPublish({ hotloadFile, article }) {\n      const message = {\n        userIdTo: -1,\n        content: {\n          mtime: new Date(),\n          article,\n        },\n      };\n      await this.ctx.bean.io.publish({\n        path: `/a/cms/hotloadFile/${hotloadFile}`,\n        message,\n        messageClass: {\n          module: 'a-cms',\n          messageClassName: 'hotloadFile',\n        },\n      });\n    }\n\n    _checkIfPluginEnable({ site, moduleName }) {\n      const config = site.plugins[moduleName];\n      return !config || !config.disabled;\n    }\n\n    async _loadPluginIncludes({ site, language }) {\n      // if exists\n      if (site._pluginIncludes) return site._pluginIncludes;\n      // modulesArray\n      let pluginIncludes = '';\n      for (const module of this.app.meta.modulesArray) {\n        const plugin = this.ctx.bean.util.getProperty(module, 'package.eggBornModule.cms.plugin');\n        if (plugin && this._checkIfPluginEnable({ site, moduleName: module.info.relativeName })) {\n          // path intermediate\n          const pathIntermediate = await this.getPathIntermediate(language);\n          let incudeFileName = path.join(pathIntermediate, `plugins/${module.info.relativeName}/include.ejs`);\n          const exists = await fse.pathExists(incudeFileName);\n          if (exists) {\n            incudeFileName = incudeFileName.replace(/\\\\/g, '\\\\\\\\');\n            pluginIncludes = `${pluginIncludes}<%- await include('${incudeFileName}') %>\\n`;\n          }\n        }\n      }\n      // ok\n      site._pluginIncludes = pluginIncludes;\n      return site._pluginIncludes;\n    }\n\n    async _renderCSSJSes({ data, content }) {\n      data.js('plugins/cms-pluginbase/assets/js/lib/require.min.js');\n      data.js('plugins/cms-pluginbase/assets/js/lib/regenerator-runtime/runtime.js');\n      content = await this._renderCSSJS({ data, content, type: 'CSS', items: data._csses });\n      content = await this._renderCSSJS({ data, content, type: 'JS', items: data._jses });\n      return content;\n    }\n\n    async _renderCSSJS({ data, content, type, items }) {\n      if (items.length === 0) return content;\n      // site\n      const site = data.site;\n      // cache\n      if (!site._cache) site._cache = {};\n      if (!site._cache[type]) site._cache[type] = {};\n      const cacheSha = shajs('sha256').update(items.join(',')).digest('hex');\n      let urlDest;\n      if (site._cache[type][cacheSha]) {\n        urlDest = site._cache[type][cacheSha];\n      } else {\n        // combine\n        let result = '';\n        for (const item of items) {\n          let _content;\n          if (path.extname(item) === '.ejs') {\n            // data\n            data._filename = item;\n            _content = await ejs.renderFile(item, data, this.getOptions());\n          } else {\n            _content = await fse.readFile(item);\n            _content = _content ? _content.toString() : '';\n          }\n          // minify\n          if (type === 'CSS') {\n            let _needMinify = false;\n            if (item.indexOf('.less') > -1) {\n              // less\n              const output = await less.render(_content, { filename: item });\n              _content = output.css;\n              _needMinify = true;\n            } else if (item.indexOf('.min.css') === -1) {\n              // normal\n              _needMinify = true;\n            }\n            if (_needMinify) {\n              // minify\n              const output = new CleanCSS().minify(_content);\n              _content = output.styles;\n            }\n          } else {\n            if (item.indexOf('.min.js') === -1) {\n              _content = babel.transform(_content, {\n                ast: false,\n                babelrc: false,\n                presets: ['@babel/preset-env'],\n                plugins: [],\n              }).code;\n              // not minify for test/dev\n              if (!this.ctx.app.meta.isTest && !this.ctx.app.meta.isLocal) {\n                const output = UglifyJS.minify(_content);\n                if (output.error) throw new Error(`${output.error.name}: ${output.error.message}`);\n                _content = output.code;\n              }\n            }\n          }\n          // append\n          result += _content + '\\n';\n        }\n        // save\n        const sha = shajs('sha256').update(result).digest('hex');\n        // dest\n        const fileDest = `assets/${type.toLowerCase()}/${sha}.${type.toLowerCase()}`;\n        const pathDist = await this.getPathDist(site, site.language && site.language.current);\n        const fileWrite = path.join(pathDist, fileDest);\n        // write\n        await fse.outputFile(fileWrite, result);\n        // url\n        urlDest = this.getUrl(site, site.language && site.language.current, fileDest);\n        // cache\n        site._cache[type][cacheSha] = urlDest;\n      }\n      // replace\n      const regexp = new RegExp(`__${type}__`);\n      return content.replace(regexp, urlDest);\n    }\n\n    async _renderEnvs({ data, content }) {\n      // site\n      const site = data.site;\n      // env\n      const _env = {};\n      for (const name of Object.keys(data._envs)) {\n        let value;\n        const keys = name.split('.');\n        for (let index = keys.length - 1; index >= 0; index--) {\n          const key = keys[index];\n          value = value ? { [key]: value } : { [key]: data._envs[name] };\n        }\n        this.ctx.bean.util.extend(_env, value);\n      }\n      // combine\n      const env = this.ctx.bean.util.extend(site.front.env, _env);\n      // front.envs\n      if (site.front.envs) {\n        env.envs = site.front.envs;\n      }\n      // article\n      if (data.article) {\n        env.article = this.ctx.bean.util.extend({}, data.article);\n        // delete\n        env.article.summary = undefined;\n        env.article.content = undefined;\n        env.article.html = undefined;\n      }\n      // replace\n      const text = `\n<script type=\"text/javascript\">\nvar env=${JSON.stringify(env, null, 2)};\n</script>\n`;\n      const regexp = new RegExp('__ENV__');\n      const res = content.replace(regexp, text);\n      // remove article\n      env.article = undefined;\n      // ok\n      return res;\n    }\n\n    resolvePath(pathRoot, fileCurrent, fileName) {\n      if (!fileName) return pathRoot;\n      if (fileName.charAt(0) === '.') return path.join(path.dirname(fileCurrent), fileName); // not use path.resolve\n      return path.join(pathRoot, fileName);\n    }\n\n    getOptions() {\n      return {\n        async: true,\n        cache: true,\n        compileDebug: this.ctx.app.meta.isTest || this.ctx.app.meta.isLocal,\n        outputFunctionName: 'echo',\n        rmWhitespace: true,\n      };\n    }\n\n    getCurrentLocale({ site }) {\n      return site.language ? site.language.current : this.ctx.app.config.i18n.defaultLocale;\n    }\n\n    createUtilTime({ site }) {\n      const self = this;\n      const _textLocale = this.getCurrentLocale({ site });\n      return {\n        now(fmt, locale) {\n          return self.ctx.bean.util.now(fmt, locale || _textLocale);\n        },\n        today(fmt, locale) {\n          return self.ctx.bean.util.today(fmt, locale || _textLocale);\n        },\n        formatDateTime(date, fmt, locale) {\n          return self.ctx.bean.util.formatDateTime(date, fmt, locale || _textLocale);\n        },\n        formatDate(date, sep, locale) {\n          return self.ctx.bean.util.formatDate(date, sep, locale || _textLocale);\n        },\n        formatTime(date, sep, locale) {\n          return self.ctx.bean.util.formatTime(date, sep, locale || _textLocale);\n        },\n      };\n    }\n\n    async getData({ site }) {\n      // data\n      const self = this;\n      const _csses = [];\n      const _jses = [];\n      const _envs = {};\n      let _pathIntermediate = await this.getPathIntermediate(site.language && site.language.current);\n      _pathIntermediate = path.join(_pathIntermediate, '/');\n      const _textLocale = this.getCurrentLocale({ site });\n      const time = this.createUtilTime({ site });\n      return {\n        ctx: self.ctx,\n        site,\n        _csses,\n        _jses,\n        _envs,\n        require(fileName) {\n          const _path = self.resolvePath('', this._filename, fileName);\n          return require3(_path);\n        },\n        url(fileName, language) {\n          if (fileName && (fileName.indexOf('http://') === 0 || fileName.indexOf('https://') === 0)) {\n            return self.ctx.bean.util.escapeURL(fileName);\n          }\n          let _path = self.resolvePath('', path.relative(_pathIntermediate, this._filename), fileName);\n          _path = _path.replace(/\\\\/gi, '/');\n          const _url = self.getUrl(site, language || (site.language && site.language.current), _path);\n          return self.ctx.bean.util.escapeURL(_url);\n        },\n        css(fileName) {\n          _csses.push(self.resolvePath(_pathIntermediate, this._filename, fileName));\n        },\n        js(fileName) {\n          _jses.push(self.resolvePath(_pathIntermediate, this._filename, fileName));\n        },\n        env(name, value) {\n          _envs[name] = value;\n        },\n        text(...args) {\n          return self.ctx.text.locale(_textLocale, ...args);\n        },\n        util: {\n          time,\n          formatDateTime(date) {\n            return this.time.formatDateTime(date, `${site.env.format.date} ${site.env.format.time}`);\n          },\n          safeHtml(str) {\n            return self.ctx.helper.shtml(str);\n          },\n          escapeHtml(str) {\n            return self.ctx.bean.util.escapeHtml(str);\n          },\n          escapeURL(str) {\n            return self.ctx.bean.util.escapeURL(str);\n          },\n        },\n      };\n    }\n\n    // //////////////////////////////// build\n\n    // build languages\n    async buildLanguages({ progressId, progressNo = 0 }) {\n      try {\n        // time start\n        const timeStart = new Date();\n        // site\n        const site = await this.combineSiteBase();\n        const languages = site.language ? site.language.items.split(',') : [null];\n\n        // progress\n        const progress0_Total = languages.length;\n        let progress0_progress = 0;\n\n        for (const language of languages) {\n          // progress: language\n          if (progressId) {\n            await this.ctx.bean.progress.update({\n              progressId,\n              progressNo,\n              total: progress0_Total,\n              progress: progress0_progress++,\n              text: site.language ? `${this.ctx.text('Build')} ${this.ctx.text(language)}` : this.ctx.text('Build'),\n            });\n          }\n\n          // build\n          await this.buildLanguage({ language, progressId, progressNo: progressNo + 1 });\n        }\n\n        // time end\n        const timeEnd = new Date();\n        const time = (timeEnd.valueOf() - timeStart.valueOf()) / 1000; // second\n\n        // progress: done\n        if (progressId) {\n          if (progressNo === 0) {\n            await this.ctx.bean.progress.done({\n              progressId,\n              message: `${this.ctx.text('Time Used')}: ${parseInt(time)}${this.ctx.text('second2')}`,\n            });\n          }\n        }\n\n        // ok\n        return {\n          time,\n        };\n      } catch (err) {\n        // error\n        if (progressId) {\n          if (progressNo === 0) {\n            await this.ctx.bean.progress.error({ progressId, message: err.message });\n          }\n        }\n        throw err;\n      }\n    }\n\n    // build language\n    async buildLanguage({ language, progressId, progressNo = 0 }) {\n      try {\n        // time start\n        const timeStart = new Date();\n\n        // progress\n        const progress0_Total = 2;\n        let progress0_progress = 0;\n        // progress: initialize\n        if (progressId) {\n          await this.ctx.bean.progress.update({\n            progressId,\n            progressNo,\n            total: progress0_Total,\n            progress: progress0_progress++,\n            text: this.ctx.text('Initialize'),\n          });\n        }\n\n        // site\n        const site = await this.getSite({ language });\n\n        // / clear\n\n        // intermediate\n        const pathIntermediate = await this.getPathIntermediate(language);\n        await fse.remove(pathIntermediate);\n\n        // dist\n        const pathDist = await this.getPathDist(site, language);\n        //   solution: 1\n        // const distPaths = [ 'articles', 'assets', 'plugins', 'static', 'index.html', 'robots.txt', 'sitemap.xml', 'sitemapindex.xml' ];\n        // for (const item of distPaths) {\n        //   await fse.remove(path.join(pathDist, item));\n        // }\n        //   solution: 2\n        const distFiles = await eggBornUtils.tools.globbyAsync(`${pathDist}/*`, { onlyFiles: false });\n        const languages = site.language ? site.language.items.split(',') : null;\n        for (const item of distFiles) {\n          if (!site.language || languages.indexOf(path.basename(item)) === -1) {\n            await fse.remove(item);\n          }\n        }\n\n        // / copy files to intermediate\n        // /  plugins<theme<custom\n\n        // plugins\n        for (const relativeName in this.app.meta.modules) {\n          const module = this.app.meta.modules[relativeName];\n          const plugin = this.ctx.bean.util.getProperty(module, 'package.eggBornModule.cms.plugin');\n          if (plugin) {\n            const pluginPath = path.join(module.root, 'backend/cms/plugin');\n            const pluginFiles = await eggBornUtils.tools.globbyAsync(`${pluginPath}/*`, { onlyFiles: false });\n            for (const item of pluginFiles) {\n              await fse.copy(item, path.join(pathIntermediate, 'plugins', relativeName, path.basename(item)));\n            }\n          }\n        }\n\n        // theme\n        const __themeName = this._getThemeName({ site, language });\n        const themeName = __themeName.themeName;\n        language = __themeName.language;\n        await this.copyThemes(pathIntermediate, themeName);\n\n        // custom\n        const customPath = await this.getPathCustom(language);\n        const customFiles = await eggBornUtils.tools.globbyAsync(`${customPath}/*`, { onlyFiles: false });\n        for (const item of customFiles) {\n          await fse.copy(item, path.join(pathIntermediate, path.basename(item)));\n        }\n\n        // intermediate dist\n        const intermediateDistFiles = await eggBornUtils.tools.globbyAsync(`${pathIntermediate}/dist/*`, {\n          onlyFiles: false,\n        });\n        for (const item of intermediateDistFiles) {\n          await fse.copy(item, path.join(pathDist, path.basename(item)));\n        }\n\n        // / copy files to dist (ignore .ejs)\n        // /  assets plugins/[plugin]/assets\n        for (const dir of ['assets', 'plugins']) {\n          if (dir === 'assets') {\n            // assets\n            const _filename = path.join(pathIntermediate, 'assets');\n            const exists = await fse.pathExists(_filename);\n            if (exists) {\n              await fse.copy(_filename, path.join(pathDist, 'assets'));\n            }\n          } else {\n            // plugins\n            const pluginsFiles = await eggBornUtils.tools.globbyAsync(`${pathIntermediate}/plugins/*`, {\n              onlyDirectories: true,\n            });\n            for (const item of pluginsFiles) {\n              const _filename = `${item}/assets`;\n              const exists = await fse.pathExists(_filename);\n              if (exists) {\n                await fse.copy(_filename, path.join(pathDist, 'plugins', path.basename(item), 'assets'));\n              }\n            }\n          }\n          // delete ejs files\n          const ejsFiles = await eggBornUtils.tools.globbyAsync(`${pathDist}/${dir}/**/*.ejs`);\n          for (const item of ejsFiles) {\n            await fse.remove(item);\n          }\n        }\n\n        // / robots.txt\n        await this.createRobots({ site });\n\n        // / sitemapIndex\n        await this.createSitemapIndex({ site });\n\n        // progress: render files\n        if (progressId) {\n          await this.ctx.bean.progress.update({\n            progressId,\n            progressNo,\n            total: progress0_Total,\n            progress: progress0_progress++,\n            text: this.ctx.text('Render Files'),\n          });\n        }\n\n        // render all files\n        await this.renderAllFiles({ language, progressId, progressNo: progressNo + 1 });\n\n        // time end\n        const timeEnd = new Date();\n        const time = (timeEnd.valueOf() - timeStart.valueOf()) / 1000; // second\n\n        // progress: done\n        if (progressId) {\n          if (progressNo === 0) {\n            await this.ctx.bean.progress.done({\n              progressId,\n              message: `${this.ctx.text('Time Used')}: ${parseInt(time)}${this.ctx.text('second2')}`,\n            });\n          }\n        }\n\n        // ok\n        return {\n          time,\n        };\n      } catch (err) {\n        // error\n        if (progressId) {\n          if (progressNo === 0) {\n            await this.ctx.bean.progress.error({ progressId, message: err.message });\n          }\n        }\n        throw err;\n      }\n    }\n\n    // register watchers\n    async registerWatchers() {\n      // info\n      const watcherInfos = [];\n      // site\n      const site = await this.combineSiteBase();\n      const languages = site.language ? site.language.items.split(',') : [null];\n      // loop languages\n      for (const language of languages) {\n        // info\n        const watcherInfo = await this._collectWatcher({ language });\n        watcherInfos.push(watcherInfo);\n      }\n      // register\n      this.app.meta['a-cms:watcher'].registerLanguages({\n        info: {\n          subdomain: this.ctx.subdomain,\n          atomClass: this.atomClass,\n        },\n        watcherInfos,\n      });\n    }\n\n    async registerWatcher({ language }) {\n      // info\n      const watcherInfo = await this._collectWatcher({ language });\n      // register\n      this.app.meta['a-cms:watcher'].register(watcherInfo);\n    }\n\n    async _collectWatcher({ language }) {\n      // site\n      const site = await this.getSite({ language });\n\n      // watcher\n      site._watchers = [];\n\n      // / files\n      // /  plugins<theme<custom\n\n      // plugins\n      for (const relativeName in this.app.meta.modules) {\n        const module = this.app.meta.modules[relativeName];\n        const plugin = this.ctx.bean.util.getProperty(module, 'package.eggBornModule.cms.plugin');\n        if (!module.info.public && plugin) {\n          site._watchers.push(path.join(module.root, 'backend/cms'));\n          // site._watchers.push(path.join(module.root, 'backend/src'));\n        }\n      }\n\n      // theme\n      const __themeName = this._getThemeName({ site, language });\n      const themeName = __themeName.themeName;\n      language = __themeName.language;\n      this.watcherThemes(site, themeName);\n\n      // custom\n      const customPath = await this.getPathCustom(language);\n      site._watchers.push(customPath);\n\n      // watcherInfo\n      return {\n        subdomain: this.ctx.subdomain,\n        atomClass: this.atomClass,\n        language,\n        watchers: site._watchers,\n      };\n    }\n\n    async createSitemapIndex({ site }) {\n      // content\n      const urlRawRoot = this.getUrlRawRoot(site);\n      let items = '';\n      const languages = site.language ? site.language.items.split(',') : [null];\n      for (const language of languages) {\n        items += `  <sitemap>\n    <loc>${urlRawRoot}${!site.language || language === site.language.default ? '' : '/' + language}/sitemap.xml</loc>\n  </sitemap>\n`;\n      }\n      const content = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n${items}</sitemapindex>`;\n      // write\n      const pathRawDist = await this.getPathRawDist(site);\n      await fse.outputFile(`${pathRawDist}/sitemapindex.xml`, content);\n    }\n\n    async createRobots({ site }) {\n      // content\n      const urlRawRoot = this.getUrlRawRoot(site);\n      const content = `User-agent: *\nAllow: /\n\nSitemap: ${urlRawRoot}/sitemapindex.xml\n`;\n      // write\n      const pathRawDist = await this.getPathRawDist(site);\n      await fse.outputFile(`${pathRawDist}/robots.txt`, content);\n    }\n\n    // theme extend\n    async copyThemes(pathIntermediate, themeModuleName) {\n      await this._copyThemes(pathIntermediate, themeModuleName);\n    }\n\n    async _copyThemes(pathIntermediate, themeModuleName) {\n      // module\n      const module = this.app.meta.modules[themeModuleName];\n      if (!module) this.ctx.throw.module(moduleInfo.relativeName, 1003, themeModuleName);\n      // extend\n      const moduleExtend = this.ctx.bean.util.getProperty(module, 'package.eggBornModule.cms.extend');\n      if (moduleExtend) {\n        await this._copyThemes(pathIntermediate, moduleExtend);\n      }\n      // current\n      const themePath = path.join(module.root, 'backend/cms/theme');\n      const themeFiles = await eggBornUtils.tools.globbyAsync(`${themePath}/*`, { onlyFiles: false });\n      for (const item of themeFiles) {\n        await fse.copy(item, path.join(pathIntermediate, path.basename(item)));\n      }\n    }\n\n    // theme extend\n    watcherThemes(site, themeModuleName) {\n      this._watcherThemes(site, themeModuleName);\n    }\n\n    _watcherThemes(site, themeModuleName) {\n      // module\n      const module = this.app.meta.modules[themeModuleName];\n      if (!module) this.ctx.throw.module(moduleInfo.relativeName, 1003, themeModuleName);\n      // extend\n      const moduleExtend = this.ctx.bean.util.getProperty(module, 'package.eggBornModule.cms.extend');\n      if (moduleExtend) {\n        this._watcherThemes(site, moduleExtend);\n      }\n      // current\n      if (!module.info.public) {\n        site._watchers.push(path.join(module.root, 'backend/cms'));\n        // site._watchers.push(path.join(module.root, 'backend/src'));\n      }\n    }\n\n    async _checkIfSiteBuilt({ site, force }) {\n      // check if build site first\n      const pathIntermediate = await this.getPathIntermediate(site.language && site.language.current);\n      const fileName = path.join(pathIntermediate, 'main/article.ejs');\n      const exists = await fse.pathExists(fileName);\n      if (exists || !force) return exists;\n      // force build\n      const build = this.ctx.bean.cms.build({ atomClass: site.atomClass });\n      await build.buildLanguage({ language: site.language && site.language.current });\n      return true;\n    }\n\n    async getArticleUrl({ key, options }) {\n      // options\n      const returnPhysicalPath = options && options.returnPhysicalPath;\n      const returnWaitingPath = options && options.returnWaitingPath;\n      // article\n      const article = await this.ctx.bean.cms.render.getArticle({ key, inner: true });\n      if (!article) this.ctx.throw.module('a-base', 1002);\n      if (!article.url) return null; // not throw error\n      // articleUrl\n      let articleUrl = article.url;\n      // site\n      const site = await this.getSite({ language: article.atomLanguage });\n      // check if build site first\n      const siteBuilt = await this._checkIfSiteBuilt({ site, force: false });\n      if (!siteBuilt) this.ctx.throw.module(moduleInfo.relativeName, 1006);\n      // fileName\n      const pathDist = await this.getPathDist(site, article.atomLanguage);\n      const fileName = path.join(pathDist, articleUrl);\n      const exists = await fse.pathExists(fileName);\n      if (!exists && !returnWaitingPath) {\n        return null; // not throw error\n      }\n      if (!exists && returnWaitingPath) {\n        // force to post a render task: special for draft and private articles\n        const inner = article.atomStage === 0;\n        await this.ctx.bean.cms.render._renderArticlePush({\n          atomClass: this.atomClass,\n          key: { atomId: article.atomId },\n          inner,\n        });\n        // waiting path\n        articleUrl = `static/waiting.html?atomId=${article.atomId}`;\n      }\n      // ok\n      const url = this.getUrl(site, site.language && site.language.current, articleUrl);\n      const res = {\n        relativeUrl: articleUrl,\n        url,\n      };\n      if (returnPhysicalPath) {\n        res.physicalPath = fileName;\n      }\n      return res;\n    }\n\n    getAtomClassFullName(atomClass) {\n      return `${atomClass.module}:${atomClass.atomClassName}`;\n    }\n\n    async getFrontEnvs({ language }) {\n      const envs = {};\n      for (const module of this.ctx.app.meta.modulesArray) {\n        // may be more atoms\n        const atoms = this.ctx.bean.util.getProperty(module, 'main.meta.base.atoms');\n        if (!atoms) continue;\n        for (const key in atoms) {\n          if (atoms[key].info.cms !== true) continue;\n          // atomClass\n          const atomClass = {\n            module: module.info.relativeName,\n            atomClassName: key,\n            atomClassIdParent: 0,\n          };\n          const atomClassFullName = this.getAtomClassFullName(atomClass);\n          if (this.getAtomClassFullName(this.atomClass) !== atomClassFullName) {\n            // getSite\n            let site;\n            try {\n              site = await this.ctx.bean.cms.site.getSite({\n                atomClass,\n                language,\n                options: {\n                  envs: false,\n                },\n              });\n            } catch (e) {\n              // nothing\n            }\n            // set\n            if (site) {\n              envs[atomClassFullName] = site.front.env;\n            }\n          }\n        }\n      }\n      return envs;\n    }\n  }\n\n  return Build;\n};\n","module.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Render {\n    async getArticleUrl({ atomClass, key, options }) {\n      if (!atomClass) {\n        atomClass = await ctx.bean.atomClass.getByAtomId({ atomId: key.atomId });\n      }\n      const build = ctx.bean.cms.build({ atomClass });\n      return await build.getArticleUrl({ key, options });\n    }\n\n    // site<plugin<theme<site(db)<language(db)\n    async combineSiteBase({ atomClass, mergeConfigSite }) {\n      const build = ctx.bean.cms.build({ atomClass });\n      return await build.combineSiteBase({ mergeConfigSite });\n    }\n\n    async getArticle({ key, inner }) {\n      if (!inner) {\n        // check right\n        const roleAnonymous = await ctx.bean.role.getSystemRole({ roleName: 'anonymous' });\n        const right = await ctx.bean.atom.checkRoleRightRead({ atom: { id: key.atomId }, roleId: roleAnonymous.id });\n        if (!right) return null;\n      }\n      // article\n      const article = await ctx.bean.atom.read({ key, user: { id: 0 } });\n      if (!article) return null;\n      // maybe site.language is false\n      // // check atomLanguage\n      // if (!article.atomLanguage) {\n      //   article.atomLanguage = ctx.locale;\n      //   // return null;\n      //   // ctx.throw(1001);\n      // }\n      return article;\n    }\n\n    async _deleteArticlePushAsync({ atomClass, key, article, inner }) {\n      if (!atomClass) {\n        atomClass = await ctx.bean.atomClass.getByAtomId({ atomId: key.atomId });\n      }\n      ctx.tail(async () => {\n        // queue\n        await ctx.meta.util.queuePushAsync({\n          module: moduleInfo.relativeName,\n          queueName: 'render',\n          queueNameSub: `${atomClass.module}:${atomClass.atomClassName}`,\n          data: {\n            queueAction: 'deleteArticle',\n            atomClass,\n            key,\n            article,\n            inner,\n          },\n        });\n      });\n    }\n\n    async _deleteArticlePush({ atomClass, key, article, inner }) {\n      if (!atomClass) {\n        atomClass = await ctx.bean.atomClass.getByAtomId({ atomId: key.atomId });\n      }\n      ctx.tail(() => {\n        // queue\n        ctx.meta.util.queuePush({\n          module: moduleInfo.relativeName,\n          queueName: 'render',\n          queueNameSub: `${atomClass.module}:${atomClass.atomClassName}`,\n          data: {\n            queueAction: 'deleteArticle',\n            atomClass,\n            key,\n            article,\n            inner,\n          },\n        });\n      });\n    }\n\n    async _renderArticlePushAsync({ atomClass, key, inner }) {\n      if (!atomClass) {\n        atomClass = await ctx.bean.atomClass.getByAtomId({ atomId: key.atomId });\n      }\n      ctx.tail(async () => {\n        // queue\n        await ctx.meta.util.queuePushAsync({\n          module: moduleInfo.relativeName,\n          queueName: 'render',\n          queueNameSub: `${atomClass.module}:${atomClass.atomClassName}`,\n          data: {\n            queueAction: 'renderArticle',\n            atomClass,\n            key,\n            inner,\n          },\n        });\n      });\n    }\n\n    async _renderArticlePush({ atomClass, key, inner }) {\n      if (!atomClass) {\n        atomClass = await ctx.bean.atomClass.getByAtomId({ atomId: key.atomId });\n      }\n      ctx.tail(() => {\n        // queue\n        ctx.meta.util.queuePush({\n          module: moduleInfo.relativeName,\n          queueName: 'render',\n          queueNameSub: `${atomClass.module}:${atomClass.atomClassName}`,\n          data: {\n            queueAction: 'renderArticle',\n            atomClass,\n            key,\n            inner,\n          },\n        });\n      });\n    }\n  }\n\n  return Render;\n};\n","const require3 = require('require3');\nconst fse = require3('fs-extra');\n\nmodule.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Site {\n    async getSite({ atomClass, language, options }) {\n      const build = ctx.bean.cms.build({ atomClass });\n      return await build.getSite({ language, options });\n    }\n\n    async getConfigSiteBase({ atomClass }) {\n      const build = ctx.bean.cms.build({ atomClass });\n      return await build.getConfigSiteBase();\n    }\n\n    async getConfigSite({ atomClass }) {\n      const build = ctx.bean.cms.build({ atomClass });\n      return await build.getConfigSite();\n    }\n\n    // save site config\n    async setConfigSite({ atomClass, data }) {\n      // build\n      const build = ctx.bean.cms.build({ atomClass });\n      // save\n      await build.setConfigSite({ data });\n      // only in development\n      if (ctx.app.meta.isLocal) {\n        // build site\n        this.buildLanguagesQueue({ atomClass });\n        // register watchers\n        await build.registerWatchers();\n      }\n    }\n\n    async getConfigLanguagePreview({ atomClass, language }) {\n      const build = ctx.bean.cms.build({ atomClass });\n      return await build.getConfigLanguagePreview({ language });\n    }\n\n    async getConfigLanguage({ atomClass, language }) {\n      const build = ctx.bean.cms.build({ atomClass });\n      return await build.getConfigLanguage({ language });\n    }\n\n    // save language config\n    async setConfigLanguage({ atomClass, language, data }) {\n      // build\n      const build = ctx.bean.cms.build({ atomClass });\n      // save\n      await build.setConfigLanguage({ language, data });\n      // only in development\n      if (ctx.app.meta.isLocal) {\n        // build site\n        this.buildLanguageQueue({ atomClass, language });\n        // register watcher\n        await build.registerWatcher({ language });\n      }\n    }\n\n    async getLanguages({ atomClass }) {\n      const build = ctx.bean.cms.build({ atomClass });\n      return await build.getLanguages();\n    }\n\n    async getUrl({ atomClass, language, path }) {\n      const build = ctx.bean.cms.build({ atomClass });\n      const site = await build.getSite({ language });\n      // check if build site first\n      const siteBuilt = await build._checkIfSiteBuilt({ site, force: false });\n      if (!siteBuilt) ctx.throw.module(moduleInfo.relativeName, 1006);\n      return build.getUrl(site, language, path);\n    }\n\n    buildLanguagesQueue({ atomClass, progressId }) {\n      // queue\n      ctx.meta.util.queuePush({\n        module: moduleInfo.relativeName,\n        queueName: 'render',\n        queueNameSub: `${atomClass.module}:${atomClass.atomClassName}`,\n        data: {\n          queueAction: 'buildLanguages',\n          atomClass,\n          progressId,\n        },\n      });\n    }\n\n    buildLanguageQueue({ atomClass, language, progressId }) {\n      // queue\n      ctx.meta.util.queuePush({\n        module: moduleInfo.relativeName,\n        queueName: 'render',\n        queueNameSub: `${atomClass.module}:${atomClass.atomClassName}`,\n        data: {\n          queueAction: 'buildLanguage',\n          atomClass,\n          language,\n          progressId,\n        },\n      });\n    }\n\n    async getStats({ atomClass, languages }) {\n      const res = {};\n      for (const language of languages) {\n        res[language] = await this._getStatsLanguange({ atomClass, language });\n      }\n      return res;\n    }\n\n    async _getStatsLanguange({ atomClass, language }) {\n      const stats = {};\n\n      const atomClassBase = await ctx.bean.atomClass.atomClass(atomClass);\n\n      const _language = language === 'default' ? undefined : language;\n\n      // atoms\n      stats.atoms = await ctx.bean.atom.count({\n        atomClass,\n        options: {\n          language: _language,\n          mode: 'default',\n        },\n      });\n\n      // comments\n      stats.comments = await ctx.bean.atom.count({\n        atomClass,\n        options: {\n          language: _language,\n          mode: 'default',\n          comment: 1,\n        },\n      });\n\n      // categories\n      if (atomClassBase.category) {\n        stats.categories = await ctx.bean.category.count({\n          atomClass,\n          language: _language,\n        });\n      }\n\n      // tags\n      if (atomClassBase.tag) {\n        stats.tags = await ctx.bean.tag.count({\n          atomClass,\n          language: _language,\n        });\n      }\n\n      // ok\n      return stats;\n    }\n\n    async checkFile({ atomId, file, mtime, user }) {\n      // check right\n      let mtimeCurrent;\n      let article;\n      if (file) {\n        if (!ctx.app.meta.isTest && !ctx.app.meta.isLocal) ctx.throw(403);\n        // exists\n        const exists = await fse.pathExists(file);\n        if (!exists) {\n          // deleted\n          return null;\n        }\n        // stat\n        const stat = await fse.stat(file);\n        mtimeCurrent = stat.mtime.valueOf();\n      } else {\n        article = await ctx.bean.cms.render.getArticle({ key: { atomId }, inner: true });\n        if (!article) ctx.throw.module('a-base', 1002);\n        // only author\n        if (article.userIdUpdated !== user.id) ctx.throw(403);\n        mtimeCurrent = article.renderAt ? article.renderAt.getTime() : 0;\n      }\n\n      if (mtime !== mtimeCurrent) {\n        // different\n        return { mtime: mtimeCurrent, article };\n      }\n      // default\n      return null;\n    }\n  }\n\n  return Site;\n};\n","module.exports = app => {\n  class Queue extends app.meta.BeanBase {\n    async execute(context) {\n      const data = context.data;\n      const queueAction = data.queueAction;\n      return await this[queueAction](data);\n    }\n\n    async buildLanguage({ atomClass, language, progressId }) {\n      const build = this.ctx.bean.cms.build({ atomClass });\n      return await build.buildLanguage({ language, progressId });\n    }\n\n    async buildLanguages({ atomClass, progressId }) {\n      const build = this.ctx.bean.cms.build({ atomClass });\n      return await build.buildLanguages({ progressId });\n    }\n\n    async renderArticle({ atomClass, key, inner }) {\n      const build = this.ctx.bean.cms.build({ atomClass });\n      return await build.renderArticle({ key, inner });\n    }\n\n    async deleteArticle({ atomClass, key, article, inner }) {\n      const build = this.ctx.bean.cms.build({ atomClass });\n      return await build.deleteArticle({ key, article, inner });\n    }\n  }\n\n  return Queue;\n};\n","module.exports = app => {\n  class Startup extends app.meta.BeanBase {\n    async execute() {\n      // only in development\n      if (!app.meta.isLocal) return;\n      await this._registerCms();\n    }\n\n    async _registerCms() {\n      // loop modules\n      for (const module of app.meta.modulesArray) {\n        // loop atomClasses\n        const atoms = this.ctx.bean.util.getProperty(module, 'main.meta.base.atoms');\n        if (!atoms) continue;\n        for (const key in atoms) {\n          if (atoms[key].info.cms !== true) continue;\n          // atomClass\n          const atomClass = {\n            module: module.info.relativeName,\n            atomClassName: key,\n            atomClassIdParent: 0,\n          };\n          const build = this.ctx.bean.cms.build({ atomClass });\n          await build.registerWatchers();\n        }\n      }\n    }\n  }\n\n  return Startup;\n};\n","module.exports = app => {\n  class Startup extends app.meta.BeanBase {\n    async execute() {\n      // only in development\n      if (!app.meta.isLocal) return;\n      await this._registerDevelopment();\n    }\n\n    async _registerDevelopment() {\n      // info\n      const watcherInfo = { development: true, watchers: null };\n      // register\n      this.app.meta['a-cms:watcher'].register(watcherInfo);\n    }\n  }\n\n  return Startup;\n};\n","const version_0 = require('./version.manager_0.js');\nconst update_1 = require('./version/update_1.js');\nconst update_2 = require('./version/update_2.js');\nconst update_3 = require('./version/update_3.js');\nconst update_4 = require('./version/update_4.js');\nconst update_5 = require('./version/update_5.js');\nconst update_6 = require('./version/update_6.js');\nconst update_7 = require('./version/update_7.js');\nconst update_8 = require('./version/update_8.js');\nconst update_9 = require('./version/update_9.js');\nconst update_10 = require('./version/update_10.js');\nconst update_11 = require('./version/update_11.js');\nconst update_12 = require('./version/update_12.js');\nconst init_1 = require('./version/init_1.js');\nconst init_12 = require('./version/init_12.js');\nconst test = require('./version/test.js');\n\nmodule.exports = app => {\n  const classes = [\n    update_1, //\n    update_2,\n    update_3,\n    update_4,\n    update_5,\n    update_6,\n    update_7,\n    update_8,\n    update_9,\n    update_10,\n    update_11,\n    update_12,\n    init_1,\n    init_12,\n    test,\n  ];\n  return app.meta.util.mixinClasses(version_0, classes, app);\n};\n","module.exports = app => {\n  // const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Version extends app.meta.BeanBase {\n    async update(options) {\n      if (options.version === 1) {\n        await this._update_1(options);\n      }\n      if (options.version === 2) {\n        await this._update_2(options);\n      }\n      if (options.version === 3) {\n        await this._update_3(options);\n      }\n      if (options.version === 4) {\n        await this._update_4(options);\n      }\n      if (options.version === 5) {\n        await this._update_5(options);\n      }\n      if (options.version === 6) {\n        await this._update_6(options);\n      }\n      if (options.version === 7) {\n        await this._update_7(options);\n      }\n      if (options.version === 8) {\n        await this._update_8(options);\n      }\n      if (options.version === 9) {\n        await this._update_9(options);\n      }\n      if (options.version === 10) {\n        await this._update_10(options);\n      }\n      if (options.version === 11) {\n        await this._update_11(options);\n      }\n      if (options.version === 12) {\n        await this._update_12(options);\n      }\n    }\n\n    async init(options) {\n      if (options.version === 1) {\n        await this._init_1(options);\n      }\n      if (options.version === 12) {\n        await this._init_12(options);\n      }\n    }\n\n    async test() {\n      await this._test();\n    }\n  }\n\n  return Version;\n};\n","module.exports = app => {\n  // const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Version {\n    async _init_1(options) {\n      // create roles: cms-writer to template\n      const roles = ['cms-writer'];\n      const roleTemplate = await this.ctx.bean.role.getSystemRole({ roleName: 'template' });\n      const roleSuperuser = await this.ctx.bean.role.getSystemRole({ roleName: 'superuser' });\n      for (const roleName of roles) {\n        const roleId = await this.ctx.bean.role.add({\n          roleName,\n          roleIdParent: roleTemplate.id,\n        });\n        // role:superuser include cms-writer\n        await this.ctx.bean.role.addRoleInc({ roleId: roleSuperuser.id, roleIdInc: roleId });\n      }\n      // build roles\n      await this.ctx.bean.role.setDirty(true);\n\n      // add role rights\n      const roleRights = [\n        { roleName: 'cms-writer', action: 'create' },\n        { roleName: 'cms-writer', action: 'read', scopeNames: 'authenticated' },\n        { roleName: 'cms-writer', action: 'write', scopeNames: 0 },\n        { roleName: 'cms-writer', action: 'delete', scopeNames: 0 },\n        { roleName: 'cms-writer', action: 'clone', scopeNames: 0 },\n        { roleName: 'cms-writer', action: 'deleteBulk' },\n        { roleName: 'cms-writer', action: 'exportBulk' },\n        { roleName: 'root', action: 'read', scopeNames: 'authenticated' },\n        { roleName: 'root', action: 'read', scopeNames: 0 },\n      ];\n      await this.ctx.bean.role.addRoleRightBatch({ atomClassName: 'article', roleRights });\n    }\n  }\n  return Version;\n};\n","module.exports = app => {\n  // const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Version {\n    async _init_12(options) {\n      // add role rights\n      const roleRights = [\n        { roleName: 'root', action: 'layout', scopeNames: 'root' }, //\n        { roleName: 'root', action: 'preview', scopeNames: 'root' }, //\n      ];\n      await this.ctx.bean.role.addRoleRightBatch({ atomClassName: 'article', roleRights });\n    }\n  }\n  return Version;\n};\n","module.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Version {\n    async _test() {\n      const atomClass = {\n        module: moduleInfo.relativeName,\n        atomClassName: 'article',\n      };\n      // categories\n      const categories = [\n        // en-us\n        { categoryName: 'test1', language: 'en-us', categoryIdParent: 0 },\n        { categoryName: 'test2', language: 'en-us', categoryIdParent: 0 },\n        { categoryName: 'test2-1', language: 'en-us', categoryIdParent: 'test2' },\n        { categoryName: 'test2-2', language: 'en-us', categoryIdParent: 'test2' },\n        { categoryName: 'test3', language: 'en-us', categoryIdParent: 0, categorySorting: 1 },\n        { categoryName: 'testHidden', language: 'en-us', categoryIdParent: 0, categoryHidden: 1 },\n        { categoryName: 'testFlag', language: 'en-us', categoryIdParent: 0, categoryFlag: 'Flag' },\n        // zh-cn\n        { categoryName: '目录1', language: 'zh-cn', categoryIdParent: 0 },\n        { categoryName: '目录2', language: 'zh-cn', categoryIdParent: 0 },\n        { categoryName: '目录2-1', language: 'zh-cn', categoryIdParent: '目录2' },\n        { categoryName: '目录2-2', language: 'zh-cn', categoryIdParent: '目录2' },\n        { categoryName: '目录3', language: 'zh-cn', categoryIdParent: 0, categorySorting: 1 },\n        { categoryName: '隐藏目录', language: 'zh-cn', categoryIdParent: 0, categoryHidden: 1 },\n        { categoryName: '加标记的目录', language: 'zh-cn', categoryIdParent: 0, categoryFlag: 'Flag' },\n      ];\n      const categoryIds = {};\n      for (const item of categories) {\n        // add\n        const categoryId = await this.ctx.bean.category.add({\n          atomClass,\n          data: {\n            language: item.language,\n            categoryName: item.categoryName,\n            categoryHidden: item.categoryHidden,\n            categorySorting: item.categorySorting,\n            categoryFlag: item.categoryFlag,\n            categoryIdParent: item.categoryIdParent ? categoryIds[item.categoryIdParent] : 0,\n          },\n        });\n        categoryIds[item.categoryName] = categoryId;\n      }\n      // tags\n      const tags = [\n        // en-us\n        { tagName: 'Life', language: 'en-us' },\n        { tagName: 'Study', language: 'en-us' },\n        { tagName: 'Work', language: 'en-us' },\n        // zh-cn\n        { tagName: '生活', language: 'zh-cn' },\n        { tagName: '学习', language: 'zh-cn' },\n        { tagName: '工作', language: 'zh-cn' },\n      ];\n      const tagIds = {};\n      for (const item of tags) {\n        // add\n        const tagId = await this.ctx.bean.tag.add({\n          atomClass,\n          data: {\n            language: item.language,\n            tagName: item.tagName,\n          },\n        });\n        tagIds[item.tagName] = tagId;\n      }\n    }\n  }\n  return Version;\n};\n","module.exports = app => {\n  // const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Version {\n    async _update_1(options) {\n      // create table: aCmsArticle\n      let sql = `\n          CREATE TABLE aCmsArticle (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            atomId int(11) DEFAULT '0',\n            categoryId int(11) DEFAULT '0',\n            language varchar(50) DEFAULT NULL,\n            sticky int(11) DEFAULT '0',\n            keywords varchar(255) DEFAULT NULL,\n            description text DEFAULT NULL,\n            summary text DEFAULT NULL,\n            url varchar(255) DEFAULT NULL,\n            editMode int(11) DEFAULT '0',\n            slug varchar(255) DEFAULT NULL,\n            sorting int(11) DEFAULT '0',\n            flag varchar(255) DEFAULT NULL,\n            extra json DEFAULT NULL,\n            imageFirst varchar(255) DEFAULT NULL,\n            PRIMARY KEY (id)\n          )\n        `;\n      await this.ctx.model.query(sql);\n\n      // create table: aCmsContent\n      sql = `\n          CREATE TABLE aCmsContent (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            atomId int(11) DEFAULT '0',\n            itemId int(11) DEFAULT '0',\n            content LONGTEXT DEFAULT NULL,\n            html LONGTEXT DEFAULT NULL,\n            PRIMARY KEY (id)\n          )\n        `;\n      await this.ctx.model.query(sql);\n\n      // create table: aCmsCategory\n      sql = `\n          CREATE TABLE aCmsCategory (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            categoryName varchar(50) DEFAULT NULL,\n            language varchar(50) DEFAULT NULL,\n            catalog int(11) DEFAULT '0',\n            hidden int(11) DEFAULT '0',\n            sorting int(11) DEFAULT '0',\n            flag varchar(255) DEFAULT NULL,\n            categoryIdParent int(11) DEFAULT '0',\n            PRIMARY KEY (id)\n          )\n        `;\n      await this.ctx.model.query(sql);\n\n      // create view: aCmsArticleView\n      sql = `\n          CREATE VIEW aCmsArticleView as\n            select a.*,b.categoryName from aCmsArticle a\n              left join aCmsCategory b on a.categoryId=b.id\n        `;\n      await this.ctx.model.query(sql);\n\n      // create view: aCmsArticleViewFull\n      sql = `\n          CREATE VIEW aCmsArticleViewFull as\n            select a.*,b.categoryName,c.content,c.html,concat(d.atomName,',',c.content) contentSearch from aCmsArticle a\n              left join aCmsCategory b on a.categoryId=b.id\n              left join aCmsContent c on a.id=c.itemId\n              left join aAtom d on a.atomId=d.id\n        `;\n      await this.ctx.model.query(sql);\n    }\n  }\n  return Version;\n};\n","module.exports = app => {\n  // const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Version {\n    async _update_10(options) {\n      // alter table: aCmsArticle\n      const sql = `\n      ALTER TABLE aCmsArticle\n        ADD COLUMN imageCover varchar(255) DEFAULT NULL\n                `;\n      await this.ctx.model.query(sql);\n    }\n  }\n  return Version;\n};\n","module.exports = app => {\n  // const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Version {\n    async _update_11(options) {\n      // alter table: aCmsArticle\n      const sql = `\n      ALTER TABLE aCmsArticle\n        ADD COLUMN renderAt timestamp DEFAULT NULL\n                `;\n      await this.ctx.model.query(sql);\n    }\n  }\n  return Version;\n};\n","module.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Version {\n    async _update_12(options) {\n      await this._update12Migration(options);\n    }\n\n    async _update12Migration(options) {\n      // all instances\n      const instances = await this.ctx.bean.instance.list({ where: {} });\n      for (const instance of instances) {\n        await this.ctx.meta.util.executeBean({\n          subdomain: instance.name,\n          beanModule: moduleInfo.relativeName,\n          beanFullName: `${moduleInfo.relativeName}.version.manager`,\n          context: options,\n          fn: '_update12MigrationInstance',\n        });\n      }\n    }\n\n    async _update12MigrationInstance() {\n      // articles/post\n      await this._update12Migration_articles();\n    }\n\n    async _update12Migration_articles() {\n      // first, hold articles\n      const articles = await this.ctx.model.query(\n        `\n        select a.id as atomId,a.atomClassId,a.atomStage,a.userIdCreated,b.content\n           from aAtom a\n           left join aCmsContent b on a.id=b.atomId\n            where a.iid=? and a.deleted=0 and a.atomStage=1\n              and ( \n                        b.content like '%cms-pluginblock:blockAudio%'\n                    or  b.content like '%cms-pluginblock:blockIFrame%'\n                    or  b.content like '%cabloy-dashboard:blockCourse%'\n                  )   \n        `,\n        [this.ctx.instance.id]\n      );\n      // then, update all articles\n      await this.ctx.model.query(`\n      update aCmsContent set content = replace (content,'cms-pluginblock:blockAudio','a-markdownblock:audio') where content like '%cms-pluginblock:blockAudio%'\n    `);\n      await this.ctx.model.query(`\n      update aCmsContent set content = replace (content,'cms-pluginblock:blockIFrame','a-markdownblock:iframe') where content like '%cms-pluginblock:blockIFrame%'\n    `);\n      await this.ctx.model.query(`\n      update aCmsContent set content = replace (content,'cabloy-dashboard:blockCourse','cabloy-course:blockCourseCodes') where content like '%cabloy-dashboard:blockCourse%'\n    `);\n      // loop\n      for (const article of articles) {\n        await this._update12Migration_article({ article });\n      }\n    }\n\n    async _update12Migration_article({ article }) {\n      // user\n      const user = { id: article.userIdCreated };\n      // open\n      const res = await this.ctx.bean.atom.openDraft({ key: { atomId: article.atomId }, user });\n      const draftKey = res.draft.key;\n      // content\n      let content = article.content;\n      content = content.replace(/cms-pluginblock:blockAudio/gi, 'a-markdownblock:audio');\n      content = content.replace(/cms-pluginblock:blockIFrame/gi, 'a-markdownblock:iframe');\n      content = content.replace(/cabloy-dashboard:blockCourse/gi, 'cabloy-course:blockCourseCodes');\n      // write\n      await this.ctx.bean.atom.write({\n        key: draftKey,\n        target: null,\n        item: {\n          content,\n        },\n        options: {\n          ignoreRender: true,\n        },\n        user,\n      });\n      // submit\n      await this.ctx.bean.atom.submit({\n        key: draftKey,\n        options: {\n          ignoreRender: true,\n          ignoreFlow: true,\n        },\n        user,\n      });\n    }\n  }\n  return Version;\n};\n","module.exports = app => {\n  // const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Version {\n    async _update_2(options) {\n      // create table: aCmsTag\n      let sql = `\n      CREATE TABLE aCmsTag (\n        id int(11) NOT NULL AUTO_INCREMENT,\n        createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n        updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n        deleted int(11) DEFAULT '0',\n        iid int(11) DEFAULT '0',\n        language varchar(50) DEFAULT NULL,\n        tagName varchar(50) DEFAULT NULL,\n        articleCount int(11) DEFAULT '0',\n        PRIMARY KEY (id)\n      )\n    `;\n      await this.ctx.model.query(sql);\n\n      // create table: aCmsArticleTag\n      sql = `\n      CREATE TABLE aCmsArticleTag (\n        id int(11) NOT NULL AUTO_INCREMENT,\n        createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n        updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n        deleted int(11) DEFAULT '0',\n        iid int(11) DEFAULT '0',\n        atomId int(11) DEFAULT '0',\n        itemId int(11) DEFAULT '0',\n        tags JSON DEFAULT NULL,\n        PRIMARY KEY (id)\n      )\n    `;\n      await this.ctx.model.query(sql);\n\n      // create table: aCmsArticleTagRef\n      sql = `\n      CREATE TABLE aCmsArticleTagRef (\n        id int(11) NOT NULL AUTO_INCREMENT,\n        createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n        updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n        deleted int(11) DEFAULT '0',\n        iid int(11) DEFAULT '0',\n        atomId int(11) DEFAULT '0',\n        itemId int(11) DEFAULT '0',\n        tagId int(11) DEFAULT '0',\n        PRIMARY KEY (id)\n      )\n    `;\n      await this.ctx.model.query(sql);\n\n      // alter view: aCmsArticleView\n      await this.ctx.model.query('drop view aCmsArticleView');\n      sql = `\n      CREATE VIEW aCmsArticleView as\n        select a.*,b.categoryName,e.tags from aCmsArticle a\n          left join aCmsCategory b on a.categoryId=b.id\n          left join aCmsArticleTag e on a.id=e.itemId\n    `;\n      await this.ctx.model.query(sql);\n\n      // alter view: aCmsArticleViewFull\n      await this.ctx.model.query('drop view aCmsArticleViewFull');\n      sql = `\n      CREATE VIEW aCmsArticleViewFull as\n        select a.*,b.categoryName,e.tags,c.content,c.html from aCmsArticle a\n          left join aCmsCategory b on a.categoryId=b.id\n          left join aCmsContent c on a.id=c.itemId\n          left join aCmsArticleTag e on a.id=e.itemId\n    `;\n      await this.ctx.model.query(sql);\n\n      // create view: aCmsArticleViewSearch\n      sql = `\n      CREATE VIEW aCmsArticleViewSearch as\n        select a.*,b.categoryName,e.tags,c.content,c.html,concat(d.atomName,',',c.content) contentSearch from aCmsArticle a\n          left join aCmsCategory b on a.categoryId=b.id\n          left join aCmsContent c on a.id=c.itemId\n          left join aAtom d on a.atomId=d.id\n          left join aCmsArticleTag e on a.id=e.itemId\n    `;\n      await this.ctx.model.query(sql);\n\n      // create view: aCmsArticleViewTag\n      sql = `\n      CREATE VIEW aCmsArticleViewTag as\n        select a.*,b.categoryName,e.tags,f.tagId from aCmsArticle a\n          left join aCmsCategory b on a.categoryId=b.id\n          left join aCmsArticleTag e on a.id=e.itemId\n          left join aCmsArticleTagRef f on a.id=f.itemId\n    `;\n      await this.ctx.model.query(sql);\n    }\n  }\n  return Version;\n};\n","module.exports = app => {\n  // const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Version {\n    async _update_3(options) {\n      // alter table: aCmsArticle\n      let sql = `\n        ALTER TABLE aCmsArticle\n          ADD COLUMN audioFirst varchar(255) DEFAULT NULL,\n          ADD COLUMN audioCoverFirst varchar(255) DEFAULT NULL\n                  `;\n      await this.ctx.model.query(sql);\n\n      // alter view: aCmsArticleView\n      await this.ctx.model.query('drop view aCmsArticleView');\n      sql = `\n          CREATE VIEW aCmsArticleView as\n            select a.*,b.categoryName,e.tags from aCmsArticle a\n              left join aCmsCategory b on a.categoryId=b.id\n              left join aCmsArticleTag e on a.id=e.itemId\n        `;\n      await this.ctx.model.query(sql);\n\n      // alter view: aCmsArticleViewFull\n      await this.ctx.model.query('drop view aCmsArticleViewFull');\n      sql = `\n          CREATE VIEW aCmsArticleViewFull as\n            select a.*,b.categoryName,e.tags,c.content,c.html from aCmsArticle a\n              left join aCmsCategory b on a.categoryId=b.id\n              left join aCmsContent c on a.id=c.itemId\n              left join aCmsArticleTag e on a.id=e.itemId\n        `;\n      await this.ctx.model.query(sql);\n\n      // alter view: aCmsArticleViewSearch\n      await this.ctx.model.query('drop view aCmsArticleViewSearch');\n      sql = `\n          CREATE VIEW aCmsArticleViewSearch as\n            select a.*,b.categoryName,e.tags,c.content,c.html,concat(d.atomName,',',c.content) contentSearch from aCmsArticle a\n              left join aCmsCategory b on a.categoryId=b.id\n              left join aCmsContent c on a.id=c.itemId\n              left join aAtom d on a.atomId=d.id\n              left join aCmsArticleTag e on a.id=e.itemId\n        `;\n      await this.ctx.model.query(sql);\n\n      // alter view: aCmsArticleViewTag\n      await this.ctx.model.query('drop view aCmsArticleViewTag');\n      sql = `\n          CREATE VIEW aCmsArticleViewTag as\n            select a.*,b.categoryName,e.tags,f.tagId from aCmsArticle a\n              left join aCmsCategory b on a.categoryId=b.id\n              left join aCmsArticleTag e on a.id=e.itemId\n              left join aCmsArticleTagRef f on a.id=f.itemId\n        `;\n      await this.ctx.model.query(sql);\n    }\n  }\n  return Version;\n};\n","module.exports = app => {\n  // const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Version {\n    async _update_4(options) {\n      // alter table: aCmsCategory\n      const sql = `\n      ALTER TABLE aCmsCategory\n        ADD COLUMN url varchar(255) DEFAULT NULL\n                `;\n      await this.ctx.model.query(sql);\n    }\n  }\n  return Version;\n};\n","const utils = require('../../common/utils.js');\n\nmodule.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Version {\n    async _update_5(options) {\n      // alter table: aCmsCategory\n      let sql = `\n      ALTER TABLE aCmsCategory\n        ADD COLUMN atomClassId int(11) DEFAULT '0'\n                `;\n      await this.ctx.model.query(sql);\n      // alter table: aCmsTag\n      sql = `\n      ALTER TABLE aCmsTag\n        ADD COLUMN atomClassId int(11) DEFAULT '0'\n                `;\n      await this.ctx.model.query(sql);\n\n      // atomClass\n      await this._update5AtomClassIds(options);\n    }\n\n    async _update5AtomClassIds(options) {\n      // all instances\n      const instances = await this.ctx.bean.instance.list({ where: {} });\n      for (const instance of instances) {\n        await this.ctx.meta.util.executeBean({\n          subdomain: instance.name,\n          beanModule: moduleInfo.relativeName,\n          beanFullName: `${moduleInfo.relativeName}.version.manager`,\n          context: options,\n          fn: '_update5AtomClassIdsInstance',\n        });\n      }\n    }\n\n    async _update5AtomClassIdsInstance() {\n      const atomClass = await utils.atomClass2(this.ctx, null);\n      // update aCmsCategory's atomClassId\n      await this.ctx.model.query(\n        `update aCmsCategory set atomClassId=?\n             where iid=?`,\n        [atomClass.id, this.ctx.instance.id]\n      );\n      // update aCmsTag's atomClassId\n      await this.ctx.model.query(\n        `update aCmsTag set atomClassId=?\n             where iid=?`,\n        [atomClass.id, this.ctx.instance.id]\n      );\n    }\n  }\n  return Version;\n};\n","module.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Version {\n    async _update_6(options) {\n      // alter table: aCmsArticle\n      let sql = `\n        ALTER TABLE aCmsArticle\n          ADD COLUMN uuid varchar(50) DEFAULT NULL\n                  `;\n      await this.ctx.model.query(sql);\n\n      // alter view: aCmsArticleView\n      await this.ctx.model.query('drop view aCmsArticleView');\n      sql = `\n          CREATE VIEW aCmsArticleView as\n            select a.*,b.categoryName,e.tags from aCmsArticle a\n              left join aCmsCategory b on a.categoryId=b.id\n              left join aCmsArticleTag e on a.id=e.itemId\n        `;\n      await this.ctx.model.query(sql);\n\n      // alter view: aCmsArticleViewFull\n      await this.ctx.model.query('drop view aCmsArticleViewFull');\n      sql = `\n          CREATE VIEW aCmsArticleViewFull as\n            select a.*,b.categoryName,e.tags,c.content,c.html from aCmsArticle a\n              left join aCmsCategory b on a.categoryId=b.id\n              left join aCmsContent c on a.id=c.itemId\n              left join aCmsArticleTag e on a.id=e.itemId\n        `;\n      await this.ctx.model.query(sql);\n\n      // alter view: aCmsArticleViewSearch\n      await this.ctx.model.query('drop view aCmsArticleViewSearch');\n      sql = `\n          CREATE VIEW aCmsArticleViewSearch as\n            select a.*,b.categoryName,e.tags,c.content,c.html,concat(d.atomName,',',c.content) contentSearch from aCmsArticle a\n              left join aCmsCategory b on a.categoryId=b.id\n              left join aCmsContent c on a.id=c.itemId\n              left join aAtom d on a.atomId=d.id\n              left join aCmsArticleTag e on a.id=e.itemId\n        `;\n      await this.ctx.model.query(sql);\n\n      // alter view: aCmsArticleViewTag\n      await this.ctx.model.query('drop view aCmsArticleViewTag');\n      sql = `\n          CREATE VIEW aCmsArticleViewTag as\n            select a.*,b.categoryName,e.tags,f.tagId from aCmsArticle a\n              left join aCmsCategory b on a.categoryId=b.id\n              left join aCmsArticleTag e on a.id=e.itemId\n              left join aCmsArticleTagRef f on a.id=f.itemId\n        `;\n      await this.ctx.model.query(sql);\n\n      // uuid\n      await this._update6Uuids(options);\n    }\n\n    async _update6Uuids(options) {\n      // all instances\n      const instances = await this.ctx.bean.instance.list({ where: {} });\n      for (const instance of instances) {\n        await this.ctx.meta.util.executeBean({\n          subdomain: instance.name,\n          beanModule: moduleInfo.relativeName,\n          beanFullName: `${moduleInfo.relativeName}.version.manager`,\n          context: options,\n          fn: '_update6UuidsInstance',\n        });\n      }\n    }\n\n    async _update6UuidsInstance() {\n      const articles = await this.ctx.model.article.select();\n      for (const article of articles) {\n        const uuid = this._parseUuid(article);\n        await this.ctx.model.article.update({\n          id: article.id,\n          uuid,\n        });\n      }\n    }\n\n    _parseUuid(article) {\n      if (!article.url) return this._uuid();\n      const matches = article.url.match(/articles\\/(.*)\\.html/);\n      if (!matches) return this._uuid();\n      if (matches[1].length !== 32) return this._uuid();\n      return matches[1];\n    }\n\n    _uuid() {\n      return this.ctx.bean.util.uuidv4();\n    }\n  }\n  return Version;\n};\n","module.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Version {\n    async _update_7(options) {\n      // update cms blocks\n      await this.ctx.model.query(`\n      update aCmsContent set content = replace (content,'cms-pluginblock:audio','cms-pluginblock:blockAudio') where content like '%cms-pluginblock:audio%'\n    `);\n      await this.ctx.model.query(`\n      update aCmsContent set content = replace (content,'cms-pluginblock:iframe','cms-pluginblock:blockIFrame') where content like '%cms-pluginblock:iframe%'\n    `);\n      // migration: languange/category/tag\n      await this._update7Migration(options);\n    }\n\n    async _update7Migration(options) {\n      // all instances\n      const instances = await this.ctx.bean.instance.list({ where: {} });\n      for (const instance of instances) {\n        await this.ctx.meta.util.executeBean({\n          subdomain: instance.name,\n          beanModule: moduleInfo.relativeName,\n          beanFullName: `${moduleInfo.relativeName}.version.manager`,\n          context: options,\n          fn: '_update7MigrationInstance',\n        });\n      }\n    }\n\n    async _update7MigrationInstance() {\n      // cagetories\n      const mapCagetoryIds = await this._update7Migration_cagetories();\n      // tags\n      const mapTagIds = await this._update7Migration_tags();\n      // articles/post\n      await this._update7Migration_articles({ mapCagetoryIds, mapTagIds });\n    }\n\n    async _update7Migration_articles({ mapCagetoryIds, mapTagIds }) {\n      // articles\n      const articles = await this.ctx.model.query(\n        `\n        select a.*,b.userIdCreated,c.tags\n           from aCmsArticle a\n           left join aAtom b on b.id=a.atomId\n           left join aCmsArticleTag c on c.atomId=a.atomId\n            where a.iid=? and a.deleted=0 and b.atomStage=1\n        `,\n        [this.ctx.instance.id]\n      );\n      // loop\n      for (const article of articles) {\n        await this._update7Migration_article({ mapCagetoryIds, mapTagIds, article });\n      }\n    }\n\n    async _update7Migration_article({ mapCagetoryIds, mapTagIds, article }) {\n      // user\n      const user = { id: article.userIdCreated };\n      // open\n      const res = await this.ctx.bean.atom.openDraft({ key: { atomId: article.atomId }, user });\n      const draftKey = res.draft.key;\n      // atomCategoryId\n      const atomCategoryId = article.categoryId === 0 ? 0 : mapCagetoryIds[article.categoryId];\n      // atomTags\n      let atomTags = article.tags;\n      if (article.tags) {\n        const _tags = JSON.parse(article.tags);\n        atomTags = _tags.map(item => {\n          return mapTagIds[item.id];\n        });\n        atomTags = JSON.stringify(atomTags);\n      }\n      // write\n      await this.ctx.bean.atom.write({\n        key: draftKey,\n        target: null,\n        item: {\n          atomLanguage: article.language,\n          atomCategoryId,\n          atomTags,\n        },\n        options: {\n          ignoreRender: true,\n        },\n        user,\n      });\n      // submit\n      await this.ctx.bean.atom.submit({\n        key: draftKey,\n        options: {\n          ignoreRender: true,\n          ignoreFlow: true,\n        },\n        user,\n      });\n    }\n\n    async _update7Migration_tags() {\n      const mapTagIds = {};\n      const tags = await this.ctx.model.select('aCmsTag', {\n        where: {\n          iid: this.ctx.instance.id,\n          deleted: 0,\n        },\n      });\n      for (const tag of tags) {\n        await this._update7Migration_tag({ mapTagIds, tags, tag });\n      }\n      return mapTagIds;\n    }\n\n    async _update7Migration_tag({ mapTagIds, tag }) {\n      const tagIdNew = await this.ctx.bean.tag.add({\n        atomClass: { id: tag.atomClassId },\n        data: {\n          language: tag.language,\n          tagName: tag.tagName,\n          tagAtomCount: tag.articleCount,\n        },\n      });\n      mapTagIds[tag.id] = tagIdNew;\n      return tagIdNew;\n    }\n\n    async _update7Migration_cagetories() {\n      const mapCagetoryIds = {};\n      const categories = await this.ctx.model.select('aCmsCategory', {\n        where: {\n          iid: this.ctx.instance.id,\n          deleted: 0,\n        },\n      });\n      for (const category of categories) {\n        await this._update7Migration_cagetory({ mapCagetoryIds, categories, category });\n      }\n      return mapCagetoryIds;\n    }\n    async _update7Migration_cagetory({ mapCagetoryIds, categories, category }) {\n      if (category.__parsed) return mapCagetoryIds[category.id];\n      let categoryIdParent = 0;\n      if (category.categoryIdParent > 0) {\n        const categoryParent = categories.find(item => item.id === category.categoryIdParent);\n        categoryIdParent = await this._update7Migration_cagetory({\n          mapCagetoryIds,\n          categories,\n          category: categoryParent,\n        });\n      }\n      const categoryIdNew = await this.ctx.bean.category.add({\n        atomClass: { id: category.atomClassId },\n        data: {\n          language: category.language,\n          categoryName: category.categoryName,\n          categoryHidden: category.hidden,\n          categorySorting: category.sorting,\n          categoryFlag: category.flag,\n          categoryUrl: category.url,\n          categoryIdParent,\n        },\n      });\n      category.__parsed = true;\n      mapCagetoryIds[category.id] = categoryIdNew;\n      return categoryIdNew;\n    }\n  }\n  return Version;\n};\n","module.exports = app => {\n  // const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Version {\n    async _update_8(options) {\n      // schemas update for 7\n      await this._update7Migration_schemas(options);\n    }\n    async _update7Migration_schemas() {\n      let sql;\n      // aCmsArticle\n      sql = `\n        ALTER TABLE aCmsArticle\n          DROP COLUMN categoryId,\n          DROP COLUMN language\n        `;\n      await this.ctx.model.query(sql);\n      // aCmsArticleTag\n      sql = 'DROP TABLE aCmsArticleTag';\n      await this.ctx.model.query(sql);\n      // aCmsArticleTagRef\n      sql = 'DROP TABLE aCmsArticleTagRef';\n      await this.ctx.model.query(sql);\n      // aCmsCategory\n      sql = 'DROP TABLE aCmsCategory';\n      await this.ctx.model.query(sql);\n      // aCmsTag\n      sql = 'DROP TABLE aCmsTag';\n      await this.ctx.model.query(sql);\n      // aCmsArticleView\n      sql = 'DROP VIEW aCmsArticleView';\n      await this.ctx.model.query(sql);\n      // aCmsArticleViewFull\n      await this.ctx.model.query('drop view aCmsArticleViewFull');\n      sql = `\n          CREATE VIEW aCmsArticleViewFull as\n            select a.*,b.content,b.html from aCmsArticle a\n              left join aCmsContent b on a.id=b.itemId\n        `;\n      await this.ctx.model.query(sql);\n      // aCmsArticleViewSearch\n      await this.ctx.model.query('drop view aCmsArticleViewSearch');\n      sql = `\n          CREATE VIEW aCmsArticleViewSearch as\n            select a.*,b.content,b.html,concat(c.atomName,',',b.content) contentSearch from aCmsArticle a\n              left join aCmsContent b on a.id=b.itemId\n              left join aAtom c on a.atomId=c.id\n        `;\n      await this.ctx.model.query(sql);\n      // aCmsArticleViewTag\n      await this.ctx.model.query('drop view aCmsArticleViewTag');\n    }\n  }\n  return Version;\n};\n","module.exports = app => {\n  // const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Version {\n    async _update_9(options) {\n      // drop column: aCmsContent.itemId\n      const sql = `\n      ALTER TABLE aCmsContent\n        DROP COLUMN itemId\n    `;\n      await this.ctx.db.query(sql);\n\n      // drop view: aCmsArticleViewFull\n      await this.ctx.model.query('drop view aCmsArticleViewFull');\n\n      // drop view: aCmsArticleViewSearch\n      await this.ctx.model.query('drop view aCmsArticleViewSearch');\n    }\n  }\n  return Version;\n};\n","const versionManager = require('./bean/version.manager.js');\nconst localBuild = require('./bean/local.build.js');\nconst localRender = require('./bean/local.render.js');\nconst localSite = require('./bean/local.site.js');\nconst queueRender = require('./bean/queue.render.js');\nconst startupRegisterAllWatchers = require('./bean/startup.registerAllWatchers.js');\nconst startupRegisterDevelopment = require('./bean/startup.registerDevelopment.js');\nconst atomArticle = require('./bean/atom.article.js');\nconst beanCms = require('./bean/bean.cms.js');\nconst ioMessageHotloadFile = require('./bean/io.message.hotloadFile.js');\n\nmodule.exports = app => {\n  const beans = {\n    // version\n    'version.manager': {\n      mode: 'app',\n      bean: versionManager,\n    },\n    // local\n    'local.build': {\n      mode: 'app',\n      bean: localBuild,\n    },\n    'local.render': {\n      mode: 'ctx',\n      bean: localRender,\n    },\n    'local.site': {\n      mode: 'ctx',\n      bean: localSite,\n    },\n    // queue\n    'queue.render': {\n      mode: 'app',\n      bean: queueRender,\n    },\n    // startup\n    'startup.registerAllWatchers': {\n      mode: 'app',\n      bean: startupRegisterAllWatchers,\n    },\n    'startup.registerDevelopment': {\n      mode: 'app',\n      bean: startupRegisterDevelopment,\n    },\n    // atom\n    'atom.article': {\n      mode: 'app',\n      bean: atomArticle,\n    },\n    // global\n    cms: {\n      mode: 'ctx',\n      bean: beanCms,\n      global: true,\n    },\n    // io\n    'io.message.hotloadFile': {\n      mode: 'ctx',\n      bean: ioMessageHotloadFile,\n    },\n  };\n  return beans;\n};\n","const require3 = require('require3');\nconst trimHtml = require3('@zhennann/trim-html');\n\nmodule.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class AtomCmsBase extends app.meta.AtomBase {\n    get modelArticle() {\n      return this.ctx.model.module(moduleInfo.relativeName).article;\n    }\n\n    get modelContent() {\n      return this.ctx.model.module(moduleInfo.relativeName).content;\n    }\n\n    get moduleConfig() {\n      return this.ctx.config.module(moduleInfo.relativeName);\n    }\n\n    async create({ atomClass, item, options, user }) {\n      const atomStage = item.atomStage;\n      // super\n      const key = await super.create({ atomClass, item, options, user });\n      // article\n      let editMode;\n      let slug;\n      if (atomStage === 0) {\n        // draft init\n        const site = await this.ctx.bean.cms.render.combineSiteBase({ atomClass, mergeConfigSite: true });\n        editMode = this.ctx.bean.util.getProperty(site, 'edit.mode') || 0;\n        slug = null;\n      } else {\n        // copy init\n        const srcItem = options.createOptions.srcItem;\n        editMode = srcItem.editMode;\n        slug = srcItem.slug;\n      }\n      // add article\n      const params = {\n        atomId: key.atomId,\n        editMode,\n        slug,\n      };\n      // uuid\n      params.uuid = item.uuid || this.ctx.bean.util.uuidv4();\n      // insert\n      await this.modelArticle.insert(params);\n      // add content\n      await this.modelContent.insert({\n        atomId: key.atomId,\n        content: '',\n      });\n      return { atomId: key.atomId };\n    }\n\n    async read({ atomClass, options, key, user }) {\n      // super\n      const item = await super.read({ atomClass, options, key, user });\n      if (!item) return null;\n      // read: showSorting=true\n      this._cms_getMeta(options, item, true);\n      // ok\n      return item;\n    }\n\n    async select({ atomClass, options, items, user }) {\n      // super\n      await super.select({ atomClass, options, items, user });\n      // select\n      const showSorting = options && options.category;\n      for (const item of items) {\n        this._cms_getMeta(options, item, showSorting);\n      }\n    }\n\n    async write({ atomClass, target, key, item, options, user }) {\n      const atomStage = item.atomStage;\n      // super\n      if (!target) {\n        await super.write({ atomClass, target, key, item, options, user });\n      }\n      // write cms\n      await this._write_cms({ atomStage, target, key, item, options, user });\n      // super\n      if (target) {\n        await super.write({ atomClass, target, key, item, options, user });\n      }\n      // render\n      const ignoreRender = options && options.ignoreRender;\n      const renderSync = options && options.renderSync;\n      if (!ignoreRender) {\n        if (atomStage === 0 || atomStage === 1) {\n          const inner = atomStage === 0;\n          if (renderSync) {\n            await this.ctx.bean.cms.render._renderArticlePushAsync({ atomClass, key, inner });\n          } else {\n            await this.ctx.bean.cms.render._renderArticlePush({ atomClass, key, inner });\n          }\n        }\n      }\n    }\n\n    async _write_cms({ atomStage, target, key, item, options, user }) {\n      // get atom for safety\n      const atomOld = await this.ctx.bean.atom.read({ key, user });\n      // if undefined then old\n      const fields = [\n        // 'atomLanguage',\n        'slug',\n        'editMode',\n        'content',\n        'sticky',\n        'keywords',\n        'description',\n        'sorting',\n        'flag',\n        'extra',\n      ];\n      for (const field of fields) {\n        if (item[field] === undefined) item[field] = atomOld[field];\n      }\n      // clone\n      if (target === 'clone') {\n        item.slug = null; // clear slug\n      } else if (item.slug) {\n        item.slug = item.slug.trim();\n      }\n      // url\n      let url;\n      const draftExt = atomStage === 0 ? '.draft' : '';\n      if (item.slug) {\n        url = `articles/${item.slug}${draftExt}.html`;\n      } else {\n        url = `articles/${atomOld.uuid}${draftExt}.html`;\n      }\n      // image first\n      let imageFirst = '';\n      if (item.editMode === 1) {\n        const matches = item.content && item.content.match(/!\\[[^\\]]*?\\]\\(([^\\)]*?)\\)/);\n        imageFirst = (matches && matches[1]) || '';\n        if (imageFirst.length > 255) {\n          imageFirst = '';\n        }\n      }\n      // audio first\n      let audioFirst = '';\n      let audioCoverFirst = '';\n      if (item.editMode === 1) {\n        const matches = item.content && item.content.match(/\\$\\$\\$\\s*a-markdownblock:audio([\\s\\S]*?)\\$\\$\\$/);\n        let options = matches && matches[1];\n        if (options) {\n          options = global.JSON5.parse(options);\n          if (options && options.audio) {\n            if (Array.isArray(options.audio)) {\n              audioFirst = options.audio[0].url;\n              audioCoverFirst = options.audio[0].cover;\n            } else {\n              audioFirst = options.audio.url;\n              audioCoverFirst = options.audio.cover;\n            }\n          }\n        }\n      }\n      if (audioCoverFirst.length > 255) {\n        audioCoverFirst = '';\n      }\n      if (audioCoverFirst && !imageFirst) {\n        imageFirst = audioCoverFirst;\n      }\n      // html\n      const html = await this._renderContent({ item, atomId: key.atomId });\n      const summary = this._parseSummary({ item, html });\n      // update article\n      await this.modelArticle.update(\n        {\n          sticky: item.sticky,\n          keywords: item.keywords,\n          description: item.description,\n          summary,\n          url,\n          editMode: item.editMode,\n          slug: item.slug,\n          sorting: item.sorting,\n          flag: item.flag,\n          extra: item.extra || '{}',\n          imageCover: item.imageCover,\n          imageFirst,\n          audioFirst,\n          audioCoverFirst,\n        },\n        {\n          where: {\n            atomId: key.atomId,\n          },\n        }\n      );\n      // update content\n      await this.ctx.model.query('update aCmsContent a set a.content=?, a.html=? where a.iid=? and a.atomId=?', [\n        item.content,\n        html,\n        this.ctx.instance.id,\n        key.atomId,\n      ]);\n    }\n\n    async _renderContent({ item, atomId }) {\n      // editMode\n      const editMode = item.editMode;\n      // html\n      let html = '';\n      // not use item.html directly, for maybe handled twice\n      // if (item.html) {\n      //  html = item.html;\n      // } else {\n      if (editMode === 0) {\n        // 0: custom\n        //   same as plain text\n        // html = item.html || '';\n        html = item.content || '';\n      } else if (editMode === 1) {\n        // 1: markdown\n        //   always renderMarkdown, for html maybe different for stage:0/1\n        html = await this.ctx.bean.markdown.render({\n          host: {\n            atom: item,\n            atomId,\n          },\n          content: item.content,\n          locale: item.atomLanguage,\n        });\n      } else if (editMode === 2) {\n        // 2: html\n        html = item.content || '';\n      } else {\n        // not supported\n        // do nothing\n      }\n      // }\n      // title\n      const title = this.ctx.bean.util.escapeHtml(item.atomName);\n      html = `<!-- ${title} -->\\r\\n` + html;\n      // ok\n      return html;\n    }\n\n    _parseSummary({ item, html }) {\n      // summary\n      let summary;\n      if (html) {\n        const res = trimHtml(html, this.moduleConfig.article.trim);\n        summary = res.html.trim();\n      }\n      if (!summary) {\n        summary = item.description || '';\n      }\n      // ok\n      return summary;\n    }\n\n    async delete({ atomClass, key, options, user }) {\n      // get atom for safety\n      const atomOld = await this.ctx.bean.atom.read({ key, user });\n\n      // delete article\n      //   always renderSync=false\n      if (atomOld.atomStage === 0) {\n        await this.ctx.bean.cms.render._deleteArticlePush({ atomClass, key, article: atomOld, inner: true });\n      }\n      if (atomOld.atomStage === 1) {\n        await this.ctx.bean.cms.render._deleteArticlePush({ atomClass, key, article: atomOld, inner: false });\n      }\n\n      // super\n      await super.delete({ atomClass, key, options, user });\n\n      // delete article\n      await this.modelArticle.delete({\n        atomId: key.atomId,\n      });\n      // delete content\n      await this.modelContent.delete({\n        atomId: key.atomId,\n      });\n    }\n\n    _cms_getMeta(options, item, showSorting) {\n      const meta = this._ensureItemMeta(item);\n      // meta.flags\n      if (item.sticky) meta.flags.push(this.ctx.text('Sticky'));\n      if (item.sorting && showSorting) meta.flags.push(item.sorting);\n      // meta.summary\n      meta.summary = item.description || item.summary;\n      // atomNameSub\n      if (item.atomNameSub) {\n        item.atomNameFull = `${item.atomName}: ${item.atomNameSub}`;\n      }\n    }\n  }\n  return AtomCmsBase;\n};\n","module.exports = {\n  atomClass(atomClass) {\n    let _atomClass;\n    if (atomClass) {\n      _atomClass = {\n        module: atomClass.module,\n        atomClassName: atomClass.atomClassName,\n        atomClassIdParent: atomClass.atomClassIdParent || 0,\n      };\n      if (atomClass.id) _atomClass.id = atomClass.id;\n    } else {\n      _atomClass = {\n        module: 'a-cms',\n        atomClassName: 'article',\n        atomClassIdParent: 0,\n      };\n    }\n    return _atomClass;\n  },\n  async atomClass2(ctx, atomClass) {\n    const _atomClass = this.atomClass(atomClass);\n    if (!_atomClass.id) {\n      const res = await ctx.bean.atomClass.get(_atomClass);\n      _atomClass.id = res.id;\n    }\n    return _atomClass;\n  },\n};\n","const path = require('path');\nconst require3 = require('require3');\nconst chokidar = require3('chokidar');\nconst debounce = require3('debounce');\nconst eggBornUtils = require3('egg-born-utils');\n\nmodule.exports = function (app) {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Watcher {\n    constructor() {\n      this._watchers = {};\n      this._freezeCounter = 0;\n      this._needReload = false;\n      this._reloadDebounce = debounce(() => {\n        if (this._freezeCounter === 0 && this._needReload) {\n          this._needReload = false;\n          this._reloadByAgent();\n        }\n      }, 1000);\n      this._init();\n    }\n\n    _init() {\n      if (app.meta.inApp) {\n        // app\n        app.meta.messenger.addProvider({\n          name: 'a-cms:watcherChange',\n          handler: async info => {\n            await this._change(info);\n          },\n        });\n      } else {\n        // agent\n        app.meta.messenger.addProvider({\n          name: 'a-cms:watcherRegister',\n          handler: info => {\n            this._register(info);\n          },\n        });\n        app.meta.messenger.addProvider({\n          name: 'a-cms:watcherRegisterLanguages',\n          handler: info => {\n            this._registerLanguages(info);\n          },\n        });\n        app.meta.messenger.addProvider({\n          name: 'a-cms:reload',\n          handler: info => {\n            this._reloadByApp(info);\n          },\n        });\n      }\n    }\n\n    // called by app\n    register(info) {\n      app.meta.messenger.callAgent({ name: 'a-cms:watcherRegister', data: info });\n    }\n\n    // called by app\n    registerLanguages(info) {\n      app.meta.messenger.callAgent({ name: 'a-cms:watcherRegisterLanguages', data: info });\n    }\n\n    // called by app\n    reload({ action }) {\n      app.meta.messenger.callAgent({ name: 'a-cms:reload', data: { action } });\n    }\n\n    _getWatcherKey({ development, subdomain, atomClass }) {\n      if (development) return 'development';\n      return `${subdomain}&&${atomClass.module}&&${atomClass.atomClassName}`;\n    }\n\n    _getWatcherAtomClass({ development, subdomain, atomClass }) {\n      const watcherKey = this._getWatcherKey({ development, subdomain, atomClass });\n      if (!this._watchers[watcherKey]) {\n        this._watchers[watcherKey] = {};\n      }\n      return this._watchers[watcherKey];\n    }\n\n    _getWatcherAtomClassLanguage({ development, subdomain, atomClass, language }) {\n      const watchers = this._getWatcherAtomClass({ development, subdomain, atomClass });\n      if (!watchers[language]) {\n        watchers[language] = {};\n      }\n      return watchers[language];\n    }\n\n    // invoked in agent\n    _registerLanguages({ info, watcherInfos }) {\n      // clear\n      const watchers = this._getWatcherAtomClass({ subdomain: info.subdomain, atomClass: info.atomClass });\n      for (const language in watchers) {\n        const watcherEntry = watchers[language];\n        if (watcherEntry.watcher) {\n          watcherEntry.watcher.close();\n          watcherEntry.watcher = null;\n        }\n      }\n      // register\n      for (const watcherInfo of watcherInfos) {\n        this._register(watcherInfo);\n      }\n    }\n\n    // invoked in agent\n    _register({ development, subdomain, atomClass, language, watchers }) {\n      // watchers\n      if (development) {\n        watchers = this._collectDevelopmentWatchDirs();\n      }\n      // watcherEntry\n      const watcherEntry = this._getWatcherAtomClassLanguage({ development, subdomain, atomClass, language });\n      watcherEntry.info = { development, subdomain, atomClass, language, watchers };\n      // close\n      if (watcherEntry.watcher) {\n        const _watcher = watcherEntry.watcher;\n        if (!_watcher.__eb_closed) {\n          if (_watcher.__eb_ready) {\n            _watcher.close();\n          } else {\n            _watcher.__eb_closing = true;\n          }\n        }\n        watcherEntry.watcher = null;\n      }\n      // watcher\n      const _watcher = chokidar.watch(watchers).on(\n        'change',\n        debounce(info => {\n          if (development) {\n            this._developmentChange(info);\n          } else {\n            app.meta.messenger.callRandom({\n              name: 'a-cms:watcherChange',\n              data: { subdomain, atomClass, language },\n            });\n          }\n        }, 300)\n      );\n      // on ready\n      _watcher.once('ready', function () {\n        _watcher.__eb_ready = true;\n        if (_watcher.__eb_closing) {\n          _watcher.close();\n          _watcher.__eb_closed = true;\n        }\n      });\n      // ok\n      watcherEntry.watcher = _watcher;\n    }\n\n    // invoked in app\n    async _change({ subdomain, atomClass, language }) {\n      app.meta.queue.push({\n        subdomain,\n        module: moduleInfo.relativeName,\n        queueName: 'render',\n        queueNameSub: `${atomClass.module}:${atomClass.atomClassName}`,\n        data: {\n          queueAction: 'buildLanguage',\n          atomClass,\n          language,\n        },\n      });\n    }\n\n    // invoked in agent\n    _collectDevelopmentWatchDirs() {\n      const pathSrc = path.resolve(app.config.baseDir, '..');\n      let watchDirs = eggBornUtils.tools.globbySync(`${pathSrc}/**/backend/src`, { onlyDirectories: true });\n      watchDirs = [path.join(pathSrc, 'backend/config')].concat(watchDirs);\n      return watchDirs;\n    }\n\n    // invoked in agent\n    _developmentChange(info) {\n      app.logger.warn(`[agent:development] reload worker because ${info} changed`);\n      this._reloadByApp({ action: 'now' });\n    }\n\n    // invoked in agent\n    _reloadByAgent() {\n      process.send({\n        to: 'master',\n        action: 'reload-worker',\n      });\n    }\n\n    //  invoked in agent\n    _reloadByApp({ action }) {\n      if (action === 'now') {\n        if (this._freezeCounter > 0) {\n          this._needReload = true;\n        } else {\n          this._reloadByAgent();\n        }\n      } else if (action === 'freeze') {\n        this._freezeCounter++;\n      } else if (action === 'unfreeze') {\n        this._freezeCounter--;\n        if (this._freezeCounter === 0 && this._needReload) {\n          this._reloadDebounce();\n        }\n      }\n    }\n  }\n\n  return Watcher;\n};\n","// eslint-disable-next-line\nmodule.exports = appInfo => {\n  const config = {};\n\n  // queues\n  config.queues = {\n    render: {\n      bean: 'render',\n      concurrency: true,\n    },\n  };\n\n  // startups\n  config.startups = {\n    registerAllWatchers: {\n      bean: 'registerAllWatchers',\n      instance: true,\n      debounce: true,\n    },\n    registerDevelopment: {\n      bean: 'registerDevelopment',\n      debounce: true,\n    },\n  };\n\n  // article\n  config.article = {\n    trim: {\n      limit: 100,\n      wordBreak: false,\n      preserveTags: false,\n    },\n  };\n\n  // site\n  config.cms = {};\n  config.cms.site = {\n    base: {\n      title: 'my blog',\n      subTitle: 'gone with the wind',\n      description: '',\n      keywords: '',\n    },\n    host: {\n      url: 'http://localhost',\n      rootPath: 'cms-test',\n    },\n    language: {\n      default: 'en-us',\n      items: 'en-us,zh-cn',\n    },\n    themes: {\n      'en-us': 'cms-themeblog',\n      'zh-cn': 'cms-themeblog',\n    },\n    edit: {\n      mode: 1, // markdown\n    },\n    env: {\n      format: {\n        date: 'YYYY-MM-DD',\n        time: 'HH:mm:ss',\n      },\n      article2: {\n        recentNum: 5,\n      },\n      comment: {\n        order: 'asc',\n        recentNum: 5,\n      },\n      brother: {\n        order: 'desc',\n      },\n      loadMore: {\n        loadOnScroll: false,\n      },\n    },\n    profile: {\n      userName: 'zhennann',\n      motto: 'Less is more, while more is less.',\n      avatar: 'assets/images/avatar.jpg',\n      url: 'index.html',\n      extra: '',\n    },\n    beian: {\n      icp: '',\n    },\n  };\n\n  //\n  return config;\n};\n","// error code should start from 1001\nmodule.exports = {\n  1001: 'Language must not be Empty',\n  1002: 'Theme %s:%s:%s not Set',\n  1003: 'Theme %s not Found',\n  1004: 'Cannot delete if has children',\n  1005: 'Cannot delete if has articles',\n  1006: 'Build Site First',\n};\n","module.exports = {\n  PersonalProfile: 'Profile',\n  AuthorProfile: 'Author Profile',\n  ArticlePrevious: 'Previous',\n  ArticleNext: 'Next',\n  second2: 's',\n};\n","module.exports = {\n  All: '所有',\n  Article: '文章',\n  Catalog: '目录',\n  Category: '目录',\n  Categories: '目录',\n  Comment: '评论',\n  Comments: '评论',\n  Language: '语言',\n  Publish: '发布',\n  Publishing: '发布中',\n  Published: '已发布',\n  Search: '搜索',\n  Submit: '提交',\n  Sorting: '排序',\n  Tag: '标签',\n  Tags: '标签',\n  Url: '链接',\n  'CMS(Base)': 'CMS(基本)',\n  'Are You Sure?': '您确认吗？',\n  'Article List': '文章清单',\n  'Article List(by Category)': '文章清单(按目录)',\n  'Category Name': '目录名称',\n  'Comment Disabled': '禁止评论',\n  'Create Article': '新建文章',\n  'Language must not be Empty': '语言不允许为空',\n  'Load More': '加载更多',\n  'Post Comment': '发表评论',\n  'Recent Comments': '最近评论',\n  'Theme %s:%s:%s not Set': '没有设置主题%s:%s:%s',\n  'Theme %s not Found': '没有找到主题%s',\n  'CMS Block': 'CMS区块',\n  PersonalProfile: '个人信息',\n  AuthorProfile: '作者信息',\n  ArticlePrevious: '前一篇',\n  ArticleNext: '后一篇',\n  Yes: '是',\n  No: '否',\n  Sticky: '置顶',\n  Initialize: '初始化',\n  'Render Files': '渲染文件',\n  'Time Used': '用时',\n  seconds: '秒',\n  second2: '秒',\n  Build: '构建',\n  Block: '区块',\n  'Build Site First': '请先构建站点',\n  'Cannot delete if has children': '有子元素时不允许删除',\n  'Cannot delete if has articles': '有文章时不允许删除',\n  'CMS Article Publish': 'CMS文章发布',\n};\n","module.exports = {\n  'en-us': require('./locale/en-us.js'),\n  'zh-cn': require('./locale/zh-cn.js'),\n};\n","module.exports = app => {\n  const hotloadFile = {\n    info: {\n      bean: 'hotloadFile',\n      title: 'Hotload File',\n      persistence: false,\n    },\n  };\n  return hotloadFile;\n};\n","module.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  const info = {\n    home: {\n      mode: 'page',\n      page: '/a/basefront/atom/list?module=a-cms&atomClassName=article',\n    },\n  };\n  const content = {\n    info: {\n      atomClass: {\n        module: moduleInfo.relativeName,\n        atomClassName: 'article',\n      },\n    },\n    presets: {\n      anonymous: {\n        mobile: info,\n        pc: info,\n      },\n      authenticated: {\n        mobile: info,\n        pc: info,\n      },\n    },\n  };\n  const _app = {\n    atomName: 'CMS',\n    atomStaticKey: 'appCms',\n    atomRevision: 5,\n    atomCategoryId: 'AppCategoryCMS',\n    description: '',\n    appIcon: ':outline:article-outline',\n    appIsolate: false,\n    appLanguage: true,\n    appCms: true,\n    content: JSON.stringify(content),\n    resourceRoles: 'root',\n    appSorting: 0,\n  };\n  return _app;\n};\n","const appCms = require('./app/appCms.js');\n// const appCmsInnerTest = require('./app/appCmsInnerTest.js');\n\nmodule.exports = app => {\n  const apps = [\n    //\n    appCms(app),\n    // appCmsInnerTest(app),\n  ];\n  return apps;\n};\n","module.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  const content = {\n    listener: null,\n    process: {\n      nodes: [\n        {\n          id: 'startEvent_1',\n          name: 'Drafting',\n          type: 'startEventAtom',\n          options: {\n            atom: {\n              module: moduleInfo.relativeName,\n              atomClassName: 'article',\n            },\n            atomStage: 0, // draft\n            conditionExpression: null,\n            task: {\n              atomState: 0, // state: drafting\n            },\n          },\n        },\n        {\n          id: 'activity_1',\n          name: 'Review',\n          type: 'activityUserTask',\n          options: {\n            atomState: 1,\n            assignees: {\n              roles: 'superuser',\n            },\n            confirmation: false,\n            bidding: true,\n            schema: {\n              write: true,\n            },\n          },\n        },\n        {\n          id: 'endEvent_1',\n          name: 'End',\n          type: 'endEventAtom',\n          options: {\n            atomState: 2,\n          },\n        },\n      ],\n      edges: [\n        {\n          id: 'edge_1',\n          source: 'startEvent_1',\n          target: 'activity_1',\n        },\n        {\n          id: 'edge_2',\n          source: 'activity_1',\n          target: 'endEvent_1',\n        },\n      ],\n    },\n  };\n  const definition = {\n    atomName: 'CMS Article Publish',\n    atomStaticKey: 'flowArticlePublish',\n    atomRevision: 102,\n    description: '',\n    content: JSON.stringify(content),\n  };\n  return definition;\n};\n","const articlePublish = require('./flowDef/articlePublish.js');\n\nmodule.exports = app => {\n  const flowDefs = [articlePublish(app)];\n  return flowDefs;\n};\n","module.exports = app => {\n  // const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  const content = {\n    layouts: {\n      list: {\n        blocks: {\n          items: {\n            component: {\n              module: 'a-cms',\n              name: 'appCmsBaseMenuLayoutBlockListItems',\n            },\n          },\n        },\n      },\n    },\n  };\n  const layout = {\n    atomName: 'CMS(Base)',\n    atomStaticKey: 'layoutAppMenuCmsBase',\n    atomRevision: 1,\n    description: '',\n    layoutTypeCode: 13,\n    content: JSON.stringify(content),\n    resourceRoles: 'root',\n  };\n  return layout;\n};\n","module.exports = app => {\n  // const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  const content = {\n    info: {\n      layout: {\n        viewSize: {\n          view: {\n            small: 'content,default',\n            medium: 'content,default',\n            large: 'content,default',\n          },\n          edit: {\n            small: 'default,content',\n            medium: 'default,content',\n            large: 'default,content',\n          },\n        },\n      },\n    },\n    layouts: {\n      base: {\n        extend: {\n          component: {\n            module: 'a-cms',\n            name: 'itemLayoutExtend',\n          },\n        },\n      },\n      default: {\n        title: 'LayoutInfo',\n        blocks: {\n          main: {\n            component: {\n              module: 'a-cms',\n              name: 'itemLayoutBlockMobileMain',\n            },\n            info: true,\n          },\n        },\n      },\n      content: {\n        title: 'LayoutContent',\n        blocks: {\n          main: {\n            component: {\n              module: 'a-cms',\n              name: 'itemLayoutBlockMobileMain',\n            },\n            markdown: true,\n          },\n        },\n      },\n    },\n  };\n  const layout = {\n    atomName: 'CMS',\n    atomStaticKey: 'layoutAtomItemCms',\n    atomRevision: 0,\n    description: '',\n    layoutTypeCode: 4,\n    content: JSON.stringify(content),\n    resourceRoles: 'root',\n  };\n  return layout;\n};\n","module.exports = app => {\n  // const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  const content = {\n    info: {\n      orders: [\n        { name: 'sticky', title: 'Sticky', by: 'desc', tableAlias: 'p' },\n        { name: 'sorting', title: 'Sorting', by: 'asc', tableAlias: 'p' },\n      ],\n    },\n    layouts: {\n      list: {},\n      table: {\n        blocks: {\n          items: {\n            columns: [\n              {\n                dataIndex: 'atomName',\n                title: 'Atom Name',\n                align: 'left',\n                component: {\n                  module: 'a-baselayout',\n                  name: 'listLayoutTableCellAtomName',\n                },\n              },\n              {\n                dataIndex: 'atomCategoryName',\n                title: 'Category',\n                align: 'left',\n              },\n              {\n                dataIndex: 'userName',\n                title: 'Creator',\n                align: 'left',\n                component: {\n                  module: 'a-baselayout',\n                  name: 'listLayoutTableCellUserName',\n                },\n              },\n              {\n                dataIndex: 'atomCreatedAt',\n                title: 'Created Time',\n                align: 'center',\n                params: {\n                  dateFormat: {\n                    lines: true,\n                  },\n                },\n              },\n              {\n                dataIndex: 'atomUpdatedAt',\n                title: 'Modification Time',\n                align: 'center',\n                params: {\n                  dateFormat: {\n                    lines: true,\n                  },\n                },\n              },\n            ],\n          },\n        },\n      },\n    },\n  };\n  const layout = {\n    atomName: 'CMS',\n    atomStaticKey: 'layoutAtomListCms',\n    atomRevision: 1,\n    description: '',\n    layoutTypeCode: 3,\n    content: JSON.stringify(content),\n    resourceRoles: 'root',\n  };\n  return layout;\n};\n","const layoutAtomItemCms = require('./layout/layoutAtomItemCms.js');\nconst layoutAtomListCms = require('./layout/layoutAtomListCms.js');\nconst layoutAppMenuCmsBase = require('./layout/layoutAppMenuCmsBase.js');\n\nmodule.exports = app => {\n  const layouts = [\n    //\n    layoutAtomItemCms(app),\n    layoutAtomListCms(app),\n    layoutAppMenuCmsBase(app),\n  ];\n  return layouts;\n};\n","module.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  const resources = [\n    // menu\n    {\n      atomName: 'Create Article',\n      atomStaticKey: 'createArticle',\n      atomRevision: -1,\n      atomCategoryId: 'a-base:menu.General',\n      resourceType: 'a-base:menu',\n      resourceConfig: JSON.stringify({\n        module: moduleInfo.relativeName,\n        atomClassName: 'article',\n        atomAction: 'create',\n      }),\n      resourceIcon: '::add',\n      appKey: 'a-cms:appCms',\n      resourceRoles: 'template.cms-writer',\n    },\n    {\n      atomName: 'Article List',\n      atomStaticKey: 'listArticle',\n      atomRevision: -1,\n      atomCategoryId: 'a-base:menu.General',\n      resourceType: 'a-base:menu',\n      resourceConfig: JSON.stringify({\n        module: moduleInfo.relativeName,\n        atomClassName: 'article',\n        atomAction: 'read',\n      }),\n      resourceIcon: ':outline:data-list-outline',\n      appKey: 'a-cms:appCms',\n      resourceRoles: 'root',\n    },\n  ];\n  return resources;\n};\n","module.exports = app => {\n  const keywords = {};\n  return keywords;\n};\n","module.exports = app => {\n  // const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  const schemas = {};\n  // article\n  schemas.article = {\n    type: 'object',\n    properties: {\n      // title\n      __groupTitle: {\n        ebType: 'group-flatten',\n        ebTitle: 'Title',\n      },\n      atomName: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Atom Name',\n        notEmpty: true,\n      },\n      // content\n      __groupContent: {\n        ebType: 'group-flatten',\n        ebTitle: 'Content',\n      },\n      content: {\n        type: 'string',\n        ebType: 'markdown-content-cms',\n        ebTitle: 'Content',\n      },\n      // Basic Info\n      __groupBasicInfo: {\n        ebType: 'group-flatten',\n        ebTitle: 'Basic Info',\n      },\n      atomLanguage: {\n        type: 'string',\n        ebType: 'language',\n        ebTitle: 'Language',\n        notEmpty: true,\n      },\n      atomCategoryId: {\n        type: 'number',\n        ebType: 'category',\n        ebTitle: 'Category',\n        notEmpty: true,\n      },\n      atomTags: {\n        type: ['string', 'null'],\n        ebType: 'tags',\n        ebTitle: 'Tags',\n      },\n      keywords: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Keywords',\n      },\n      description: {\n        type: 'string',\n        ebType: 'text',\n        ebParams: {\n          textarea: true,\n        },\n        ebTitle: 'Description',\n      },\n      imageCover: {\n        type: 'string',\n        ebType: 'image',\n        ebTitle: 'ArticleCover',\n      },\n      // Extra\n      __groupExtra: {\n        ebType: 'group-flatten',\n        ebTitle: 'Extra',\n      },\n      slug: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Slug',\n        'x-slug': true,\n      },\n      sticky: {\n        type: 'boolean',\n        ebType: 'toggle',\n        ebTitle: 'Sticky',\n        default: false,\n      },\n      sorting: {\n        type: 'number',\n        ebType: 'text',\n        ebTitle: 'Sorting',\n      },\n      allowComment: {\n        type: 'boolean',\n        ebType: 'toggle',\n        ebTitle: 'Allow Comment',\n        default: true,\n      },\n      flag: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Flag',\n      },\n      extra: {\n        type: 'string',\n        ebType: 'text',\n        ebParams: {\n          textarea: true,\n        },\n        ebTitle: 'Extra Attributes',\n      },\n      // editMode: {\n      //   type: 'number',\n      //   // ebType: 'text',\n      //   ebTitle: 'Edit Mode',\n      //   notEmpty: true,\n      // },\n    },\n  };\n\n  // article search\n  schemas.articleSearch = {\n    type: 'object',\n    properties: {\n      html: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Content',\n        ebSearch: {\n          tableAlias: 'q',\n        },\n      },\n    },\n  };\n\n  return schemas;\n};\n","const utils = require('../common/utils.js');\n\nmodule.exports = app => {\n  class ArticleController extends app.Controller {\n    // list\n    async list() {\n      // atomClass\n      const atomClass = utils.atomClass(this.ctx.request.body.atomClass);\n      // options\n      const options = this.ctx.request.body.options;\n      // stage\n      options.stage = 'formal';\n      // anonymous user\n      const user = await this.ctx.bean.user.anonymous();\n      // select\n      options.page = this.ctx.bean.util.page(options.page, false);\n      const items = await this.ctx.bean.atom.select({ atomClass, options, user, pageForce: false });\n      // ok\n      this.ctx.successMore(items, options.page.index, options.page.size);\n    }\n\n    // attachments\n    async attachments() {\n      // options\n      const options = this.ctx.request.body.options || {};\n      options.page = this.ctx.bean.util.page(options.page, false);\n      const items = await this.ctx.bean.file.attachments({\n        key: this.ctx.request.body.key,\n        options,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.successMore(items, options.page.index, options.page.size);\n    }\n  }\n  return ArticleController;\n};\n","const utils = require('../common/utils.js');\n\nmodule.exports = app => {\n  class CommentController extends app.Controller {\n    async all() {\n      // atomClass\n      const atomClass = utils.atomClass(this.ctx.request.body.atomClass);\n      // options\n      const options = this.ctx.request.body.options;\n      // stage\n      options.stage = 'formal';\n      // anonymous user\n      const user = await this.ctx.bean.user.anonymous();\n      // comment\n      options.comment = 1;\n      // select\n      options.page = this.ctx.bean.util.page(options.page);\n      const items = await this.ctx.bean.atom.select({ atomClass, options, user });\n      // ok\n      this.ctx.successMore(items, options.page.index, options.page.size);\n    }\n  }\n  return CommentController;\n};\n","module.exports = app => {\n  class RenderController extends app.Controller {\n    async getArticleUrl() {\n      const res = await this.ctx.service.render.getArticleUrl({\n        atomClass: this.ctx.request.body.atomClass,\n        key: this.ctx.request.body.key,\n        options: this.ctx.request.body.options,\n      });\n      this.ctx.success(res);\n    }\n  }\n  return RenderController;\n};\n","module.exports = app => {\n  // const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class RSSController extends app.Controller {\n    async feed() {\n      // params\n      //   module\n      const module = this.ctx.params.module;\n      //   atomClassName\n      const atomClassName = this.ctx.params.atomClassName;\n      //   language\n      const language = this.ctx.params.language;\n      // atomClass\n      const atomClass = { module, atomClassName };\n      // options\n      const options = {\n        language,\n        orders: [['a.updatedAt', 'desc']],\n        page: { index: 0 },\n        mode: 'default',\n      };\n      // select\n      const res = await this.ctx.meta.util.performAction({\n        method: 'post',\n        url: '/a/cms/article/list',\n        body: { atomClass, options },\n      });\n      const list = res.list;\n      // build\n      const build = this.ctx.bean.cms.build({ atomClass });\n      // site\n      const site = await build.getSite({ language });\n      // feed\n      let feed = `<rss xmlns:dc=\"http://purl.org/dc/elements/1.1/\" version=\"2.0\">\n  <channel>\n    <title><![CDATA[${site.base.title}]]></title>\n    <link>${build.getUrl(site, language, 'index.html')}</link>\n    <description><![CDATA[${site.base.description || site.base.subTitle}]]></description>\n    <language>${language}</language>\n    <generator>https://cms.cabloy.com</generator>\n`;\n      for (const article of list) {\n        feed += `\n    <item>\n      <title>\n        <![CDATA[\n          ${article.atomName}\n        ]]>\n      </title>\n      <link>\n        ${build.getUrl(site, language, article.url)}\n      </link>\n      <description>\n        <![CDATA[\n          ${article.description || article.summary}\n        ]]>\n      </description>\n      <category><![CDATA[${article.categoryName}]]></category>\n      <pubDate>${article.updatedAt}</pubDate>\n      <dc:creator><![CDATA[${article.userName}]]></dc:creator>\n    </item>\n`;\n      }\n      feed += `\n  </channel>\n</rss>\n`;\n      // ok\n      this.ctx.status = 200;\n      this.ctx.body = feed;\n      this.ctx.set('content-type', 'application/rss+xml; charset=UTF-8');\n    }\n\n    async feedComments() {\n      // params\n      //   module\n      const module = this.ctx.params.module;\n      //   atomClassName\n      const atomClassName = this.ctx.params.atomClassName;\n      //   language\n      const language = this.ctx.params.language;\n      // atomClass\n      const atomClass = { module, atomClassName };\n      // options\n      const options = {\n        orders: [['h_updatedAt', 'desc']],\n        page: { index: 0 },\n      };\n      // select\n      const res = await this.ctx.meta.util.performAction({\n        method: 'post',\n        url: '/a/cms/comment/all',\n        body: { atomClass, options },\n      });\n      const list = res.list;\n      // build\n      const build = this.ctx.bean.cms.build({ atomClass });\n      // site\n      const site = await build.getSite({ language });\n      // feed\n      let feed = `<rss xmlns:dc=\"http://purl.org/dc/elements/1.1/\" version=\"2.0\">\n  <channel>\n    <title><![CDATA[Comments for ${site.base.title}]]></title>\n    <link>${build.getUrl(site, language, 'index.html')}</link>\n    <description><![CDATA[${site.base.description || site.base.subTitle}]]></description>\n    <language>${language}</language>\n    <generator>https://cms.cabloy.com</generator>\n`;\n      for (const item of list) {\n        feed += `\n    <item>\n      <title>\n        <![CDATA[\n          Comment on ${item.atomName}\n        ]]>\n      </title>\n      <link>\n        ${build.getUrl(site, language, item.url)}#comments\n      </link>\n      <description>\n        <![CDATA[\n          ${item.h_summary}\n        ]]>\n      </description>\n      <pubDate>${item.h_updatedAt}</pubDate>\n      <dc:creator><![CDATA[${item.h_userName}]]></dc:creator>\n    </item>\n`;\n      }\n      feed += `\n  </channel>\n</rss>\n`;\n      // ok\n      this.ctx.status = 200;\n      this.ctx.body = feed;\n      this.ctx.set('content-type', 'application/rss+xml; charset=UTF-8');\n    }\n\n    async articleComments() {\n      // atomId\n      const atomId = this.ctx.params.atomId;\n      // article\n      const article = await this.ctx.bean.cms.render.getArticle({ key: { atomId }, inner: false });\n      if (!article) this.ctx.throw.module('a-base', 1002);\n      // language\n      const language = article.atomLanguage;\n      // options\n      const options = {\n        orders: [['updatedAt', 'desc']],\n        page: { index: 0 },\n      };\n      const res = await this.ctx.meta.util.performAction({\n        method: 'post',\n        url: '/a/base/comment/list',\n        body: {\n          key: { atomId },\n          options,\n        },\n      });\n      const list = res.list;\n      // atomClass\n      const atomClass = await this.ctx.bean.atomClass.get({ id: article.atomClassId });\n      // build\n      const build = this.ctx.bean.cms.build({ atomClass });\n      // site\n      const site = await build.getSite({ language });\n      // feed\n      let feed = `<rss xmlns:dc=\"http://purl.org/dc/elements/1.1/\" version=\"2.0\">\n  <channel>\n    <title><![CDATA[Comments on: ${article.atomName}]]></title>\n    <link>${build.getUrl(site, language, article.url)}</link>\n    <description><![CDATA[${article.description || article.summary}]]></description>\n    <language>${language}</language>\n    <generator>https://cms.cabloy.com</generator>\n`;\n      for (const item of list) {\n        feed += `\n    <item>\n      <title>\n        <![CDATA[\n          Comment on ${article.atomName}\n        ]]>\n      </title>\n      <link>\n        ${build.getUrl(site, language, article.url)}#comments\n      </link>\n      <description>\n        <![CDATA[\n          ${item.summary}\n        ]]>\n      </description>\n      <pubDate>${item.updatedAt}</pubDate>\n      <dc:creator><![CDATA[${item.userName}]]></dc:creator>\n    </item>\n`;\n      }\n      feed += `\n  </channel>\n</rss>\n`;\n      // ok\n      this.ctx.status = 200;\n      this.ctx.body = feed;\n      this.ctx.set('content-type', 'application/rss+xml; charset=UTF-8');\n    }\n  }\n  return RSSController;\n};\n","const utils = require('../common/utils.js');\n\nmodule.exports = app => {\n  // const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class SiteController extends app.Controller {\n    async getConfigSiteBase() {\n      const atomClass = this.ctx.request.body.atomClass;\n      const data = await this.ctx.service.site.getConfigSiteBase({ atomClass });\n      this.ctx.success({ data });\n    }\n\n    async getConfigSite() {\n      const atomClass = this.ctx.request.body.atomClass;\n      const data = await this.ctx.service.site.getConfigSite({ atomClass });\n      this.ctx.success({ data });\n    }\n\n    async setConfigSite() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const atomClass = this.ctx.request.body.atomClass;\n      const res = await this.ctx.service.site.setConfigSite({\n        atomClass,\n        data: this.ctx.request.body.data,\n      });\n      this.ctx.success(res);\n    }\n\n    async getConfigLanguagePreview() {\n      const atomClass = this.ctx.request.body.atomClass;\n      const data = await this.ctx.service.site.getConfigLanguagePreview({\n        atomClass,\n        language: this.ctx.request.body.language,\n      });\n      this.ctx.success({ data });\n    }\n\n    async getConfigLanguage() {\n      const atomClass = this.ctx.request.body.atomClass;\n      const data = await this.ctx.service.site.getConfigLanguage({\n        atomClass,\n        language: this.ctx.request.body.language,\n      });\n      this.ctx.success({ data });\n    }\n\n    async setConfigLanguage() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const atomClass = this.ctx.request.body.atomClass;\n      const res = await this.ctx.service.site.setConfigLanguage({\n        atomClass,\n        language: this.ctx.request.body.language,\n        data: this.ctx.request.body.data,\n      });\n      this.ctx.success(res);\n    }\n\n    async buildLanguage() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      // atomClass\n      const atomClass = utils.atomClass(this.ctx.request.body.atomClass);\n      const language = this.ctx.request.body.language;\n      // progress\n      const progressId = await this.ctx.bean.progress.create();\n      // build\n      this.ctx.service.site.buildLanguageQueue({ atomClass, language, progressId });\n      this.ctx.success({ progressId });\n    }\n\n    async buildLanguages() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      // atomClass\n      const atomClass = utils.atomClass(this.ctx.request.body.atomClass);\n      // progress\n      const progressId = await this.ctx.bean.progress.create();\n      // build\n      this.ctx.service.site.buildLanguagesQueue({ atomClass, progressId });\n      this.ctx.success({ progressId });\n    }\n\n    async getLanguages() {\n      const atomClass = this.ctx.request.body.atomClass;\n      const res = await this.ctx.service.site.getLanguages({ atomClass });\n      this.ctx.success(res);\n    }\n\n    async getUrl() {\n      const atomClass = this.ctx.request.body.atomClass;\n      const res = await this.ctx.service.site.getUrl({\n        atomClass,\n        language: this.ctx.request.body.language,\n        path: this.ctx.request.body.path,\n      });\n      this.ctx.success(res);\n    }\n\n    async getStats() {\n      const atomClass = this.ctx.request.body.atomClass;\n      const res = await this.ctx.service.site.getStats({\n        atomClass,\n        languages: this.ctx.request.body.languages,\n      });\n      this.ctx.success(res);\n    }\n\n    async checkFile() {\n      const res = await this.ctx.service.site.checkFile({\n        atomId: this.ctx.request.body.atomId,\n        file: this.ctx.request.body.file,\n        mtime: this.ctx.request.body.mtime,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n  }\n  return SiteController;\n};\n","const article = require('./controller/article.js');\nconst render = require('./controller/render.js');\nconst site = require('./controller/site.js');\nconst comment = require('./controller/comment.js');\nconst rss = require('./controller/rss.js');\n\nmodule.exports = app => {\n  const controllers = {\n    article,\n    render,\n    site,\n    comment,\n    rss,\n  };\n  return controllers;\n};\n","const config = require('./config/config.js');\nconst locales = require('./config/locales.js');\nconst errors = require('./config/errors.js');\nconst WatcherFn = require('./common/watcher.js');\nconst AtomCmsBaseFn = require('./common/AtomCmsBase.js');\n\nmodule.exports = app => {\n  // watcher: only in development\n  if (app.meta.isLocal) {\n    app.meta['a-cms:watcher'] = new (WatcherFn(app))();\n  }\n\n  // atomCmsBase\n  app.meta.AtomCmsBase = AtomCmsBaseFn(app);\n\n  // beans\n  const beans = require('./beans.js')(app);\n  // routes\n  const routes = require('./routes.js')(app);\n  // controllers\n  const controllers = require('./controllers.js')(app);\n  // services\n  const services = require('./services.js')(app);\n  // models\n  const models = require('./models.js')(app);\n  // meta\n  const meta = require('./meta.js')(app);\n\n  return {\n    beans,\n    routes,\n    controllers,\n    services,\n    models,\n    config,\n    locales,\n    errors,\n    meta,\n  };\n};\n","module.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  const keywords = require('./config/validation/keywords.js')(app);\n  const schemas = require('./config/validation/schemas.js')(app);\n  const socketioHotloadFile = require('./config/socketio/hotloadFile.js')(app);\n  const staticApps = require('./config/static/apps.js')(app);\n  const staticFlowDefs = require('./config/static/flowDefs.js')(app);\n  const staticResources = require('./config/static/resources.js')(app);\n  const staticLayouts = require('./config/static/layouts.js')(app);\n  const meta = {\n    base: {\n      atoms: {\n        article: {\n          info: {\n            bean: 'article',\n            title: 'Article',\n            tableName: '',\n            tableNameModes: {\n              default: '',\n              full: '',\n              search: '',\n            },\n            language: true,\n            category: true,\n            tag: true,\n            cms: true,\n            dict: {\n              states: {\n                draft: {\n                  dictKey: 'a-dictbooster:dictAtomStateDraft',\n                },\n              },\n            },\n          },\n          actions: {\n            preview: {\n              code: 101,\n              title: 'Preview',\n              actionModule: moduleInfo.relativeName,\n              actionComponent: 'action',\n              icon: { f7: '::preview' },\n              enableOnStatic: true,\n              enableOnOpened: true,\n              stage: 'draft,formal',\n            },\n          },\n          validator: 'article',\n          search: {\n            validator: 'articleSearch',\n          },\n        },\n      },\n      resources: {\n        block: {\n          title: 'CMS Block',\n        },\n      },\n      statics: {\n        'a-app.app': {\n          items: staticApps,\n        },\n        'a-flow.flowDef': {\n          items: staticFlowDefs,\n        },\n        'a-base.resource': {\n          items: staticResources,\n        },\n        'a-baselayout.layout': {\n          items: staticLayouts,\n        },\n      },\n    },\n    validation: {\n      validators: {\n        article: {\n          schemas: 'article',\n        },\n        articleSearch: {\n          schemas: 'articleSearch',\n        },\n      },\n      keywords,\n      schemas: {\n        article: schemas.article,\n        articleSearch: schemas.articleSearch,\n      },\n    },\n    settings: {\n      instance: {\n        actionPath: 'config/atomClasses',\n      },\n    },\n    event: {\n      implementations: {},\n    },\n    socketio: {\n      messages: {\n        hotloadFile: socketioHotloadFile,\n      },\n    },\n  };\n  return meta;\n};\n","module.exports = app => {\n  class Article extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aCmsArticle', options: { disableDeleted: false } });\n    }\n  }\n  return Article;\n};\n","module.exports = app => {\n  class Content extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aCmsContent', options: { disableDeleted: false } });\n    }\n  }\n  return Content;\n};\n","const article = require('./model/article.js');\nconst content = require('./model/content.js');\n\nmodule.exports = app => {\n  const models = {\n    article,\n    content,\n  };\n  return models;\n};\n","module.exports = app => {\n  const routes = [\n    // article\n    { method: 'post', path: 'article/list', controller: 'article' },\n    { method: 'post', path: 'article/attachments', controller: 'article' },\n    // comment\n    { method: 'post', path: 'comment/all', controller: 'comment' },\n    // render\n    {\n      method: 'post',\n      path: 'render/getArticleUrl',\n      controller: 'render',\n      meta: { right: { type: 'atom', action: 'read', checkFlow: true } },\n    },\n    // site\n    {\n      method: 'post',\n      path: 'site/getConfigSiteBase',\n      controller: 'site',\n      meta: { right: { type: 'resource', module: 'a-settings', name: 'settings' } },\n    },\n    {\n      method: 'post',\n      path: 'site/getConfigSite',\n      controller: 'site',\n      meta: { right: { type: 'resource', module: 'a-settings', name: 'settings' } },\n    },\n    {\n      method: 'post',\n      path: 'site/setConfigSite',\n      controller: 'site',\n      meta: { right: { type: 'resource', module: 'a-settings', name: 'settings' } },\n    },\n    {\n      method: 'post',\n      path: 'site/getConfigLanguagePreview',\n      controller: 'site',\n      meta: { right: { type: 'resource', module: 'a-settings', name: 'settings' } },\n    },\n    {\n      method: 'post',\n      path: 'site/getConfigLanguage',\n      controller: 'site',\n      meta: { right: { type: 'resource', module: 'a-settings', name: 'settings' } },\n    },\n    {\n      method: 'post',\n      path: 'site/setConfigLanguage',\n      controller: 'site',\n      meta: { right: { type: 'resource', module: 'a-settings', name: 'settings' } },\n    },\n    {\n      method: 'post',\n      path: 'site/buildLanguage',\n      controller: 'site',\n      meta: { right: { type: 'resource', module: 'a-settings', name: 'settings' } },\n    },\n    {\n      method: 'post',\n      path: 'site/buildLanguages',\n      controller: 'site',\n      meta: { right: { type: 'resource', module: 'a-settings', name: 'settings' } },\n    },\n    { method: 'post', path: 'site/getLanguages', controller: 'site' },\n    { method: 'post', path: 'site/getUrl', controller: 'site' },\n    {\n      method: 'post',\n      path: 'site/getStats',\n      controller: 'site',\n      meta: { right: { type: 'resource', module: 'a-settings', name: 'settings' } },\n    },\n    // rss\n    { method: 'get', path: 'rss/feed/article/comments/:atomId', controller: 'rss', action: 'articleComments' },\n    {\n      method: 'get',\n      path: 'rss/feed/comments/:module/:atomClassName/:language',\n      controller: 'rss',\n      action: 'feedComments',\n    },\n    { method: 'get', path: 'rss/feed/:module/:atomClassName/:language', controller: 'rss', action: 'feed' },\n    // site\n    { method: 'post', path: 'site/checkFile', controller: 'site' },\n  ];\n  return routes;\n};\n","module.exports = app => {\n  class Render extends app.Service {\n    async getArticleUrl({ atomClass, key, options }) {\n      return await this.ctx.bean.cms.render.getArticleUrl({ atomClass, key, options });\n    }\n\n    // site<plugin<theme<site(db)<language(db)\n    async combineSiteBase({ atomClass, mergeConfigSite }) {\n      return await this.ctx.bean.cms.render.combineSiteBase({ atomClass, mergeConfigSite });\n    }\n  }\n\n  return Render;\n};\n","module.exports = app => {\n  class Site extends app.Service {\n    async getSite({ atomClass, language, options }) {\n      return await this.ctx.bean.cms.site.getSite({ atomClass, language, options });\n    }\n\n    async getConfigSiteBase({ atomClass }) {\n      return await this.ctx.bean.cms.site.getConfigSiteBase({ atomClass });\n    }\n\n    async getConfigSite({ atomClass }) {\n      return await this.ctx.bean.cms.site.getConfigSite({ atomClass });\n    }\n\n    // save site config\n    async setConfigSite({ atomClass, data }) {\n      return await this.ctx.bean.cms.site.setConfigSite({ atomClass, data });\n    }\n\n    async getConfigLanguagePreview({ atomClass, language }) {\n      return await this.ctx.bean.cms.site.getConfigLanguagePreview({ atomClass, language });\n    }\n\n    async getConfigLanguage({ atomClass, language }) {\n      return await this.ctx.bean.cms.site.getConfigLanguage({ atomClass, language });\n    }\n\n    // save language config\n    async setConfigLanguage({ atomClass, language, data }) {\n      return await this.ctx.bean.cms.site.setConfigLanguage({ atomClass, language, data });\n    }\n\n    async getLanguages({ atomClass }) {\n      return await this.ctx.bean.cms.site.getLanguages({ atomClass });\n    }\n\n    async getUrl({ atomClass, language, path }) {\n      return await this.ctx.bean.cms.site.getUrl({ atomClass, language, path });\n    }\n\n    buildLanguagesQueue({ atomClass, progressId }) {\n      this.ctx.bean.cms.site.buildLanguagesQueue({ atomClass, progressId });\n    }\n\n    buildLanguageQueue({ atomClass, language, progressId }) {\n      this.ctx.bean.cms.site.buildLanguageQueue({ atomClass, language, progressId });\n    }\n\n    async getStats({ atomClass, languages }) {\n      return await this.ctx.bean.cms.site.getStats({ atomClass, languages });\n    }\n\n    async checkFile({ atomId, file, mtime, user }) {\n      return await this.ctx.bean.cms.site.checkFile({ atomId, file, mtime, user });\n    }\n  }\n\n  return Site;\n};\n","const render = require('./service/render.js');\nconst site = require('./service/site.js');\n\nmodule.exports = app => {\n  const services = {\n    render,\n    site,\n  };\n  return services;\n};\n","module.exports = require(\"require3\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(9421);\n",""],"names":[],"sourceRoot":""}