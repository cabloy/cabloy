{"version":3,"file":"backend.js","mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACzBA,uBAAuB,mBAAO,CAAC,GAA2B;;AAE1D;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;ACXA;AACA;AACA;AACA;AACA;;;;;;;;ACJA;AACA;;;;;;;;ACDA;AACA;AACA;AACA;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChBA;AACA,WAAW,mBAAO,CAAC,GAAmB;AACtC,WAAW,mBAAO,CAAC,EAAmB;AACtC;;;;;;;;ACHA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACnCA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA,UAAU,yDAAyD;AACnE,UAAU,+DAA+D;AACzE;AACA,KAAK;AACL;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,iBAAiB;AACjB,eAAe;AACf;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,iBAAiB;AACjB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,mBAAmB;AACnB,iBAAiB;AACjB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,iBAAiB;AACjB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,iBAAiB;AACjB,eAAe;AACf;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC5GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,iBAAiB;AACjB,eAAe;AACf,aAAa;AACb,WAAW;AACX,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,iBAAiB;AACjB,eAAe;AACf;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,iBAAiB;AACjB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,iBAAiB;AACjB,eAAe;AACf;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChGA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,sFAAsF;AAChG,UAAU,sDAAsD;AAChE;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB,qBAAqB;AACrB,mBAAmB;AACnB,iBAAiB;AACjB,eAAe;AACf;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,iBAAiB;AACjB,eAAe;AACf;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACrFA,2BAA2B,mBAAO,CAAC,GAAgC;AACnE,2BAA2B,mBAAO,CAAC,GAAgC;AACnE,2BAA2B,mBAAO,CAAC,GAAgC;AACnE,2BAA2B,mBAAO,CAAC,GAAgC;AACnE,+BAA+B,mBAAO,CAAC,GAAoC;;AAE3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA,KAAK;AACL;AACA;AACA;;;;;;;;AC3IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV,QAAQ;AACR;AACA;AACA;;;;;;;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;;;;;;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;;;;;;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;;;;;;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;;;;;;;ACjIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;;;;;;;ACjEA,aAAa,mBAAO,CAAC,GAAsB;AAC3C,aAAa,mBAAO,CAAC,EAAsB;AAC3C,kBAAkB,mBAAO,CAAC,GAA2B;AACrD,sBAAsB,mBAAO,CAAC,GAA+B;AAC7D,aAAa,mBAAO,CAAC,GAAsB;AAC3C,kBAAkB,mBAAO,CAAC,GAA2B;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjBA,eAAe,mBAAO,CAAC,EAAoB;AAC3C,gBAAgB,mBAAO,CAAC,EAAqB;AAC7C,eAAe,mBAAO,CAAC,GAAoB;;AAE3C;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,GAAY;AACpC;AACA,iBAAiB,mBAAO,CAAC,GAAa;AACtC;AACA,sBAAsB,mBAAO,CAAC,EAAkB;AAChD;AACA,mBAAmB,mBAAO,CAAC,GAAe;AAC1C;AACA,iBAAiB,mBAAO,CAAC,GAAa;AACtC;AACA,eAAe,mBAAO,CAAC,GAAW;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC9BA;AACA;AACA,kBAAkB,mBAAO,CAAC,GAAgC;AAC1D;AACA,wBAAwB,mBAAO,CAAC,GAA4B;AAC5D,0BAA0B,mBAAO,CAAC,GAA8B;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA,oBAAoB;AACpB,kBAAkB;AAClB,iBAAiB;AACjB,KAAK;AACL;;AAEA;AACA;;;;;;;;AC1BA;AACA;AACA;AACA,mBAAmB,mCAAmC,wBAAwB;AAC9E;AACA;;AAEA;AACA;;;;;;;;ACRA,qBAAqB,mBAAO,CAAC,GAAyB;;AAEtD;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS,4DAA4D;AACnF,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS,2DAA2D;AAClF,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS,0DAA0D;AACjF,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS,8DAA8D;AACrF,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS,+DAA+D;AACtF,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS,+DAA+D;AACtF,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS,+DAA+D;AACtF,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS,8DAA8D;AACrF,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS,8DAA8D;AACrF,KAAK;AACL;AACA;AACA;AACA;AACA,cAAc,SAAS,8DAA8D;AACrF,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS,4EAA4E;AACnG,KAAK;AACL;AACA;AACA;AACA;AACA,cAAc,SAAS,4EAA4E;AACnG,KAAK;AACL;AACA;AACA;AACA;AACA,cAAc,SAAS,4EAA4E;AACnG,KAAK;AACL;AACA;AACA;AACA;AACA,cAAc,SAAS,4EAA4E;AACnG,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS,wEAAwE;AAC/F,KAAK;AACL;AACA;AACA;AACA;AACA,cAAc,SAAS,+FAA+F;AACtH,KAAK;AACL;AACA;AACA;AACA;AACA,cAAc,SAAS,wEAAwE;AAC/F,KAAK;AACL;AACA;AACA;AACA;AACA,cAAc,SAAS,wEAAwE;AAC/F,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS,+DAA+D;AACtF,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS,+DAA+D;AACtF,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS,+DAA+D;AACtF,KAAK;AACL;AACA;AACA;AACA;AACA,cAAc,SAAS,wEAAwE;AAC/F,KAAK;AACL;AACA;AACA;AACA;AACA,cAAc,SAAS,4EAA4E;AACnG,KAAK;AACL;AACA,MAAM,+DAA+D,SAAS,oCAAoC;AAClH,MAAM,kEAAkE,SAAS,oCAAoC;AACrH,MAAM,+DAA+D,SAAS,oCAAoC;AAClH;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS,kCAAkC;AACzD,KAAK;AACL;AACA;AACA;AACA;AACA,cAAc,SAAS,kCAAkC;AACzD,KAAK;AACL;AACA;AACA;AACA;AACA,cAAc,SAAS,kCAAkC;AACzD,KAAK;AACL;AACA;AACA;AACA;AACA,cAAc,SAAS,kCAAkC;AACzD,KAAK;AACL;AACA;AACA;;;;;;;;AC/MA;AACA;AACA,mBAAmB,wBAAwB;AAC3C,mDAAmD,wBAAwB;AAC3E;;AAEA,gBAAgB,+EAA+E;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA,mBAAmB,+BAA+B;AAClD,wDAAwD,+BAA+B;AACvF;;AAEA,oBAAoB,wBAAwB;AAC5C,oDAAoD,wBAAwB;AAC5E;AACA;;AAEA;AACA;;;;;;;;AChCA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB,cAAc;AAClC;AACA,iDAAiD,cAAc;AAC/D;AACA,2DAA2D,IAAI;AAC/D;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA,iBAAiB,YAAY;AAC7B;AACA,iDAAiD,oCAAoC;AACrF;AACA,2DAA2D,IAAI;AAC/D;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;;;;;;;;AChCA;AACA;AACA,oBAAoB,yBAAyB;AAC7C;AACA,2DAA2D,IAAI;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA,iBAAiB,qBAAqB;AACtC;AACA,2DAA2D,IAAI;AAC/D;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,eAAe;AACf;;AAEA,gBAAgB,qBAAqB;AACrC;AACA,2DAA2D,IAAI;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA,mBAAmB,eAAe;AAClC;AACA,2DAA2D,IAAI;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACvGA;AACA;AACA,mBAAmB,wBAAwB;AAC3C,2DAA2D,wBAAwB;AACnF;;AAEA,gBAAgB,2BAA2B;AAC3C,6DAA6D,2BAA2B;AACxF;;AAEA,mBAAmB,0BAA0B;AAC7C,+DAA+D,0BAA0B;AACzF;;AAEA,oBAAoB,wBAAwB;AAC5C,4DAA4D,wBAAwB;AACpF;AACA;;AAEA;AACA;;;;;;;;ACpBA;AACA;AACA,wBAAwB,uBAAuB;AAC/C,oDAAoD,uBAAuB;AAC3E;;AAEA,qBAAqB,+BAA+B;AACpD,iDAAiD,+BAA+B;AAChF;;AAEA,mBAAmB,kBAAkB;AACrC,wCAAwC,kBAAkB;AAC1D;AACA,eAAe;AACf;;AAEA,kBAAkB,kBAAkB;AACpC,mDAAmD,kBAAkB;AACrE;AACA,eAAe;AACf;;AAEA,iBAAiB,gCAAgC;AACjD,sCAAsC,gCAAgC;AACtE;AACA,eAAe;AACf;;AAEA,qBAAqB,kBAAkB;AACvC,sDAAsD,kBAAkB;AACxE;AACA,eAAe;AACf;;AAEA,sBAAsB,wBAAwB;AAC9C,kDAAkD,wBAAwB;AAC1E;;AAEA,wBAAwB,0BAA0B;AAClD,oDAAoD,0BAA0B;AAC9E;;AAEA,2BAA2B,0BAA0B;AACrD,uDAAuD,0BAA0B;AACjF;;AAEA,qBAAqB,wBAAwB;AAC7C,iDAAiD,wBAAwB;AACzE;;AAEA,uBAAuB,6BAA6B;AACpD,wDAAwD,6BAA6B;AACrF;AACA,eAAe;AACf;;AAEA,0BAA0B,6BAA6B;AACvD,+CAA+C,6BAA6B;AAC5E;AACA,eAAe;AACf;;AAEA;AACA;AACA;AACA,iCAAiC,YAAY;AAC7C;AACA;AACA;;AAEA;AACA;;;;;;;;ACvEA;AACA;AACA,mBAAmB,mBAAmB;AACtC,sDAAsD,UAAU,aAAa,QAAQ;AACrF;;AAEA,sBAAsB,wBAAwB;AAC9C,kDAAkD,wBAAwB;AAC1E;;AAEA,wBAAwB,0BAA0B;AAClD,oDAAoD,0BAA0B;AAC9E;;AAEA,2BAA2B,0BAA0B;AACrD,uDAAuD,0BAA0B;AACjF;;AAEA,uBAAuB,wBAAwB;AAC/C,yDAAyD,wBAAwB;AACjF;;AAEA,2BAA2B,wBAAwB;AACnD,iEAAiE,wBAAwB;AACzF;AACA;;AAEA;AACA;;;;;;;;AC5BA,aAAa,mBAAO,CAAC,GAAmB;AACxC,aAAa,mBAAO,CAAC,GAAmB;AACxC,kBAAkB,mBAAO,CAAC,GAAwB;AAClD,sBAAsB,mBAAO,CAAC,GAA4B;AAC1D,aAAa,mBAAO,CAAC,GAAmB;AACxC,kBAAkB,mBAAO,CAAC,GAAwB;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;UCjBA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;UEtBA;UACA;UACA;UACA","sources":["webpack://egg-born-module-a-baseadmin/./backend/src/bean/version.manager.js","webpack://egg-born-module-a-baseadmin/./backend/src/beans.js","webpack://egg-born-module-a-baseadmin/./backend/src/config/config.js","webpack://egg-born-module-a-baseadmin/./backend/src/config/errors.js","webpack://egg-born-module-a-baseadmin/./backend/src/config/locale/en-us.js","webpack://egg-born-module-a-baseadmin/./backend/src/config/locale/zh-cn.js","webpack://egg-born-module-a-baseadmin/./backend/src/config/locales.js","webpack://egg-born-module-a-baseadmin/./backend/src/config/static/layout/layoutAtomItemRole.js","webpack://egg-born-module-a-baseadmin/./backend/src/config/static/layout/layoutAtomItemUser.js","webpack://egg-born-module-a-baseadmin/./backend/src/config/static/layout/layoutAtomListResource.js","webpack://egg-born-module-a-baseadmin/./backend/src/config/static/layout/layoutAtomListRole.js","webpack://egg-born-module-a-baseadmin/./backend/src/config/static/layout/layoutAtomListUser.js","webpack://egg-born-module-a-baseadmin/./backend/src/config/static/layouts.js","webpack://egg-born-module-a-baseadmin/./backend/src/config/static/resources.js","webpack://egg-born-module-a-baseadmin/./backend/src/config/validation/schemas.js","webpack://egg-born-module-a-baseadmin/./backend/src/controller/atomRight.js","webpack://egg-born-module-a-baseadmin/./backend/src/controller/auth.js","webpack://egg-born-module-a-baseadmin/./backend/src/controller/authScene.js","webpack://egg-born-module-a-baseadmin/./backend/src/controller/resourceRight.js","webpack://egg-born-module-a-baseadmin/./backend/src/controller/role.js","webpack://egg-born-module-a-baseadmin/./backend/src/controller/user.js","webpack://egg-born-module-a-baseadmin/./backend/src/controllers.js","webpack://egg-born-module-a-baseadmin/./backend/src/main.js","webpack://egg-born-module-a-baseadmin/./backend/src/meta.js","webpack://egg-born-module-a-baseadmin/./backend/src/model/authProvider.js","webpack://egg-born-module-a-baseadmin/./backend/src/models.js","webpack://egg-born-module-a-baseadmin/./backend/src/routes.js","webpack://egg-born-module-a-baseadmin/./backend/src/service/atomRight.js","webpack://egg-born-module-a-baseadmin/./backend/src/service/auth.js","webpack://egg-born-module-a-baseadmin/./backend/src/service/authScene.js","webpack://egg-born-module-a-baseadmin/./backend/src/service/resourceRight.js","webpack://egg-born-module-a-baseadmin/./backend/src/service/role.js","webpack://egg-born-module-a-baseadmin/./backend/src/service/user.js","webpack://egg-born-module-a-baseadmin/./backend/src/services.js","webpack://egg-born-module-a-baseadmin/webpack/bootstrap","webpack://egg-born-module-a-baseadmin/webpack/before-startup","webpack://egg-born-module-a-baseadmin/webpack/startup","webpack://egg-born-module-a-baseadmin/webpack/after-startup"],"sourcesContent":["module.exports = app => {\n  // const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Version extends app.meta.BeanBase {\n    async update(options) {\n      if (options.version === 1) {\n        // empty\n      }\n    }\n\n    async init(options) {\n      if (options.version === 1) {\n        // empty\n      }\n\n      if (options.version === 2) {\n        // empty\n      }\n\n      if (options.version === 3) {\n        // empty\n      }\n    }\n  }\n\n  return Version;\n};\n","const versionManager = require('./bean/version.manager.js');\n\nmodule.exports = app => {\n  const beans = {\n    // version\n    'version.manager': {\n      mode: 'app',\n      bean: versionManager,\n    },\n  };\n  return beans;\n};\n","// eslint-disable-next-line\nmodule.exports = appInfo => {\n  const config = {};\n  return config;\n};\n","// error code should start from 1001\nmodule.exports = {};\n","module.exports = {\n  'Atom Right Management': 'Data Right Management',\n  AddChild: 'Add Child',\n};\n","module.exports = {\n  'Basic Admin': '基础管理',\n  'User Management': '用户管理',\n  'Role Management': '角色管理',\n  'Atom Right Management': '数据权限管理',\n  'Resource Right Management': '资源权限管理',\n  'Menu Right Management': '菜单权限管理',\n  'Function Right Management': '功能权限管理',\n  'Auth Management': '认证管理',\n  'Menu Management': '菜单管理',\n  'Category Management': '目录管理',\n  'Tag Management': '标签管理',\n  'Select Users': '选择用户',\n  Users: '用户',\n  Includes: '聚合',\n  AddChild: '添加子项',\n};\n","module.exports = {\n  'en-us': require('./locale/en-us.js'),\n  'zh-cn': require('./locale/zh-cn.js'),\n};\n","module.exports = app => {\n  // const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  const content = {\n    info: {\n      layout: {},\n    },\n    layouts: {\n      base: {\n        blocks: {\n          title: {\n            component: {\n              module: 'a-baseadmin',\n              name: 'roleItemLayoutBlockDefaultTitle',\n            },\n          },\n          subnavbar: {\n            component: {\n              module: 'a-baseadmin',\n              name: 'roleItemLayoutBlockDefaultSubnavbar',\n            },\n          },\n        },\n      },\n    },\n  };\n  const layout = {\n    atomName: 'Role',\n    atomStaticKey: 'layoutAtomItemRole',\n    atomRevision: 0,\n    description: '',\n    layoutTypeCode: 4,\n    content: JSON.stringify(content),\n    resourceRoles: 'root',\n  };\n  return layout;\n};\n","module.exports = app => {\n  // const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  const content = {\n    info: {\n      layout: {},\n    },\n    layouts: {\n      base: {\n        blocks: {\n          title: {\n            component: {\n              module: 'a-baseadmin',\n              name: 'userItemLayoutBlockDefaultTitle',\n            },\n          },\n          subnavbar: {\n            component: {\n              module: 'a-baseadmin',\n              name: 'userItemLayoutBlockDefaultSubnavbar',\n            },\n          },\n        },\n      },\n    },\n  };\n  const layout = {\n    atomName: 'User',\n    atomStaticKey: 'layoutAtomItemUser',\n    atomRevision: 0,\n    description: '',\n    layoutTypeCode: 4,\n    content: JSON.stringify(content),\n    resourceRoles: 'root',\n  };\n  return layout;\n};\n","module.exports = app => {\n  // const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  const content = {\n    info: {\n      orders: [\n        { name: 'resourceType', title: 'Resource Type', by: 'asc' },\n        { name: 'resourceSorting', title: 'Resource Sorting', by: 'asc' },\n      ],\n    },\n    layouts: {\n      list: {},\n      table: {\n        blocks: {\n          items: {\n            columns: [\n              {\n                dataIndex: 'atomName',\n                title: 'Atom Name',\n                align: 'left',\n                component: {\n                  module: 'a-baselayout',\n                  name: 'listLayoutTableCellAtomName',\n                },\n              },\n              {\n                dataIndex: 'resourceType',\n                title: 'Resource Type',\n                align: 'left',\n                params: {\n                  computed: {\n                    expression: 'record.resourceTypeLocale',\n                  },\n                },\n              },\n              {\n                dataIndex: 'atomCategoryNameLocale',\n                title: 'Category',\n                align: 'left',\n              },\n              {\n                dataIndex: 'appKey',\n                title: 'App Key',\n                align: 'left',\n                params: {\n                  computed: {\n                    expression: 'record.appNameLocale',\n                  },\n                },\n              },\n              {\n                dataIndex: 'resourceIcon',\n                title: 'Icon',\n                align: 'left',\n                component: {\n                  module: 'a-baserender',\n                  name: 'renderTableCellIcon',\n                  options: {\n                    props: {\n                      size: 24,\n                    },\n                  },\n                },\n              },\n              {\n                dataIndex: 'userName',\n                title: 'Creator',\n                align: 'left',\n                component: {\n                  module: 'a-baselayout',\n                  name: 'listLayoutTableCellUserName',\n                },\n              },\n              {\n                dataIndex: 'createdAt',\n                title: 'Created Time',\n                align: 'center',\n                params: {\n                  dateFormat: {\n                    lines: true,\n                  },\n                },\n              },\n              {\n                dataIndex: 'updatedAt',\n                title: 'Modification Time',\n                align: 'center',\n                params: {\n                  dateFormat: {\n                    lines: true,\n                  },\n                },\n              },\n            ],\n          },\n        },\n      },\n    },\n  };\n  const layout = {\n    atomName: 'Resource',\n    atomStaticKey: 'layoutAtomListResource',\n    atomRevision: 4,\n    description: '',\n    layoutTypeCode: 3,\n    content: JSON.stringify(content),\n    resourceRoles: 'root',\n  };\n  return layout;\n};\n","module.exports = app => {\n  // const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  const content = {\n    info: {\n      layout: {\n        viewSize: {\n          small: 'tree',\n          medium: 'treeTable',\n          large: 'treeTable',\n        },\n      },\n      data: {\n        adapter: {\n          providers: {\n            tree: {\n              fields: {\n                sorting: 'sorting',\n              },\n              dataSourceAdapter: {\n                component: {\n                  module: 'a-baseadmin',\n                  name: 'roleListLayoutTreeDataSourceAdapter',\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n    layouts: {\n      tree: {},\n      treeTable: {\n        blocks: {\n          items: {\n            columns: [\n              {\n                dataIndex: 'atomName',\n                title: 'Role Name',\n                align: 'left',\n                width: 300,\n                component: {\n                  module: 'a-baselayout',\n                  name: 'listLayoutTableCellAtomName',\n                },\n              },\n              {\n                dataIndex: 'roleTypeCode',\n                title: 'Role Type',\n                align: 'left',\n                params: {\n                  computed: {\n                    expression: 'record._roleTypeCodeTitleLocale',\n                  },\n                },\n              },\n              {\n                dataIndex: 'sorting',\n                title: 'Sorting',\n                align: 'left',\n              },\n              {\n                dataIndex: 'createdAt',\n                title: 'Created Time',\n                align: 'center',\n                params: {\n                  dateFormat: {\n                    lines: true,\n                  },\n                },\n              },\n              {\n                dataIndex: 'updatedAt',\n                title: 'Modification Time',\n                align: 'center',\n                params: {\n                  dateFormat: {\n                    lines: true,\n                  },\n                },\n              },\n            ],\n          },\n        },\n      },\n    },\n  };\n  const layout = {\n    atomName: 'Role',\n    atomStaticKey: 'layoutAtomListRole',\n    atomRevision: 3,\n    description: '',\n    layoutTypeCode: 3,\n    content: JSON.stringify(content),\n    resourceRoles: 'root',\n  };\n  return layout;\n};\n","module.exports = app => {\n  // const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  const content = {\n    info: {\n      ordersBase: [\n        //\n        { name: 'atomCreatedAt', title: 'Join Time', by: 'desc', tableAlias: '', default: true },\n        { name: 'atomName', title: 'Username', tableAlias: 'a' },\n      ],\n    },\n    layouts: {\n      base: {\n        extend: {\n          component: {\n            module: 'a-baseadmin',\n            name: 'userListLayoutExtend',\n          },\n        },\n      },\n      table: {\n        blocks: {\n          items: {\n            columns: [\n              {\n                dataIndex: 'atomName',\n                title: 'Username',\n                align: 'left',\n                component: {\n                  module: 'a-baselayout',\n                  name: 'listLayoutTableCellAtomName',\n                  options: {\n                    props: {\n                      mapper: {\n                        avatar: true,\n                      },\n                    },\n                  },\n                },\n              },\n              {\n                dataIndex: 'realName',\n                title: 'Realname',\n                align: 'left',\n              },\n              {\n                dataIndex: 'email',\n                title: 'Email',\n                align: 'left',\n              },\n              {\n                dataIndex: 'mobile',\n                title: 'Mobile',\n                align: 'left',\n              },\n              {\n                dataIndex: 'locale',\n                title: 'Locale',\n                align: 'left',\n              },\n              {\n                dataIndex: 'atomCreatedAt',\n                title: 'Join Time',\n                align: 'center',\n                params: {\n                  dateFormat: {\n                    lines: true,\n                  },\n                },\n              },\n            ],\n          },\n        },\n      },\n    },\n  };\n  const layout = {\n    atomName: 'User',\n    atomStaticKey: 'layoutAtomListUser',\n    atomRevision: 0,\n    description: '',\n    layoutTypeCode: 3,\n    content: JSON.stringify(content),\n    resourceRoles: 'root',\n  };\n  return layout;\n};\n","const layoutAtomItemRole = require('./layout/layoutAtomItemRole.js');\nconst layoutAtomListRole = require('./layout/layoutAtomListRole.js');\nconst layoutAtomItemUser = require('./layout/layoutAtomItemUser.js');\nconst layoutAtomListUser = require('./layout/layoutAtomListUser.js');\nconst layoutAtomListResource = require('./layout/layoutAtomListResource.js');\n\nmodule.exports = app => {\n  const layouts = [\n    layoutAtomItemRole(app), //\n    layoutAtomListRole(app),\n    layoutAtomItemUser(app),\n    layoutAtomListUser(app),\n    layoutAtomListResource(app),\n  ];\n  return layouts;\n};\n","module.exports = app => {\n  // const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  const resources = [\n    // menu\n    {\n      atomName: 'Role Management',\n      atomStaticKey: 'roleManagement',\n      atomRevision: 2,\n      atomCategoryId: 'a-base:menu.BasicAdmin',\n      resourceType: 'a-base:menu',\n      resourceConfig: JSON.stringify({\n        module: 'a-base',\n        atomClassName: 'role',\n        atomAction: 'read',\n      }),\n      resourceIcon: ':role:role',\n      appKey: 'a-appbooster:appSystem',\n      resourceRoles: 'template.system',\n      resourceSorting: 1,\n    },\n    {\n      atomName: 'User Management',\n      atomStaticKey: 'userManagement',\n      atomRevision: 2,\n      atomCategoryId: 'a-base:menu.BasicAdmin',\n      resourceType: 'a-base:menu',\n      resourceConfig: JSON.stringify({\n        module: 'a-base',\n        atomClassName: 'user',\n        atomAction: 'read',\n      }),\n      resourceIcon: '::person',\n      appKey: 'a-appbooster:appSystem',\n      resourceRoles: 'template.system',\n      resourceSorting: 2,\n    },\n    // function\n    // deprecated\n    {\n      atomName: 'User Management',\n      atomStaticKey: 'user',\n      atomRevision: -1,\n      atomCategoryId: 'a-base:function.Basic',\n      resourceType: 'a-base:function',\n      resourceConfig: JSON.stringify({\n        actionPath: '/a/baseadmin/user/list',\n      }),\n      resourceRoles: 'template.system',\n    },\n    // deprecated\n    {\n      atomName: 'Role Management',\n      atomStaticKey: 'role',\n      atomRevision: -1,\n      atomCategoryId: 'a-base:function.Basic',\n      resourceType: 'a-base:function',\n      resourceConfig: JSON.stringify({\n        actionPath: '/a/baseadmin/role/list',\n      }),\n      resourceRoles: 'template.system',\n    },\n    // deprecated\n    {\n      atomName: 'Atom Right Management',\n      atomStaticKey: 'atomRight',\n      atomRevision: -1,\n      atomCategoryId: 'a-base:function.Basic',\n      resourceType: 'a-base:function',\n      resourceConfig: JSON.stringify({\n        actionPath: '/a/baseadmin/atomRight/list',\n      }),\n      resourceRoles: 'template.system',\n    },\n    // deprecated\n    {\n      atomName: 'Resource Right Management',\n      atomStaticKey: 'resourceRight',\n      atomRevision: -1,\n      atomCategoryId: 'a-base:function.Basic',\n      resourceType: 'a-base:function',\n      resourceConfig: JSON.stringify({\n        actionPath: '/a/baseadmin/resourceRight/list',\n      }),\n      resourceRoles: 'template.system',\n    },\n    {\n      atomName: 'Auth Management',\n      atomStaticKey: 'auth',\n      atomRevision: 2,\n      atomCategoryId: 'a-base:menu.BasicAdmin',\n      resourceType: 'a-base:menu',\n      resourceConfig: JSON.stringify({\n        actionPath: '/a/baseadmin/auth/list',\n      }),\n      resourceIcon: ':role:shield-key',\n      appKey: 'a-appbooster:appSystem',\n      resourceRoles: 'template.system',\n      resourceSorting: 3,\n    },\n    {\n      atomName: 'Category Management',\n      atomStaticKey: 'category',\n      atomRevision: 2,\n      atomCategoryId: 'a-base:menu.BasicAdmin',\n      resourceType: 'a-base:menu',\n      resourceConfig: JSON.stringify({\n        actionPath: '/a/baseadmin/category/management',\n      }),\n      resourceIcon: '::folder-open',\n      appKey: 'a-appbooster:appSystem',\n      resourceRoles: 'template.system',\n      resourceSorting: 4,\n    },\n    {\n      atomName: 'Tag Management',\n      atomStaticKey: 'tag',\n      atomRevision: 2,\n      atomCategoryId: 'a-base:menu.BasicAdmin',\n      resourceType: 'a-base:menu',\n      resourceConfig: JSON.stringify({\n        actionPath: '/a/baseadmin/tag/management',\n      }),\n      resourceIcon: ':outline:label-outline',\n      appKey: 'a-appbooster:appSystem',\n      resourceRoles: 'template.system',\n      resourceSorting: 5,\n    },\n    // deprecated\n    {\n      atomName: 'Select Users',\n      atomStaticKey: 'selectUsers',\n      atomRevision: -1,\n      atomCategoryId: 'a-base:function.Basic',\n      resourceType: 'a-base:function',\n      resourceConfig: JSON.stringify({}),\n      resourceRoles: 'template.system',\n    },\n  ];\n  return resources;\n};\n","module.exports = app => {\n  const schemas = {};\n  // // role\n  // schemas.role = {\n  //   type: 'object',\n  //   properties: {\n  //     roleName: {\n  //       type: 'string',\n  //       ebType: 'text',\n  //       ebTitle: 'Role name',\n  //       notEmpty: true,\n  //     },\n  //     leader: {\n  //       type: 'number',\n  //       ebType: 'toggle',\n  //       ebTitle: 'Leader',\n  //     },\n  //     sorting: {\n  //       type: 'number',\n  //       ebType: 'text',\n  //       ebTitle: 'Sorting',\n  //     },\n  //   },\n  // };\n  // // auth\n  // schemas.auth = {\n  //   type: 'object',\n  //   properties: {\n  //     clientID: {\n  //       type: 'string',\n  //       ebType: 'text',\n  //     },\n  //     clientSecret: {\n  //       type: 'string',\n  //       ebType: 'text',\n  //     },\n  //   },\n  // };\n  return schemas;\n};\n","module.exports = app => {\n  class AtomRightController extends app.Controller {\n    async rights() {\n      const page = this.ctx.request.body.page;\n      const items = await this.service.atomRight.rights({\n        roleAtomId: this.ctx.request.body.key.atomId,\n        page,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.successMore(items, page.index, page.size);\n    }\n\n    async add() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const res = await this.service.atomRight.add({\n        roleAtomId: this.ctx.request.body.key.atomId,\n        atomClass: this.ctx.request.body.atomClass,\n        actionCode: this.ctx.request.body.actionCode,\n        scopeSelf: this.ctx.request.body.scopeSelf,\n        scope: this.ctx.request.body.scope,\n        areaKey: this.ctx.request.body.areaKey,\n        areaScope: this.ctx.request.body.areaScope,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async delete() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const res = await this.service.atomRight.delete({\n        roleAtomId: this.ctx.request.body.key.atomId,\n        roleRightId: this.ctx.request.body.roleRightId,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async spreads() {\n      const page = this.ctx.request.body.page;\n      const items = await this.service.atomRight.spreads({\n        roleAtomId: this.ctx.request.body.key.atomId,\n        page,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.successMore(items, page.index, page.size);\n    }\n  }\n  return AtomRightController;\n};\n","module.exports = app => {\n  class AuthController extends app.Controller {\n    async list() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const res = await this.service.auth.list();\n      this.ctx.success(res);\n    }\n\n    async disable() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const res = await this.service.auth.disable({\n        id: this.ctx.request.body.id,\n        disabled: this.ctx.request.body.disabled,\n      });\n      this.ctx.success(res);\n    }\n\n    async save() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const res = await this.service.auth.save({\n        id: this.ctx.request.body.id,\n        config: this.ctx.request.body.data,\n      });\n      this.ctx.success(res);\n    }\n  }\n  return AuthController;\n};\n","module.exports = app => {\n  class authSceneController extends app.Controller {\n    async disable() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const res = await this.service.authScene.disable({\n        id: this.ctx.request.body.id,\n        sceneName: this.ctx.request.body.sceneName,\n        disabled: this.ctx.request.body.disabled,\n      });\n      this.ctx.success(res);\n    }\n\n    async save() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const res = await this.service.authScene.save({\n        id: this.ctx.request.body.id,\n        sceneName: this.ctx.request.body.sceneName,\n        data: this.ctx.request.body.data,\n      });\n      this.ctx.success(res);\n    }\n\n    async add() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const res = await this.service.authScene.add({\n        id: this.ctx.request.body.id,\n        sceneName: this.ctx.request.body.sceneName,\n        data: this.ctx.request.body.data,\n      });\n      this.ctx.success(res);\n    }\n\n    async delete() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const res = await this.service.authScene.delete({\n        id: this.ctx.request.body.id,\n        sceneName: this.ctx.request.body.sceneName,\n      });\n      this.ctx.success(res);\n    }\n  }\n\n  return authSceneController;\n};\n","module.exports = app => {\n  class ResourceRightController extends app.Controller {\n    async rights() {\n      const page = this.ctx.request.body.page;\n      const items = await this.service.resourceRight.rights({\n        roleAtomId: this.ctx.request.body.key.atomId,\n        page,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.successMore(items, page.index, page.size);\n    }\n\n    async add() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const res = await this.service.resourceRight.add({\n        roleAtomId: this.ctx.request.body.key.atomId,\n        atomIds: this.ctx.request.body.atomIds,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async delete() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const res = await this.service.resourceRight.delete({\n        roleAtomId: this.ctx.request.body.key.atomId,\n        atomId: this.ctx.request.body.atomId,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async spreads() {\n      const page = this.ctx.request.body.page;\n      const items = await this.service.resourceRight.spreads({\n        roleAtomId: this.ctx.request.body.key.atomId,\n        page,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.successMore(items, page.index, page.size);\n    }\n  }\n  return ResourceRightController;\n};\n","module.exports = app => {\n  class RoleController extends app.Controller {\n    async childrenTop() {\n      const page = this.ctx.request.body.page;\n      const items = await this.service.role.childrenTop({\n        roleTypes: this.ctx.request.body.roleTypes,\n        page,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.successMore(items, page.index, page.size);\n    }\n\n    async children() {\n      const page = this.ctx.request.body.page;\n      const items = await this.service.role.children({\n        roleTypes: this.ctx.request.body.roleTypes,\n        roleId: this.ctx.request.body.roleId,\n        page,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.successMore(items, page.index, page.size);\n    }\n\n    async delete() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const res = await this.service.role.delete({\n        roleAtomId: this.ctx.request.body.key.atomId,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async clone() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const res = await this.service.role.clone({\n        roleAtomId: this.ctx.request.body.key.atomId,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async move() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const res = await this.service.role.move({\n        roleAtomId: this.ctx.request.body.key.atomId,\n        roleIdParent: this.ctx.request.body.data.roleIdParent,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async addChild() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const res = await this.service.role.addChild({\n        roleAtomId: this.ctx.request.body.key.atomId,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async roleUsers() {\n      const page = this.ctx.request.body.page;\n      const items = await this.service.role.roleUsers({\n        roleAtomId: this.ctx.request.body.key.atomId,\n        page,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.successMore(items, page.index, page.size);\n    }\n\n    async includes() {\n      const page = this.ctx.request.body.page;\n      const items = await this.service.role.includes({\n        roleAtomId: this.ctx.request.body.key.atomId,\n        page,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.successMore(items, page.index, page.size);\n    }\n\n    async addUserRole() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const res = await this.service.role.addUserRole({\n        roleAtomId: this.ctx.request.body.key.atomId,\n        userId: this.ctx.request.body.userId,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async deleteUserRole() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const res = await this.service.role.deleteUserRole({\n        roleAtomId: this.ctx.request.body.key.atomId,\n        userId: this.ctx.request.body.userId,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async addRoleInc() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const res = await this.service.role.addRoleInc({\n        roleAtomId: this.ctx.request.body.key.atomId,\n        roleIdInc: this.ctx.request.body.roleIdInc,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async removeRoleInc() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const res = await this.service.role.removeRoleInc({\n        roleAtomId: this.ctx.request.body.key.atomId,\n        roleIdInc: this.ctx.request.body.roleIdInc,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n  }\n  return RoleController;\n};\n","module.exports = app => {\n  class UserController extends app.Controller {\n    async select() {\n      const page = this.ctx.bean.util.page(this.ctx.request.body.page);\n      const items = await this.service.user.select({\n        query: this.ctx.request.body.query,\n        page,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.successMore(items, page.index, page.size);\n    }\n\n    async userRoles() {\n      const page = this.ctx.request.body.page;\n      const items = await this.service.user.userRoles({\n        userAtomId: this.ctx.request.body.key.atomId,\n        page,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.successMore(items, page.index, page.size);\n    }\n\n    async addUserRole() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const res = await this.service.user.addUserRole({\n        userAtomId: this.ctx.request.body.key.atomId,\n        roleId: this.ctx.request.body.roleId,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async deleteUserRole() {\n      // check demo\n      this.ctx.bean.util.checkDemo();\n      const res = await this.service.user.deleteUserRole({\n        userAtomId: this.ctx.request.body.key.atomId,\n        roleId: this.ctx.request.body.roleId,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(res);\n    }\n\n    async atomRights() {\n      const page = this.ctx.request.body.page;\n      const items = await this.service.user.atomRights({\n        userAtomId: this.ctx.request.body.key.atomId,\n        page,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.successMore(items, page.index, page.size);\n    }\n\n    async resourceRights() {\n      const page = this.ctx.request.body.page;\n      const items = await this.service.user.resourceRights({\n        userAtomId: this.ctx.request.body.key.atomId,\n        page,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.successMore(items, page.index, page.size);\n    }\n  }\n  return UserController;\n};\n","const role = require('./controller/role.js');\nconst user = require('./controller/user.js');\nconst atomRight = require('./controller/atomRight.js');\nconst resourceRight = require('./controller/resourceRight.js');\nconst auth = require('./controller/auth.js');\nconst authScene = require('./controller/authScene.js');\n\nmodule.exports = app => {\n  const controllers = {\n    role,\n    user,\n    atomRight,\n    resourceRight,\n    auth,\n    authScene,\n  };\n  return controllers;\n};\n","const config = require('./config/config.js');\nconst locales = require('./config/locales.js');\nconst errors = require('./config/errors.js');\n\n// eslint-disable-next-line\nmodule.exports = app => {\n  // beans\n  const beans = require('./beans.js')(app);\n  // routes\n  const routes = require('./routes.js')(app);\n  // controllers\n  const controllers = require('./controllers.js')(app);\n  // services\n  const services = require('./services.js')(app);\n  // models\n  const models = require('./models.js')(app);\n  // meta\n  const meta = require('./meta.js')(app);\n\n  return {\n    beans,\n    routes,\n    controllers,\n    services,\n    models,\n    config,\n    locales,\n    errors,\n    meta,\n  };\n};\n","module.exports = app => {\n  // schemas\n  const schemas = require('./config/validation/schemas.js')(app);\n  // static\n  const staticLayouts = require('./config/static/layouts.js')(app);\n  const staticResources = require('./config/static/resources.js')(app);\n  // meta\n  const meta = {\n    base: {\n      statics: {\n        'a-baselayout.layout': {\n          items: staticLayouts,\n        },\n        'a-base.resource': {\n          items: staticResources,\n        },\n      },\n    },\n    validation: {\n      validators: {},\n      keywords: {},\n      schemas: {},\n    },\n  };\n\n  return meta;\n};\n","module.exports = app => {\n  class AuthProvider extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aAuthProvider', options: { disableDeleted: true } });\n    }\n  }\n\n  return AuthProvider;\n};\n","const authProvider = require('./model/authProvider.js');\n\nmodule.exports = app => {\n  const models = {\n    authProvider,\n  };\n  return models;\n};\n","module.exports = app => {\n  const routes = [\n    // role/childrenTop\n    {\n      method: 'post',\n      path: 'role/childrenTop',\n      controller: 'role',\n    },\n    // role/children\n    {\n      method: 'post',\n      path: 'role/children',\n      controller: 'role',\n    },\n    // role/delete\n    {\n      method: 'post',\n      path: 'role/delete',\n      controller: 'role',\n      middlewares: 'transaction',\n      meta: { right: { type: 'atom', atomClass: 'a-base:role', action: 'delete' } },\n    },\n    // role/clone\n    {\n      method: 'post',\n      path: 'role/clone',\n      controller: 'role',\n      middlewares: 'transaction',\n      meta: { right: { type: 'atom', atomClass: 'a-base:role', action: 'clone' } },\n    },\n    // role/move\n    {\n      method: 'post',\n      path: 'role/move',\n      controller: 'role',\n      middlewares: 'transaction',\n      meta: { right: { type: 'atom', atomClass: 'a-base:role', action: 'move' } },\n    },\n    // role/addChild\n    {\n      method: 'post',\n      path: 'role/addChild',\n      controller: 'role',\n      middlewares: 'transaction',\n      meta: { right: { type: 'atom', atomClass: 'a-base:role', action: 'addChild' } },\n    },\n    // role/roleUsers\n    {\n      method: 'post',\n      path: 'role/roleUsers',\n      controller: 'role',\n      meta: { right: { type: 'atom', atomClass: 'a-base:role', action: 'roleUsers' } },\n    },\n    // role/addUserRole\n    {\n      method: 'post',\n      path: 'role/addUserRole',\n      controller: 'role',\n      meta: { right: { type: 'atom', atomClass: 'a-base:role', action: 'roleUsers' } },\n    },\n    // role/deleteUserRole\n    {\n      method: 'post',\n      path: 'role/deleteUserRole',\n      controller: 'role',\n      meta: { right: { type: 'atom', atomClass: 'a-base:role', action: 'roleUsers' } },\n    },\n    // role/includes\n    {\n      method: 'post',\n      path: 'role/includes',\n      controller: 'role',\n      meta: { right: { type: 'atom', atomClass: 'a-base:role', action: 'includes' } },\n    },\n    // role/addRoleInc\n    {\n      method: 'post',\n      path: 'role/addRoleInc',\n      controller: 'role',\n      meta: { right: { type: 'atom', atomClass: 'a-base:role', action: 'includes' } },\n    },\n    {\n      method: 'post',\n      path: 'role/removeRoleInc',\n      controller: 'role',\n      meta: { right: { type: 'atom', atomClass: 'a-base:role', action: 'includes' } },\n    },\n    // resourceRight\n    {\n      method: 'post',\n      path: 'resourceRight/rights',\n      controller: 'resourceRight',\n      meta: { right: { type: 'atom', atomClass: 'a-base:role', action: 'resourceAuthorizations' } },\n    },\n    {\n      method: 'post',\n      path: 'resourceRight/add',\n      controller: 'resourceRight',\n      meta: { right: { type: 'atom', atomClass: 'a-base:role', action: 'resourceAuthorizations' } },\n    },\n    {\n      method: 'post',\n      path: 'resourceRight/delete',\n      controller: 'resourceRight',\n      meta: { right: { type: 'atom', atomClass: 'a-base:role', action: 'resourceAuthorizations' } },\n    },\n    {\n      method: 'post',\n      path: 'resourceRight/spreads',\n      controller: 'resourceRight',\n      meta: { right: { type: 'atom', atomClass: 'a-base:role', action: 'resourceAuthorizations' } },\n    },\n    // atomRight\n    {\n      method: 'post',\n      path: 'atomRight/rights',\n      controller: 'atomRight',\n      meta: { right: { type: 'atom', atomClass: 'a-base:role', action: 'atomAuthorizations' } },\n    },\n    {\n      method: 'post',\n      path: 'atomRight/add',\n      controller: 'atomRight',\n      meta: { right: { type: 'atom', atomClass: 'a-base:role', action: 'atomAuthorizations', atomClassForce: false } },\n    },\n    {\n      method: 'post',\n      path: 'atomRight/delete',\n      controller: 'atomRight',\n      meta: { right: { type: 'atom', atomClass: 'a-base:role', action: 'atomAuthorizations' } },\n    },\n    {\n      method: 'post',\n      path: 'atomRight/spreads',\n      controller: 'atomRight',\n      meta: { right: { type: 'atom', atomClass: 'a-base:role', action: 'atomAuthorizations' } },\n    },\n    // user/select\n    {\n      method: 'post',\n      path: 'user/select',\n      controller: 'user',\n    },\n    // user/userRoles\n    {\n      method: 'post',\n      path: 'user/userRoles',\n      controller: 'user',\n      meta: { right: { type: 'atom', atomClass: 'a-base:user', action: 'userRoles' } },\n    },\n    // user/addUserRole\n    {\n      method: 'post',\n      path: 'user/addUserRole',\n      controller: 'user',\n      meta: { right: { type: 'atom', atomClass: 'a-base:user', action: 'userRoles' } },\n    },\n    // role/deleteUserRole\n    {\n      method: 'post',\n      path: 'user/deleteUserRole',\n      controller: 'user',\n      meta: { right: { type: 'atom', atomClass: 'a-base:user', action: 'userRoles' } },\n    },\n    {\n      method: 'post',\n      path: 'user/atomRights',\n      controller: 'user',\n      meta: { right: { type: 'atom', atomClass: 'a-base:user', action: 'atomAuthorizations' } },\n    },\n    {\n      method: 'post',\n      path: 'user/resourceRights',\n      controller: 'user',\n      meta: { right: { type: 'atom', atomClass: 'a-base:user', action: 'resourceAuthorizations' } },\n    },\n    // auth\n    { method: 'post', path: 'auth/list', controller: 'auth', meta: { right: { type: 'resource', name: 'auth' } } },\n    { method: 'post', path: 'auth/disable', controller: 'auth', meta: { right: { type: 'resource', name: 'auth' } } },\n    { method: 'post', path: 'auth/save', controller: 'auth', meta: { right: { type: 'resource', name: 'auth' } } },\n    // auth scene\n    {\n      method: 'post',\n      path: 'authScene/disable',\n      controller: 'authScene',\n      meta: { right: { type: 'resource', name: 'auth' } },\n    },\n    {\n      method: 'post',\n      path: 'authScene/save',\n      controller: 'authScene',\n      meta: { right: { type: 'resource', name: 'auth' } },\n    },\n    {\n      method: 'post',\n      path: 'authScene/add',\n      controller: 'authScene',\n      meta: { right: { type: 'resource', name: 'auth' } },\n    },\n    {\n      method: 'post',\n      path: 'authScene/delete',\n      controller: 'authScene',\n      meta: { right: { type: 'resource', name: 'auth' } },\n    },\n  ];\n  return routes;\n};\n","module.exports = app => {\n  class AtomRight extends app.Service {\n    async rights({ roleAtomId, page, user }) {\n      return await this.ctx.bean.role.roleRights({ roleAtomId, page, user });\n    }\n\n    async add({ roleAtomId, atomClass, actionCode, scopeSelf, scope, areaKey, areaScope, user }) {\n      const _atomClass = await this.ctx.bean.atomClass.get(atomClass);\n      if (scopeSelf) {\n        scope = 0;\n      }\n      return await this.ctx.bean.role.addRoleRight({\n        roleAtomId,\n        atomClassId: _atomClass.id,\n        action: actionCode,\n        scope,\n        areaKey,\n        areaScope,\n        user,\n      });\n    }\n\n    async delete({ roleAtomId, roleRightId, user }) {\n      return await this.ctx.bean.role.deleteRoleRight({ roleAtomId, roleRightId, user });\n    }\n\n    async spreads({ roleAtomId, page, user }) {\n      return await this.ctx.bean.role.roleSpreads({ roleAtomId, page, user });\n    }\n  }\n\n  return AtomRight;\n};\n","module.exports = app => {\n  class Auth extends app.Service {\n    async list() {\n      return this.ctx.bean.authProviderCache.getAuthProvidersConfigForAdmin();\n    }\n\n    async disable({ id, disabled }) {\n      // update\n      await this.ctx.model.authProvider.update({ id, disabled });\n      // item\n      const item = await this.ctx.model.authProvider.get({ id });\n      // changed\n      await this.ctx.bean.authProviderCache.authProviderChanged({\n        module: item.module,\n        providerName: item.providerName,\n      });\n    }\n\n    async save({ id, config }) {\n      // update\n      await this.ctx.model.authProvider.update({ id, config: JSON.stringify(config) });\n      // item\n      const item = await this.ctx.model.authProvider.get({ id });\n      // changed\n      await this.ctx.bean.authProviderCache.authProviderChanged({\n        module: item.module,\n        providerName: item.providerName,\n      });\n    }\n  }\n\n  return Auth;\n};\n","module.exports = app => {\n  class authScene extends app.Service {\n    async disable({ id, sceneName, disabled }) {\n      // item\n      const item = await this.ctx.model.authProvider.get({ id });\n      // update\n      const scenes = item.scenes ? JSON.parse(item.scenes) : {};\n      if (!scenes[sceneName]) {\n        scenes[sceneName] = {};\n      }\n      scenes[sceneName].disabled = disabled;\n      item.scenes = JSON.stringify(scenes);\n      await this.ctx.model.authProvider.update(item);\n      // changed\n      this.ctx.bean.authProviderCache.authProviderChanged({\n        module: item.module,\n        providerName: item.providerName,\n      });\n    }\n\n    async save({ id, sceneName, data }) {\n      // item\n      const item = await this.ctx.model.authProvider.get({ id });\n      const authProvider = this.ctx.bean.authProvider.getAuthProviderBase({\n        module: item.module,\n        providerName: item.providerName,\n      });\n      // validate data\n      const meta = authProvider.meta;\n      const metaScene = this._getMetaScene(authProvider, sceneName);\n      if (metaScene.validator.validator !== 'json') {\n        await this.ctx.bean.validation.validate({\n          module: metaScene.validator.module,\n          validator: metaScene.validator.validator,\n          data,\n          filterOptions: true,\n        });\n      }\n      // update\n      if (!meta.scene) {\n        item.config = JSON.stringify(data);\n      } else {\n        const scenes = item.scenes ? JSON.parse(item.scenes) : {};\n        if (!scenes[sceneName]) {\n          scenes[sceneName] = {};\n        }\n        scenes[sceneName] = {\n          ...data,\n          disabled: scenes[sceneName].disabled,\n        };\n        item.scenes = JSON.stringify(scenes);\n      }\n      await this.ctx.model.authProvider.update(item);\n      // changed\n      this.ctx.bean.authProviderCache.authProviderChanged({\n        module: item.module,\n        providerName: item.providerName,\n      });\n      // ok\n      return { data };\n    }\n\n    async add({ id, sceneName, data }) {\n      // item\n      const item = await this.ctx.model.authProvider.get({ id });\n      // update\n      const scenes = item.scenes ? JSON.parse(item.scenes) : {};\n      scenes[sceneName] = data;\n      item.scenes = JSON.stringify(scenes);\n      await this.ctx.model.authProvider.update(item);\n      // changed\n      this.ctx.bean.authProviderCache.authProviderChanged({\n        module: item.module,\n        providerName: item.providerName,\n      });\n    }\n\n    async delete({ id, sceneName }) {\n      // item\n      const item = await this.ctx.model.authProvider.get({ id });\n      // update\n      const scenes = item.scenes ? JSON.parse(item.scenes) : {};\n      delete scenes[sceneName];\n      item.scenes = JSON.stringify(scenes);\n      await this.ctx.model.authProvider.update(item);\n      // changed\n      this.ctx.bean.authProviderCache.authProviderChanged({\n        module: item.module,\n        providerName: item.providerName,\n      });\n    }\n\n    _getMetaScene(item, sceneName) {\n      const meta = item.meta;\n      if (meta.scene) {\n        const scene = item.scenes && item.scenes[sceneName];\n        return (scene && scene.meta) || meta;\n      }\n      return meta;\n    }\n  }\n\n  return authScene;\n};\n","module.exports = app => {\n  class ResourceRight extends app.Service {\n    async rights({ roleAtomId, page, user }) {\n      return await this.ctx.bean.resource.resourceRights({ roleAtomId, page, user });\n    }\n\n    async add({ roleAtomId, atomIds, user }) {\n      return await this.ctx.bean.resource.addResourceRoles({ roleAtomId, atomIds, user });\n    }\n\n    async delete({ roleAtomId, atomId, user }) {\n      return await this.ctx.bean.resource.deleteResourceRole({ roleAtomId, atomId, user });\n    }\n\n    async spreads({ roleAtomId, page, user }) {\n      return await this.ctx.bean.resource.resourceSpreads({ roleAtomId, page, user });\n    }\n  }\n\n  return ResourceRight;\n};\n","module.exports = app => {\n  class Role extends app.Service {\n    async childrenTop({ roleTypes, page, user }) {\n      return await this.ctx.bean.role.childrenTop({ roleTypes, page, user });\n    }\n\n    async children({ roleTypes, roleId, page, user }) {\n      return await this.ctx.bean.role.children({ roleTypes, roleId, page, user });\n    }\n\n    async delete({ roleAtomId, user }) {\n      await this.ctx.bean.role.delete({ roleAtomId, user });\n      const progressId = await this._tailBuild();\n      return { progressId };\n    }\n\n    async clone({ roleAtomId, user }) {\n      const res = await this.ctx.bean.role.clone({ roleAtomId, user });\n      const progressId = await this._tailBuild();\n      return { ...res, progressId };\n    }\n\n    async move({ roleAtomId, roleIdParent, user }) {\n      await this.ctx.bean.role.move({ roleAtomId, roleIdParent, user });\n      const progressId = await this._tailBuild();\n      return { progressId };\n    }\n\n    async addChild({ roleAtomId, user }) {\n      const res = await this.ctx.bean.role.addChild({ roleAtomId, user });\n      const progressId = await this._tailBuild();\n      return { ...res, progressId };\n    }\n\n    async roleUsers({ roleAtomId, page, user }) {\n      return await this.ctx.bean.role.roleUsers({ roleAtomId, page, user });\n    }\n\n    async addUserRole({ roleAtomId, userId, user }) {\n      return await this.ctx.bean.role.addUserRole({ roleAtomId, userId, user });\n    }\n\n    async deleteUserRole({ roleAtomId, userId, user }) {\n      return await this.ctx.bean.role.deleteUserRole({ roleAtomId, userId, user });\n    }\n\n    async includes({ roleAtomId, page, user }) {\n      return await this.ctx.bean.role.includes({ roleAtomId, page, user });\n    }\n\n    async addRoleInc({ roleAtomId, roleIdInc, user }) {\n      const res = await this.ctx.bean.role.addRoleInc({ roleAtomId, roleIdInc, user });\n      const progressId = await this._tailBuild();\n      return { ...res, progressId };\n    }\n\n    async removeRoleInc({ roleAtomId, roleIdInc, user }) {\n      await this.ctx.bean.role.removeRoleInc({ roleAtomId, roleIdInc, user });\n      const progressId = await this._tailBuild();\n      return { progressId };\n    }\n\n    async _tailBuild() {\n      const progressId = await this.ctx.bean.progress.create();\n      // build, not await\n      this.ctx.bean.role.build({ progressId });\n      return progressId;\n    }\n  }\n\n  return Role;\n};\n","module.exports = app => {\n  class User extends app.Service {\n    async select({ query, page, user }) {\n      return await this.ctx.bean.user.selectGeneral({ params: { query, page }, user });\n    }\n\n    async userRoles({ userAtomId, page, user }) {\n      return await this.ctx.bean.role.userRoles({ userAtomId, page, user });\n    }\n\n    async addUserRole({ userAtomId, roleId, user }) {\n      return await this.ctx.bean.role.addUserRole({ userAtomId, roleId, user });\n    }\n\n    async deleteUserRole({ userAtomId, roleId, user }) {\n      return await this.ctx.bean.role.deleteUserRole({ userAtomId, roleId, user });\n    }\n\n    async atomRights({ userAtomId, page, user }) {\n      return await this.ctx.bean.role.atomRightsOfUser({ userAtomId, page, user });\n    }\n\n    async resourceRights({ userAtomId, page, user }) {\n      return await this.ctx.bean.resource.resourceRightsOfUser({ userAtomId, page, user });\n    }\n  }\n\n  return User;\n};\n","const role = require('./service/role.js');\nconst user = require('./service/user.js');\nconst atomRight = require('./service/atomRight.js');\nconst resourceRight = require('./service/resourceRight.js');\nconst auth = require('./service/auth.js');\nconst authScene = require('./service/authScene.js');\n\nmodule.exports = app => {\n  const services = {\n    role,\n    user,\n    atomRight,\n    resourceRight,\n    auth,\n    authScene,\n  };\n  return services;\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(421);\n",""],"names":[],"sourceRoot":""}