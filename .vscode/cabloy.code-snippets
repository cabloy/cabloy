/**
* supported code snippets as follows:
*   controller service model route
*   broadcast event local
*   middleware queue schedule sequence
*   startup stats test
**/
{
  "Cabloy Controller": {
    "scope": "javascript",
    "prefix": "cabloy controller",
    "body": [
      "module.exports = class ${TM_FILENAME_BASE}Controller {",
      "  async action() {",
      "    const res = await this.ctx.service.${TM_FILENAME_BASE}.action();",
      "    this.ctx.success(res);",
      "  }",
      "};",
      "",
    ],
    "description": "Cabloy Controller"
  },
  "Cabloy Service": {
    "prefix": "cabloy service",
    "body": [
      "module.exports = class ${TM_FILENAME_BASE} {",
      "  async action() {",
      "  }",
      "};",
      "",
    ],
    "description": "Cabloy Service"
  },
  "Cabloy Model": {
    "prefix": "cabloy model",
    "body": [
      "module.exports = class ${TM_FILENAME_BASE} extends module.meta.class.Model {",
      "  constructor() {",
      "    super({ table: '${1:${TM_FILENAME_BASE}}', options: { disableDeleted: false } });",
      "  }",
      "};",
      "",
    ],
    "description": "Cabloy Model"
  },
  "Cabloy Route": {
    "prefix": "cabloy route",
    "body": [
      "{ method: '${1:post}', path: '${2}', controller: '${3}' },"
    ],
    "description": "Cabloy Route"
  },
  "Cabloy Broadcast": {
    "prefix": "cabloy broadcast",
    "body": [
      "module.exports = class Broadcast {",
      "  async execute(context) {",
      "    const sameAsCaller = context.sameAsCaller;",
      "    const data = context.data;",
      "    if (!sameAsCaller) {",
      "      // do something",
      "    }",
      "  }",
      "};",
      "",
    ],
    "description": "Cabloy Broadcast"
  },
  "Cabloy Event": {
    "prefix": "cabloy event",
    "body": [
      "module.exports = class EventBean {",
      "  async execute(context, next) {",
      "    const data = context.data;",
      "    // context.result = `${context.result}.echo`;",
      "    await next();",
      "    // context.result = `echo.${context.result}`;",
      "  }",
      "};",
      "",
    ],
    "description": "Cabloy Event"
  },
  "Cabloy Local": {
    "prefix": "cabloy local",
    "body": [
      "module.exports = class Local {",
      "};",
      "",
    ],
    "description": "Cabloy Local"
  },
  "Cabloy Middleware": {
    "prefix": "cabloy middleware",
    "body": [
      "module.exports = class Middleware {",
      "  async execute(options, next) {",
      "    // next",
      "    await next();",
      "  }",
      "};",
      ""
    ],
    "description": "Cabloy Middleware"
  },
  "Cabloy Queue": {
    "prefix": "cabloy queue",
    "body": [
      "module.exports = class Queue {",
      "  async execute(context) {",
      "    const data = context.data;",
      "  }",
      "};",
      "",
    ],
    "description": "Cabloy Queue"
  },
  "Cabloy Schedule": {
    "prefix": "cabloy schedule",
    "body": [
      "module.exports = class Schedule {",
      "  async execute(context) {",
      "    const job = context.job;",
      "    // console.log(`----- Schedule Test: iid=${this.ctx.instance.id}, every=${job.data.jobOptions.repeat.every}, ${new Date()}`);",
      "  }",
      "};",
      "",
    ],
    "description": "Cabloy Schedule"
  },
  "Cabloy Sequence": {
    "prefix": "cabloy sequence",
    "body": [
      "module.exports = class Sequence {",
      "  async execute(context) {",
      "    let value = context.value;",
      "    return ++value;",
      "  }",
      "};",
      "",
    ],
    "description": "Cabloy Sequence"
  },
  "Cabloy Startup": {
    "prefix": "cabloy startup",
    "body": [
      "module.exports = class Startup {",
      "  async execute() {",
      "  }",
      "};",
      "",
    ],
    "description": "Cabloy Startup"
  },
  "Cabloy Stats": {
    "prefix": "cabloy stats",
    "body": [
      "const moduleInfo = module.info;",
      "module.exports = class Stats {",
      "  async execute(context) {",
      "    const { keys, user } = context;",
      "    const fullName = keys.join('.');",
      "    const valueOld = await this.ctx.bean.stats._get({",
      "      module: moduleInfo.relativeName,",
      "      fullName,",
      "      user,",
      "    });",
      "    if (valueOld === undefined) return 1;",
      "    return valueOld + 1;",
      "  }",
      "};",
      "",
    ],
    "description": "Cabloy Stats"
  },
  "Cabloy Test": {
    "prefix": "cabloy test",
    "body": [
      "const { app, mockUrl, mockInfo, assert } = require('egg-born-mock')(__dirname);",
      "",
      "describe('action test', () => {",
      "  it('[test]', async () => {",
      "    // ctx",
      "    const ctx = await app.mockCtx();",
      "",
      "    // login as root",
      "    await ctx.meta.mockUtil.login({ auth: 'root' });",
      "  });",
      "});",
      ""
    ],
    "description": "Cabloy Test"
  }
}
